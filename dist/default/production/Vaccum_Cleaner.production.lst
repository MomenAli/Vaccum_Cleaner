

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Jan 14 23:10:18 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.10
    19                           ; Generated 31/07/2019 GMT
    20                           ; 
    21                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0093                     	;# 
   219  0094                     	;# 
   220  0098                     	;# 
   221  0099                     	;# 
   222  009C                     	;# 
   223  009D                     	;# 
   224  009E                     	;# 
   225  009F                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  010F                     	;# 
   230  018C                     	;# 
   231  018D                     	;# 
   232  0000                     	;# 
   233  0001                     	;# 
   234  0002                     	;# 
   235  0003                     	;# 
   236  0004                     	;# 
   237  0005                     	;# 
   238  0006                     	;# 
   239  0007                     	;# 
   240  0008                     	;# 
   241  0009                     	;# 
   242  000A                     	;# 
   243  000B                     	;# 
   244  000C                     	;# 
   245  000D                     	;# 
   246  000E                     	;# 
   247  000E                     	;# 
   248  000F                     	;# 
   249  0010                     	;# 
   250  0011                     	;# 
   251  0012                     	;# 
   252  0013                     	;# 
   253  0014                     	;# 
   254  0015                     	;# 
   255  0015                     	;# 
   256  0016                     	;# 
   257  0017                     	;# 
   258  0018                     	;# 
   259  0019                     	;# 
   260  001A                     	;# 
   261  001B                     	;# 
   262  001B                     	;# 
   263  001C                     	;# 
   264  001D                     	;# 
   265  001E                     	;# 
   266  001F                     	;# 
   267  0081                     	;# 
   268  0085                     	;# 
   269  0086                     	;# 
   270  0087                     	;# 
   271  0088                     	;# 
   272  0089                     	;# 
   273  008C                     	;# 
   274  008D                     	;# 
   275  008E                     	;# 
   276  0091                     	;# 
   277  0092                     	;# 
   278  0093                     	;# 
   279  0094                     	;# 
   280  0098                     	;# 
   281  0099                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  010F                     	;# 
   290  018C                     	;# 
   291  018D                     	;# 
   292                           
   293                           	psect	idataCOMMON
   294  05A3                     __pidataCOMMON:	
   295                           
   296                           ;initializer for SW_Update@SW_Time_Counter
   297  05A3  340F               	retlw	15
   298  0006                     _PORTB	set	6
   299  0089                     _TRISE	set	137
   300  0088                     _TRISD	set	136
   301  0087                     _TRISC	set	135
   302  0085                     _TRISA	set	133
   303  0086                     _TRISB	set	134
   304                           
   305                           ; #config settings
   306  0000                     
   307                           	psect	cinit
   308  07ED                     start_initialization:	
   309  07ED                     __initialization:	
   310                           
   311                           ; Initialize objects allocated to COMMON
   312  07ED  120A  118A  25A3  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   313  07F2  00FD               	movwf	__pdataCOMMON& (0+127)
   314                           
   315                           ; Clear objects allocated to BANK0
   316  07F3  01A0               	clrf	__pbssBANK0& (0+127)
   317  07F4  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   318  07F5  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   319  07F6  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   320  07F7  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   321  07F8  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   322  07F9  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   323  07FA  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   324  07FB  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   325  07FC                     end_of_initialization:	
   326                           ;End of C runtime variable initialization code
   327                           
   328  07FC                     __end_of__initialization:	
   329  07FC  0183               	clrf	3
   330  07FD  120A  118A  2E0B   	ljmp	_main	;jump to C main() function
   331                           
   332                           	psect	dataCOMMON
   333  007D                     __pdataCOMMON:	
   334  007D                     SW_Update@SW_Time_Counter:	
   335  007D                     	ds	1
   336                           
   337                           	psect	bssBANK0
   338  0020                     __pbssBANK0:	
   339  0020                     _SW_DATA:	
   340  0020                     	ds	9
   341                           
   342                           	psect	cstackCOMMON
   343  0070                     __pcstackCOMMON:	
   344  0070                     ?_SW_Init:	
   345  0070                     ?_GPIO_Init_Pin:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_SW_Update:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_SW_GetState:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_SW_UpdateState:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_main:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?___bmul:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ___bmul@multiplicand:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     GPIO_Init_Pin@DirRegAddress:	
   367                           ; 1 bytes @ 0x0
   368                           
   369                           
   370                           ; 2 bytes @ 0x0
   371  0070                     	ds	1
   372  0071                     ??___bmul:	
   373                           
   374                           ; 1 bytes @ 0x1
   375  0071                     	ds	1
   376  0072                     GPIO_Init_Pin@pin_number:	
   377  0072                     ___bmul@product:	
   378                           ; 1 bytes @ 0x2
   379                           
   380                           
   381                           ; 1 bytes @ 0x2
   382  0072                     	ds	1
   383  0073                     GPIO_Init_Pin@dir:	
   384  0073                     ___bmul@multiplier:	
   385                           ; 1 bytes @ 0x3
   386                           
   387                           
   388                           ; 1 bytes @ 0x3
   389  0073                     	ds	1
   390  0074                     ??_GPIO_Init_Pin:	
   391  0074                     ??_SW_GetState:	
   392                           ; 1 bytes @ 0x4
   393                           
   394  0074                     ??_SW_UpdateState:	
   395                           ; 1 bytes @ 0x4
   396                           
   397                           
   398                           ; 1 bytes @ 0x4
   399  0074                     	ds	2
   400  0076                     SW_GetState@sw:	
   401                           
   402                           ; 1 bytes @ 0x6
   403  0076                     	ds	1
   404  0077                     SW_GetState@ret:	
   405  0077                     SW_UpdateState@sw:	
   406                           ; 1 bytes @ 0x7
   407                           
   408                           
   409                           ; 1 bytes @ 0x7
   410  0077                     	ds	1
   411  0078                     ??_SW_Init:	
   412  0078                     ??_SW_Update:	
   413                           ; 1 bytes @ 0x8
   414                           
   415                           
   416                           ; 1 bytes @ 0x8
   417  0078                     	ds	2
   418  007A                     ??_main:	
   419                           
   420                           ; 1 bytes @ 0xA
   421  007A                     	ds	3
   422                           
   423                           	psect	maintext
   424  060B                     __pmaintext:	
   425 ;;
   426 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   427 ;;
   428 ;; *************** function _main *****************
   429 ;; Defined at:
   430 ;;		line 15 in file "VaccumCleaner.c"
   431 ;; Parameters:    Size  Location     Type
   432 ;;		None
   433 ;; Auto vars:     Size  Location     Type
   434 ;;		None
   435 ;; Return value:  Size  Location     Type
   436 ;;                  1    wreg      void 
   437 ;; Registers used:
   438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   439 ;; Tracked objects:
   440 ;;		On entry : B00/0
   441 ;;		On exit  : 0/0
   442 ;;		Unchanged: 0/0
   443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   444 ;;      Params:         0       0       0       0       0
   445 ;;      Locals:         0       0       0       0       0
   446 ;;      Temps:          3       0       0       0       0
   447 ;;      Totals:         3       0       0       0       0
   448 ;;Total ram usage:        3 bytes
   449 ;; Hardware stack levels required when called:    3
   450 ;; This function calls:
   451 ;;		_GPIO_Init_Pin
   452 ;;		_SW_GetState
   453 ;;		_SW_Init
   454 ;;		_SW_Update
   455 ;; This function is called by:
   456 ;;		Startup code after reset
   457 ;; This function uses a non-reentrant model
   458 ;;
   459                           
   460                           
   461                           ;psect for function _main
   462  060B                     _main:	
   463  060B                     l966:	
   464                           ;incstack = 0
   465                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   466                           
   467                           
   468                           ;VaccumCleaner.c: 17:     SW_Init();
   469  060B  120A  118A  25CD  120A  118A  	fcall	_SW_Init
   470                           
   471                           ;VaccumCleaner.c: 18:     GPIO_Init_Pin(&(TRISB),(3),(0));
   472  0610  3086               	movlw	134
   473  0611  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
   474  0612  3000               	movlw	0
   475  0613  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
   476  0614  3003               	movlw	3
   477  0615  00FA               	movwf	??_main
   478  0616  087A               	movf	??_main,w
   479  0617  00F2               	movwf	GPIO_Init_Pin@pin_number
   480  0618  01F3               	clrf	GPIO_Init_Pin@dir
   481  0619  120A  118A  2696  120A  118A  	fcall	_GPIO_Init_Pin
   482  061E                     l968:	
   483                           
   484                           ;VaccumCleaner.c: 20:     {;VaccumCleaner.c: 21:         _delay((unsigned long)((1000)*(
      +                          8000000/4000.0)));
   485  061E  300B               	movlw	11
   486  061F  00FC               	movwf	??_main+2
   487  0620  3026               	movlw	38
   488  0621  00FB               	movwf	??_main+1
   489  0622  305D               	movlw	93
   490  0623  00FA               	movwf	??_main
   491  0624                     u477:	
   492  0624  0BFA               	decfsz	??_main,f
   493  0625  2E24               	goto	u477
   494  0626  0BFB               	decfsz	??_main+1,f
   495  0627  2E24               	goto	u477
   496  0628  0BFC               	decfsz	??_main+2,f
   497  0629  2E24               	goto	u477
   498  062A  2E2B               	nop2
   499  062B                     l970:	
   500                           
   501                           ;VaccumCleaner.c: 22:         SW_Update();
   502  062B  120A  118A  264B  120A  118A  	fcall	_SW_Update
   503  0630                     l972:	
   504                           
   505                           ;VaccumCleaner.c: 23:         if(SW_GetState(SW_PLUS) == SW_PRESSED)
   506  0630  3000               	movlw	0
   507  0631  120A  118A  25A4  120A  118A  	fcall	_SW_GetState
   508  0636  3A02               	xorlw	2
   509  0637  1D03               	skipz
   510  0638  2E3A               	goto	u461
   511  0639  2E3B               	goto	u460
   512  063A                     u461:	
   513  063A  2E41               	goto	l976
   514  063B                     u460:	
   515  063B                     l974:	
   516                           
   517                           ;VaccumCleaner.c: 24:         {;VaccumCleaner.c: 25:             (((PORTB))=((PORTB) & ~
      +                          (1<<(3)))|(0<<(3)));
   518  063B  1283               	bcf	3,5	;RP0=0, select bank0
   519  063C  1303               	bcf	3,6	;RP1=0, select bank0
   520  063D  0806               	movf	6,w	;volatile
   521  063E  39F7               	andlw	247
   522  063F  0086               	movwf	6	;volatile
   523                           
   524                           ;VaccumCleaner.c: 26:         }
   525  0640  2E1E               	goto	l968
   526  0641                     l976:	
   527                           
   528                           ;VaccumCleaner.c: 28:         {;VaccumCleaner.c: 29:             (((PORTB))=((PORTB) & ~
      +                          (1<<(3)))|(1<<(3)));
   529  0641  1283               	bcf	3,5	;RP0=0, select bank0
   530  0642  1303               	bcf	3,6	;RP1=0, select bank0
   531  0643  0806               	movf	6,w	;volatile
   532  0644  39F7               	andlw	247
   533  0645  3808               	iorlw	8
   534  0646  0086               	movwf	6	;volatile
   535  0647  2E1E               	goto	l968
   536  0648  120A  118A  2800   	ljmp	start
   537  064B                     __end_of_main:	
   538                           
   539                           	psect	text1
   540  064B                     __ptext1:	
   541 ;; *************** function _SW_Update *****************
   542 ;; Defined at:
   543 ;;		line 84 in file "SW.c"
   544 ;; Parameters:    Size  Location     Type
   545 ;;		None
   546 ;; Auto vars:     Size  Location     Type
   547 ;;		None
   548 ;; Return value:  Size  Location     Type
   549 ;;                  1    wreg      void 
   550 ;; Registers used:
   551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   552 ;; Tracked objects:
   553 ;;		On entry : 0/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   557 ;;      Params:         0       0       0       0       0
   558 ;;      Locals:         0       0       0       0       0
   559 ;;      Temps:          2       0       0       0       0
   560 ;;      Totals:         2       0       0       0       0
   561 ;;Total ram usage:        2 bytes
   562 ;; Hardware stack levels used:    1
   563 ;; Hardware stack levels required when called:    2
   564 ;; This function calls:
   565 ;;		_SW_UpdateState
   566 ;; This function is called by:
   567 ;;		_main
   568 ;; This function uses a non-reentrant model
   569 ;;
   570                           
   571                           
   572                           ;psect for function _SW_Update
   573  064B                     _SW_Update:	
   574  064B                     l936:	
   575                           ;incstack = 0
   576                           ; Regs used in _SW_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   577                           
   578                           
   579                           ;SW.c: 90:     static uint8 SW_Time_Counter = 15;;SW.c: 91:     SW_Time_Counter += (5);
   580  064B  3005               	movlw	5
   581  064C  00F8               	movwf	??_SW_Update
   582  064D  0878               	movf	??_SW_Update,w
   583  064E  07FD               	addwf	SW_Update@SW_Time_Counter,f
   584                           
   585                           ;SW.c: 93:     if(SW_Time_Counter != (20))
   586  064F  3014               	movlw	20
   587  0650  067D               	xorwf	SW_Update@SW_Time_Counter,w
   588  0651  1903               	btfsc	3,2
   589  0652  2E54               	goto	u441
   590  0653  2E55               	goto	u440
   591  0654                     u441:	
   592  0654  2E56               	goto	l940
   593  0655                     u440:	
   594  0655  2E95               	goto	l70
   595  0656                     l940:	
   596                           
   597                           ;SW.c: 97:     SW_Time_Counter = 0;
   598  0656  01FD               	clrf	SW_Update@SW_Time_Counter
   599  0657                     l942:	
   600                           
   601                           ;SW.c: 99:     SW_DATA[SW_PLUS].samples[0] = SW_DATA[SW_PLUS].samples[1];
   602  0657  1283               	bcf	3,5	;RP0=0, select bank0
   603  0658  1303               	bcf	3,6	;RP1=0, select bank0
   604  0659  0821               	movf	_SW_DATA+1,w
   605  065A  00F8               	movwf	??_SW_Update
   606  065B  0878               	movf	??_SW_Update,w
   607  065C  00A0               	movwf	_SW_DATA
   608                           
   609                           ;SW.c: 100:     SW_DATA[SW_PLUS].samples[1] = (((PORTB) >> (0))& 1);
   610  065D  0806               	movf	6,w	;volatile
   611  065E  3901               	andlw	1
   612  065F  00F8               	movwf	??_SW_Update
   613  0660  0878               	movf	??_SW_Update,w
   614  0661  00A1               	movwf	_SW_DATA+1
   615  0662                     l944:	
   616                           
   617                           ;SW.c: 102:     SW_UpdateState(SW_PLUS);
   618  0662  3000               	movlw	0
   619  0663  120A  118A  26F4  120A  118A  	fcall	_SW_UpdateState
   620  0668                     l946:	
   621                           
   622                           ;SW.c: 104:     SW_DATA[SW_MINUS].samples[0] = SW_DATA[SW_MINUS].samples[1];
   623  0668  1283               	bcf	3,5	;RP0=0, select bank0
   624  0669  1303               	bcf	3,6	;RP1=0, select bank0
   625  066A  0824               	movf	_SW_DATA+4,w
   626  066B  00F8               	movwf	??_SW_Update
   627  066C  0878               	movf	??_SW_Update,w
   628  066D  00A3               	movwf	_SW_DATA+3
   629  066E                     l948:	
   630                           
   631                           ;SW.c: 105:     SW_DATA[SW_MINUS].samples[1] = (((PORTB) >> (1))& 1);
   632  066E  0806               	movf	6,w	;volatile
   633  066F  00F8               	movwf	??_SW_Update
   634  0670  1003               	clrc
   635  0671  0C78               	rrf	??_SW_Update,w
   636  0672  3901               	andlw	1
   637  0673  00F9               	movwf	??_SW_Update+1
   638  0674  0879               	movf	??_SW_Update+1,w
   639  0675  00A4               	movwf	_SW_DATA+4
   640  0676                     l950:	
   641                           
   642                           ;SW.c: 107:     SW_UpdateState(SW_MINUS);
   643  0676  3001               	movlw	1
   644  0677  120A  118A  26F4  120A  118A  	fcall	_SW_UpdateState
   645  067C                     l952:	
   646                           
   647                           ;SW.c: 110:     SW_DATA[SW_SET].samples[0] = SW_DATA[SW_SET].samples[1];
   648  067C  1283               	bcf	3,5	;RP0=0, select bank0
   649  067D  1303               	bcf	3,6	;RP1=0, select bank0
   650  067E  0827               	movf	_SW_DATA+7,w
   651  067F  00F8               	movwf	??_SW_Update
   652  0680  0878               	movf	??_SW_Update,w
   653  0681  00A6               	movwf	_SW_DATA+6
   654  0682                     l954:	
   655                           
   656                           ;SW.c: 111:     SW_DATA[SW_SET].samples[1] = (((PORTB) >> (2))& 1);
   657  0682  0806               	movf	6,w	;volatile
   658  0683  00F8               	movwf	??_SW_Update
   659  0684  3002               	movlw	2
   660  0685                     u455:	
   661  0685  1003               	clrc
   662  0686  0CF8               	rrf	??_SW_Update,f
   663  0687  3EFF               	addlw	-1
   664  0688  1D03               	skipz
   665  0689  2E85               	goto	u455
   666  068A  0878               	movf	??_SW_Update,w
   667  068B  3901               	andlw	1
   668  068C  00F9               	movwf	??_SW_Update+1
   669  068D  0879               	movf	??_SW_Update+1,w
   670  068E  00A7               	movwf	_SW_DATA+7
   671  068F                     l956:	
   672                           
   673                           ;SW.c: 113:     SW_UpdateState(SW_SET);
   674  068F  3002               	movlw	2
   675  0690  120A  118A  26F4  120A  118A  	fcall	_SW_UpdateState
   676  0695                     l70:	
   677  0695  0008               	return
   678  0696                     __end_of_SW_Update:	
   679                           
   680                           	psect	text2
   681  06F4                     __ptext2:	
   682 ;; *************** function _SW_UpdateState *****************
   683 ;; Defined at:
   684 ;;		line 116 in file "SW.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;  sw              1    wreg     enum E859
   687 ;; Auto vars:     Size  Location     Type
   688 ;;  sw              1    7[COMMON] enum E859
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      void 
   691 ;; Registers used:
   692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   698 ;;      Params:         0       0       0       0       0
   699 ;;      Locals:         1       0       0       0       0
   700 ;;      Temps:          3       0       0       0       0
   701 ;;      Totals:         4       0       0       0       0
   702 ;;Total ram usage:        4 bytes
   703 ;; Hardware stack levels used:    1
   704 ;; Hardware stack levels required when called:    1
   705 ;; This function calls:
   706 ;;		___bmul
   707 ;; This function is called by:
   708 ;;		_SW_Update
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           
   713                           ;psect for function _SW_UpdateState
   714  06F4                     _SW_UpdateState:	
   715                           
   716                           ;incstack = 0
   717                           ; Regs used in _SW_UpdateState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   718                           ;SW_UpdateState@sw stored from wreg
   719  06F4  00F7               	movwf	SW_UpdateState@sw
   720  06F5                     l880:	
   721                           
   722                           ;SW.c: 116: void SW_UpdateState(SW_t sw);SW.c: 117: {;SW.c: 133:     switch(SW_DATA[sw].
      +                          state)
   723  06F5  2FC9               	goto	l908
   724  06F6                     l882:	
   725                           
   726                           ;SW.c: 137:             if(SW_DATA[sw].samples[0] == (1) && SW_DATA[sw].samples[1] == (1
      +                          ))
   727  06F6  3003               	movlw	3
   728  06F7  00F4               	movwf	??_SW_UpdateState
   729  06F8  0874               	movf	??_SW_UpdateState,w
   730  06F9  00F0               	movwf	___bmul@multiplicand
   731  06FA  0877               	movf	SW_UpdateState@sw,w
   732  06FB  120A  118A  25B8  120A  118A  	fcall	___bmul
   733  0700  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
   734  0701  0084               	movwf	4
   735  0702  1383               	bcf	3,7	;select IRP bank0
   736  0703  0300               	decf	0,w
   737  0704  1D03               	btfss	3,2
   738  0705  2F07               	goto	u361
   739  0706  2F08               	goto	u360
   740  0707                     u361:	
   741  0707  2FEC               	goto	l84
   742  0708                     u360:	
   743  0708                     l884:	
   744  0708  3003               	movlw	3
   745  0709  00F4               	movwf	??_SW_UpdateState
   746  070A  0874               	movf	??_SW_UpdateState,w
   747  070B  00F0               	movwf	___bmul@multiplicand
   748  070C  0877               	movf	SW_UpdateState@sw,w
   749  070D  120A  118A  25B8  120A  118A  	fcall	___bmul
   750  0712  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
   751  0713  0084               	movwf	4
   752  0714  1383               	bcf	3,7	;select IRP bank0
   753  0715  0300               	decf	0,w
   754  0716  1D03               	btfss	3,2
   755  0717  2F19               	goto	u371
   756  0718  2F1A               	goto	u370
   757  0719                     u371:	
   758  0719  2FEC               	goto	l84
   759  071A                     u370:	
   760  071A                     l886:	
   761                           
   762                           ;SW.c: 138:                 SW_DATA[sw].state = SW_RELEASED;
   763  071A  3003               	movlw	3
   764  071B  00F4               	movwf	??_SW_UpdateState
   765  071C  0874               	movf	??_SW_UpdateState,w
   766  071D  00F0               	movwf	___bmul@multiplicand
   767  071E  0877               	movf	SW_UpdateState@sw,w
   768  071F  120A  118A  25B8  120A  118A  	fcall	___bmul
   769  0724  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
   770  0725  0084               	movwf	4
   771  0726  1383               	bcf	3,7	;select IRP bank0
   772  0727  0180               	clrf	0
   773  0728  2FEC               	goto	l84
   774  0729                     l888:	
   775                           
   776                           ;SW.c: 141:             if(SW_DATA[sw].samples[0] == (0) && SW_DATA[sw].samples[1] == (0
      +                          ))
   777  0729  3003               	movlw	3
   778  072A  00F4               	movwf	??_SW_UpdateState
   779  072B  0874               	movf	??_SW_UpdateState,w
   780  072C  00F0               	movwf	___bmul@multiplicand
   781  072D  0877               	movf	SW_UpdateState@sw,w
   782  072E  120A  118A  25B8  120A  118A  	fcall	___bmul
   783  0733  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
   784  0734  0084               	movwf	4
   785  0735  1383               	bcf	3,7	;select IRP bank0
   786  0736  0800               	movf	0,w
   787  0737  1D03               	btfss	3,2
   788  0738  2F3A               	goto	u381
   789  0739  2F3B               	goto	u380
   790  073A                     u381:	
   791  073A  2FEC               	goto	l84
   792  073B                     u380:	
   793  073B                     l890:	
   794  073B  3003               	movlw	3
   795  073C  00F4               	movwf	??_SW_UpdateState
   796  073D  0874               	movf	??_SW_UpdateState,w
   797  073E  00F0               	movwf	___bmul@multiplicand
   798  073F  0877               	movf	SW_UpdateState@sw,w
   799  0740  120A  118A  25B8  120A  118A  	fcall	___bmul
   800  0745  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
   801  0746  0084               	movwf	4
   802  0747  1383               	bcf	3,7	;select IRP bank0
   803  0748  0800               	movf	0,w
   804  0749  1D03               	btfss	3,2
   805  074A  2F4C               	goto	u391
   806  074B  2F4D               	goto	u390
   807  074C                     u391:	
   808  074C  2FEC               	goto	l84
   809  074D                     u390:	
   810  074D                     l892:	
   811                           
   812                           ;SW.c: 142:                 SW_DATA[sw].state = SW_PRE_PRESSED;
   813  074D  3003               	movlw	3
   814  074E  00F4               	movwf	??_SW_UpdateState
   815  074F  0874               	movf	??_SW_UpdateState,w
   816  0750  00F0               	movwf	___bmul@multiplicand
   817  0751  0877               	movf	SW_UpdateState@sw,w
   818  0752  120A  118A  25B8  120A  118A  	fcall	___bmul
   819  0757  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
   820  0758  0084               	movwf	4
   821  0759  1383               	bcf	3,7	;select IRP bank0
   822  075A  0180               	clrf	0
   823  075B  0A80               	incf	0,f
   824  075C  2FEC               	goto	l84
   825  075D                     l894:	
   826                           
   827                           ;SW.c: 145:             if(SW_DATA[sw].samples[0] == (0) && SW_DATA[sw].samples[1] == (0
      +                          ))
   828  075D  3003               	movlw	3
   829  075E  00F4               	movwf	??_SW_UpdateState
   830  075F  0874               	movf	??_SW_UpdateState,w
   831  0760  00F0               	movwf	___bmul@multiplicand
   832  0761  0877               	movf	SW_UpdateState@sw,w
   833  0762  120A  118A  25B8  120A  118A  	fcall	___bmul
   834  0767  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
   835  0768  0084               	movwf	4
   836  0769  1383               	bcf	3,7	;select IRP bank0
   837  076A  0800               	movf	0,w
   838  076B  1D03               	btfss	3,2
   839  076C  2F6E               	goto	u401
   840  076D  2F6F               	goto	u400
   841  076E                     u401:	
   842  076E  2FEC               	goto	l84
   843  076F                     u400:	
   844  076F                     l896:	
   845  076F  3003               	movlw	3
   846  0770  00F4               	movwf	??_SW_UpdateState
   847  0771  0874               	movf	??_SW_UpdateState,w
   848  0772  00F0               	movwf	___bmul@multiplicand
   849  0773  0877               	movf	SW_UpdateState@sw,w
   850  0774  120A  118A  25B8  120A  118A  	fcall	___bmul
   851  0779  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
   852  077A  0084               	movwf	4
   853  077B  1383               	bcf	3,7	;select IRP bank0
   854  077C  0800               	movf	0,w
   855  077D  1D03               	btfss	3,2
   856  077E  2F80               	goto	u411
   857  077F  2F81               	goto	u410
   858  0780                     u411:	
   859  0780  2FEC               	goto	l84
   860  0781                     u410:	
   861  0781                     l898:	
   862                           
   863                           ;SW.c: 146:                 SW_DATA[sw].state = SW_PRESSED;
   864  0781  3002               	movlw	2
   865  0782  00F4               	movwf	??_SW_UpdateState
   866  0783  3003               	movlw	3
   867  0784  00F5               	movwf	??_SW_UpdateState+1
   868  0785  0875               	movf	??_SW_UpdateState+1,w
   869  0786  00F0               	movwf	___bmul@multiplicand
   870  0787  0877               	movf	SW_UpdateState@sw,w
   871  0788  120A  118A  25B8  120A  118A  	fcall	___bmul
   872  078D  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
   873  078E  0084               	movwf	4
   874  078F  0874               	movf	??_SW_UpdateState,w
   875  0790  1383               	bcf	3,7	;select IRP bank0
   876  0791  0080               	movwf	0
   877  0792  2FEC               	goto	l84
   878  0793                     l900:	
   879                           
   880                           ;SW.c: 149:             if(SW_DATA[sw].samples[0] == (1) && SW_DATA[sw].samples[1] == (1
      +                          ))
   881  0793  3003               	movlw	3
   882  0794  00F4               	movwf	??_SW_UpdateState
   883  0795  0874               	movf	??_SW_UpdateState,w
   884  0796  00F0               	movwf	___bmul@multiplicand
   885  0797  0877               	movf	SW_UpdateState@sw,w
   886  0798  120A  118A  25B8  120A  118A  	fcall	___bmul
   887  079D  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
   888  079E  0084               	movwf	4
   889  079F  1383               	bcf	3,7	;select IRP bank0
   890  07A0  0300               	decf	0,w
   891  07A1  1D03               	btfss	3,2
   892  07A2  2FA4               	goto	u421
   893  07A3  2FA5               	goto	u420
   894  07A4                     u421:	
   895  07A4  2FEC               	goto	l84
   896  07A5                     u420:	
   897  07A5                     l902:	
   898  07A5  3003               	movlw	3
   899  07A6  00F4               	movwf	??_SW_UpdateState
   900  07A7  0874               	movf	??_SW_UpdateState,w
   901  07A8  00F0               	movwf	___bmul@multiplicand
   902  07A9  0877               	movf	SW_UpdateState@sw,w
   903  07AA  120A  118A  25B8  120A  118A  	fcall	___bmul
   904  07AF  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
   905  07B0  0084               	movwf	4
   906  07B1  1383               	bcf	3,7	;select IRP bank0
   907  07B2  0300               	decf	0,w
   908  07B3  1D03               	btfss	3,2
   909  07B4  2FB6               	goto	u431
   910  07B5  2FB7               	goto	u430
   911  07B6                     u431:	
   912  07B6  2FEC               	goto	l84
   913  07B7                     u430:	
   914  07B7                     l904:	
   915                           
   916                           ;SW.c: 150:                 SW_DATA[sw].state = SW_PRE_RELEASED;
   917  07B7  3003               	movlw	3
   918  07B8  00F4               	movwf	??_SW_UpdateState
   919  07B9  3003               	movlw	3
   920  07BA  00F5               	movwf	??_SW_UpdateState+1
   921  07BB  0875               	movf	??_SW_UpdateState+1,w
   922  07BC  00F0               	movwf	___bmul@multiplicand
   923  07BD  0877               	movf	SW_UpdateState@sw,w
   924  07BE  120A  118A  25B8  120A  118A  	fcall	___bmul
   925  07C3  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
   926  07C4  0084               	movwf	4
   927  07C5  0874               	movf	??_SW_UpdateState,w
   928  07C6  1383               	bcf	3,7	;select IRP bank0
   929  07C7  0080               	movwf	0
   930  07C8  2FEC               	goto	l84
   931  07C9                     l908:	
   932  07C9  3003               	movlw	3
   933  07CA  00F4               	movwf	??_SW_UpdateState
   934  07CB  0874               	movf	??_SW_UpdateState,w
   935  07CC  00F0               	movwf	___bmul@multiplicand
   936  07CD  0877               	movf	SW_UpdateState@sw,w
   937  07CE  120A  118A  25B8  120A  118A  	fcall	___bmul
   938  07D3  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
   939  07D4  0084               	movwf	4
   940  07D5  1383               	bcf	3,7	;select IRP bank0
   941  07D6  0800               	movf	0,w
   942  07D7  00F5               	movwf	??_SW_UpdateState+1
   943  07D8  01F6               	clrf	??_SW_UpdateState+2
   944                           
   945                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   946                           ; Switch size 1, requested type "simple"
   947                           ; Number of cases is 1, Range of values is 0 to 0
   948                           ; switch strategies available:
   949                           ; Name         Instructions Cycles
   950                           ; simple_byte            4     3 (average)
   951                           ; direct_byte           11     8 (fixed)
   952                           ; jumptable            260     6 (fixed)
   953                           ;	Chosen strategy is simple_byte
   954  07D9  0876               	movf	??_SW_UpdateState+2,w
   955  07DA  3A00               	xorlw	0	; case 0
   956  07DB  1903               	skipnz
   957  07DC  2FDE               	goto	l998
   958  07DD  2FEC               	goto	l84
   959  07DE                     l998:	
   960                           
   961                           ; Switch size 1, requested type "simple"
   962                           ; Number of cases is 4, Range of values is 0 to 3
   963                           ; switch strategies available:
   964                           ; Name         Instructions Cycles
   965                           ; simple_byte           13     7 (average)
   966                           ; direct_byte           20     8 (fixed)
   967                           ; jumptable            260     6 (fixed)
   968                           ;	Chosen strategy is simple_byte
   969  07DE  0875               	movf	??_SW_UpdateState+1,w
   970  07DF  3A00               	xorlw	0	; case 0
   971  07E0  1903               	skipnz
   972  07E1  2F29               	goto	l888
   973  07E2  3A01               	xorlw	1	; case 1
   974  07E3  1903               	skipnz
   975  07E4  2F5D               	goto	l894
   976  07E5  3A03               	xorlw	3	; case 2
   977  07E6  1903               	skipnz
   978  07E7  2F93               	goto	l900
   979  07E8  3A01               	xorlw	1	; case 3
   980  07E9  1903               	skipnz
   981  07EA  2EF6               	goto	l882
   982  07EB  2FEC               	goto	l84
   983  07EC                     l84:	
   984  07EC  0008               	return
   985  07ED                     __end_of_SW_UpdateState:	
   986                           
   987                           	psect	text3
   988  05CD                     __ptext3:	
   989 ;; *************** function _SW_Init *****************
   990 ;; Defined at:
   991 ;;		line 54 in file "SW.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;		None
   994 ;; Auto vars:     Size  Location     Type
   995 ;;		None
   996 ;; Return value:  Size  Location     Type
   997 ;;                  1    wreg      void 
   998 ;; Registers used:
   999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1005 ;;      Params:         0       0       0       0       0
  1006 ;;      Locals:         0       0       0       0       0
  1007 ;;      Temps:          1       0       0       0       0
  1008 ;;      Totals:         1       0       0       0       0
  1009 ;;Total ram usage:        1 bytes
  1010 ;; Hardware stack levels used:    1
  1011 ;; Hardware stack levels required when called:    1
  1012 ;; This function calls:
  1013 ;;		_GPIO_Init_Pin
  1014 ;; This function is called by:
  1015 ;;		_main
  1016 ;; This function uses a non-reentrant model
  1017 ;;
  1018                           
  1019                           
  1020                           ;psect for function _SW_Init
  1021  05CD                     _SW_Init:	
  1022  05CD                     l914:	
  1023                           ;incstack = 0
  1024                           ; Regs used in _SW_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1025                           
  1026                           
  1027                           ;SW.c: 58:     GPIO_Init_Pin(&(TRISB),(0),(1));
  1028  05CD  3086               	movlw	134
  1029  05CE  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1030  05CF  3000               	movlw	0
  1031  05D0  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1032  05D1  01F2               	clrf	GPIO_Init_Pin@pin_number
  1033  05D2  01F3               	clrf	GPIO_Init_Pin@dir
  1034  05D3  0AF3               	incf	GPIO_Init_Pin@dir,f
  1035  05D4  120A  118A  2696  120A  118A  	fcall	_GPIO_Init_Pin
  1036  05D9                     l916:	
  1037                           
  1038                           ;SW.c: 59:     SW_DATA[SW_PLUS].state = SW_RELEASED;
  1039  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  1040  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  1041  05DB  01A2               	clrf	_SW_DATA+2
  1042  05DC                     l918:	
  1043                           
  1044                           ;SW.c: 60:     SW_DATA[SW_PLUS].samples[0] = (1);
  1045  05DC  01A0               	clrf	_SW_DATA
  1046  05DD  0AA0               	incf	_SW_DATA,f
  1047  05DE                     l920:	
  1048                           
  1049                           ;SW.c: 61:     SW_DATA[SW_PLUS].samples[1] = (1);
  1050  05DE  01A1               	clrf	_SW_DATA+1
  1051  05DF  0AA1               	incf	_SW_DATA+1,f
  1052  05E0                     l922:	
  1053                           
  1054                           ;SW.c: 63:     GPIO_Init_Pin(&(TRISB),(1),(1));
  1055  05E0  3086               	movlw	134
  1056  05E1  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1057  05E2  3000               	movlw	0
  1058  05E3  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1059  05E4  01F2               	clrf	GPIO_Init_Pin@pin_number
  1060  05E5  0AF2               	incf	GPIO_Init_Pin@pin_number,f
  1061  05E6  01F3               	clrf	GPIO_Init_Pin@dir
  1062  05E7  0AF3               	incf	GPIO_Init_Pin@dir,f
  1063  05E8  120A  118A  2696  120A  118A  	fcall	_GPIO_Init_Pin
  1064                           
  1065                           ;SW.c: 64:     SW_DATA[SW_MINUS].state = SW_RELEASED;
  1066  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1067  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1068  05EF  01A5               	clrf	_SW_DATA+5
  1069  05F0                     l924:	
  1070                           
  1071                           ;SW.c: 65:     SW_DATA[SW_MINUS].samples[0] = (1);
  1072  05F0  01A3               	clrf	_SW_DATA+3
  1073  05F1  0AA3               	incf	_SW_DATA+3,f
  1074  05F2                     l926:	
  1075                           
  1076                           ;SW.c: 66:     SW_DATA[SW_MINUS].samples[1] = (1);
  1077  05F2  01A4               	clrf	_SW_DATA+4
  1078  05F3  0AA4               	incf	_SW_DATA+4,f
  1079  05F4                     l928:	
  1080                           
  1081                           ;SW.c: 68:     GPIO_Init_Pin(&(TRISB),(2),(1));
  1082  05F4  3086               	movlw	134
  1083  05F5  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1084  05F6  3000               	movlw	0
  1085  05F7  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1086  05F8  3002               	movlw	2
  1087  05F9  00F8               	movwf	??_SW_Init
  1088  05FA  0878               	movf	??_SW_Init,w
  1089  05FB  00F2               	movwf	GPIO_Init_Pin@pin_number
  1090  05FC  01F3               	clrf	GPIO_Init_Pin@dir
  1091  05FD  0AF3               	incf	GPIO_Init_Pin@dir,f
  1092  05FE  120A  118A  2696  120A  118A  	fcall	_GPIO_Init_Pin
  1093  0603                     l930:	
  1094                           
  1095                           ;SW.c: 69:     SW_DATA[SW_SET].state = SW_RELEASED;
  1096  0603  1283               	bcf	3,5	;RP0=0, select bank0
  1097  0604  1303               	bcf	3,6	;RP1=0, select bank0
  1098  0605  01A8               	clrf	_SW_DATA+8
  1099  0606                     l932:	
  1100                           
  1101                           ;SW.c: 70:     SW_DATA[SW_SET].samples[0] = (1);
  1102  0606  01A6               	clrf	_SW_DATA+6
  1103  0607  0AA6               	incf	_SW_DATA+6,f
  1104  0608                     l934:	
  1105                           
  1106                           ;SW.c: 71:     SW_DATA[SW_SET].samples[1] = (1);
  1107  0608  01A7               	clrf	_SW_DATA+7
  1108  0609  0AA7               	incf	_SW_DATA+7,f
  1109  060A                     l61:	
  1110  060A  0008               	return
  1111  060B                     __end_of_SW_Init:	
  1112                           
  1113                           	psect	text4
  1114  0696                     __ptext4:	
  1115 ;; *************** function _GPIO_Init_Pin *****************
  1116 ;; Defined at:
  1117 ;;		line 34 in file "GPIO.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;  DirRegAddres    2    0[COMMON] PTR unsigned char 
  1120 ;;		 -> TRISB(1), 
  1121 ;;  pin_number      1    2[COMMON] unsigned char 
  1122 ;;  dir             1    3[COMMON] unsigned char 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  ret             1    0        unsigned char 
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      unsigned char 
  1127 ;; Registers used:
  1128 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1134 ;;      Params:         4       0       0       0       0
  1135 ;;      Locals:         1       0       0       0       0
  1136 ;;      Temps:          3       0       0       0       0
  1137 ;;      Totals:         8       0       0       0       0
  1138 ;;Total ram usage:        8 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; This function calls:
  1141 ;;		Nothing
  1142 ;; This function is called by:
  1143 ;;		_main
  1144 ;;		_SW_Init
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           
  1149                           ;psect for function _GPIO_Init_Pin
  1150  0696                     _GPIO_Init_Pin:	
  1151  0696                     l862:	
  1152                           ;incstack = 0
  1153                           ; Regs used in _GPIO_Init_Pin: [wreg-fsr0h+status,2+status,0]
  1154                           
  1155  0696                     l864:	
  1156                           
  1157                           ;GPIO.c: 38:     if(*DirRegAddress != (TRISA) && *DirRegAddress != (TRISB) &&
  1158  0696  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1159  0697  0084               	movwf	4
  1160  0698  1783               	bsf	3,7
  1161  0699  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1162  069A  1383               	bcf	3,7
  1163  069B  0800               	movf	0,w
  1164  069C  1683               	bsf	3,5	;RP0=1, select bank1
  1165  069D  1303               	bcf	3,6	;RP1=0, select bank1
  1166  069E  0605               	xorwf	5,w	;volatile
  1167  069F  1903               	skipnz
  1168  06A0  2EA2               	goto	u291
  1169  06A1  2EA3               	goto	u290
  1170  06A2                     u291:	
  1171  06A2  2ED0               	goto	l876
  1172  06A3                     u290:	
  1173  06A3                     l866:	
  1174  06A3  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1175  06A4  0084               	movwf	4
  1176  06A5  1783               	bsf	3,7
  1177  06A6  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1178  06A7  1383               	bcf	3,7
  1179  06A8  0800               	movf	0,w
  1180  06A9  0606               	xorwf	6,w	;volatile
  1181  06AA  1903               	skipnz
  1182  06AB  2EAD               	goto	u301
  1183  06AC  2EAE               	goto	u300
  1184  06AD                     u301:	
  1185  06AD  2ED0               	goto	l876
  1186  06AE                     u300:	
  1187  06AE                     l868:	
  1188  06AE  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1189  06AF  0084               	movwf	4
  1190  06B0  1783               	bsf	3,7
  1191  06B1  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1192  06B2  1383               	bcf	3,7
  1193  06B3  0800               	movf	0,w
  1194  06B4  0607               	xorwf	7,w	;volatile
  1195  06B5  1903               	skipnz
  1196  06B6  2EB8               	goto	u311
  1197  06B7  2EB9               	goto	u310
  1198  06B8                     u311:	
  1199  06B8  2ED0               	goto	l876
  1200  06B9                     u310:	
  1201  06B9                     l870:	
  1202  06B9  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1203  06BA  0084               	movwf	4
  1204  06BB  1783               	bsf	3,7
  1205  06BC  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1206  06BD  1383               	bcf	3,7
  1207  06BE  0800               	movf	0,w
  1208  06BF  0608               	xorwf	8,w	;volatile
  1209  06C0  1903               	skipnz
  1210  06C1  2EC3               	goto	u321
  1211  06C2  2EC4               	goto	u320
  1212  06C3                     u321:	
  1213  06C3  2ED0               	goto	l876
  1214  06C4                     u320:	
  1215  06C4                     l872:	
  1216  06C4  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1217  06C5  0084               	movwf	4
  1218  06C6  1783               	bsf	3,7
  1219  06C7  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1220  06C8  1383               	bcf	3,7
  1221  06C9  0800               	movf	0,w
  1222  06CA  0609               	xorwf	9,w	;volatile
  1223  06CB  1903               	skipnz
  1224  06CC  2ECE               	goto	u331
  1225  06CD  2ECF               	goto	u330
  1226  06CE                     u331:	
  1227  06CE  2ED0               	goto	l876
  1228  06CF                     u330:	
  1229  06CF                     l874:	
  1230                           
  1231                           ;GPIO.c: 44:     }
  1232  06CF  2EF3               	goto	l48
  1233  06D0                     l876:	
  1234                           
  1235                           ;GPIO.c: 46:     {;GPIO.c: 47:         ((*DirRegAddress)=(*DirRegAddress & ~(1<<pin_numb
      +                          er))|(dir<<pin_number));
  1236  06D0  0873               	movf	GPIO_Init_Pin@dir,w
  1237  06D1  00F4               	movwf	??_GPIO_Init_Pin
  1238  06D2  0A72               	incf	GPIO_Init_Pin@pin_number,w
  1239  06D3  2ED6               	goto	u344
  1240  06D4                     u345:	
  1241  06D4  1003               	clrc
  1242  06D5  0DF4               	rlf	??_GPIO_Init_Pin,f
  1243  06D6                     u344:	
  1244  06D6  3EFF               	addlw	-1
  1245  06D7  1D03               	skipz
  1246  06D8  2ED4               	goto	u345
  1247  06D9  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1248  06DA  0084               	movwf	4
  1249  06DB  1783               	bsf	3,7
  1250  06DC  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1251  06DD  1383               	bcf	3,7
  1252  06DE  3001               	movlw	1
  1253  06DF  00F5               	movwf	??_GPIO_Init_Pin+1
  1254  06E0  0A72               	incf	GPIO_Init_Pin@pin_number,w
  1255  06E1  2EE4               	goto	u354
  1256  06E2                     u355:	
  1257  06E2  1003               	clrc
  1258  06E3  0DF5               	rlf	??_GPIO_Init_Pin+1,f
  1259  06E4                     u354:	
  1260  06E4  3EFF               	addlw	-1
  1261  06E5  1D03               	skipz
  1262  06E6  2EE2               	goto	u355
  1263  06E7  0875               	movf	??_GPIO_Init_Pin+1,w
  1264  06E8  3AFF               	xorlw	255
  1265  06E9  0500               	andwf	0,w
  1266  06EA  0474               	iorwf	??_GPIO_Init_Pin,w
  1267  06EB  00F6               	movwf	??_GPIO_Init_Pin+2
  1268  06EC  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1269  06ED  0084               	movwf	4
  1270  06EE  1783               	bsf	3,7
  1271  06EF  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1272  06F0  1383               	bcf	3,7
  1273  06F1  0876               	movf	??_GPIO_Init_Pin+2,w
  1274  06F2  0080               	movwf	0
  1275  06F3                     l48:	
  1276  06F3  0008               	return
  1277  06F4                     __end_of_GPIO_Init_Pin:	
  1278                           
  1279                           	psect	text5
  1280  05A4                     __ptext5:	
  1281 ;; *************** function _SW_GetState *****************
  1282 ;; Defined at:
  1283 ;;		line 74 in file "SW.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  sw              1    wreg     enum E859
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  sw              1    6[COMMON] enum E859
  1288 ;;  ret             1    7[COMMON] unsigned char 
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  1    wreg      unsigned char 
  1291 ;; Registers used:
  1292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1298 ;;      Params:         0       0       0       0       0
  1299 ;;      Locals:         2       0       0       0       0
  1300 ;;      Temps:          2       0       0       0       0
  1301 ;;      Totals:         4       0       0       0       0
  1302 ;;Total ram usage:        4 bytes
  1303 ;; Hardware stack levels used:    1
  1304 ;; Hardware stack levels required when called:    1
  1305 ;; This function calls:
  1306 ;;		___bmul
  1307 ;; This function is called by:
  1308 ;;		_main
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           
  1313                           ;psect for function _SW_GetState
  1314  05A4                     _SW_GetState:	
  1315                           
  1316                           ;incstack = 0
  1317                           ; Regs used in _SW_GetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1318                           ;SW_GetState@sw stored from wreg
  1319  05A4  00F6               	movwf	SW_GetState@sw
  1320  05A5                     l958:	
  1321  05A5                     l960:	
  1322                           
  1323                           ;SW.c: 79:     ret = SW_DATA[sw].state;
  1324  05A5  3003               	movlw	3
  1325  05A6  00F4               	movwf	??_SW_GetState
  1326  05A7  0874               	movf	??_SW_GetState,w
  1327  05A8  00F0               	movwf	___bmul@multiplicand
  1328  05A9  0876               	movf	SW_GetState@sw,w
  1329  05AA  120A  118A  25B8  120A  118A  	fcall	___bmul
  1330  05AF  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1331  05B0  0084               	movwf	4
  1332  05B1  1383               	bcf	3,7	;select IRP bank0
  1333  05B2  0800               	movf	0,w
  1334  05B3  00F5               	movwf	??_SW_GetState+1
  1335  05B4  0875               	movf	??_SW_GetState+1,w
  1336  05B5  00F7               	movwf	SW_GetState@ret
  1337  05B6                     l962:	
  1338                           
  1339                           ;SW.c: 81:     return ret;
  1340  05B6  0877               	movf	SW_GetState@ret,w
  1341  05B7                     l64:	
  1342  05B7  0008               	return
  1343  05B8                     __end_of_SW_GetState:	
  1344                           
  1345                           	psect	text6
  1346  05B8                     __ptext6:	
  1347 ;; *************** function ___bmul *****************
  1348 ;; Defined at:
  1349 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;  multiplier      1    wreg     unsigned char 
  1352 ;;  multiplicand    1    0[COMMON] unsigned char 
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  multiplier      1    3[COMMON] unsigned char 
  1355 ;;  product         1    2[COMMON] unsigned char 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      unsigned char 
  1358 ;; Registers used:
  1359 ;;		wreg, status,2, status,0
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1365 ;;      Params:         1       0       0       0       0
  1366 ;;      Locals:         2       0       0       0       0
  1367 ;;      Temps:          1       0       0       0       0
  1368 ;;      Totals:         4       0       0       0       0
  1369 ;;Total ram usage:        4 bytes
  1370 ;; Hardware stack levels used:    1
  1371 ;; This function calls:
  1372 ;;		Nothing
  1373 ;; This function is called by:
  1374 ;;		_SW_GetState
  1375 ;;		_SW_UpdateState
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           
  1380                           ;psect for function ___bmul
  1381  05B8                     ___bmul:	
  1382                           
  1383                           ;incstack = 0
  1384                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1385                           ;___bmul@multiplier stored from wreg
  1386  05B8  00F3               	movwf	___bmul@multiplier
  1387  05B9                     l848:	
  1388  05B9  01F2               	clrf	___bmul@product
  1389  05BA                     l850:	
  1390  05BA  1C73               	btfss	___bmul@multiplier,0
  1391  05BB  2DBD               	goto	u271
  1392  05BC  2DBE               	goto	u270
  1393  05BD                     u271:	
  1394  05BD  2DC2               	goto	l854
  1395  05BE                     u270:	
  1396  05BE                     l852:	
  1397  05BE  0870               	movf	___bmul@multiplicand,w
  1398  05BF  00F1               	movwf	??___bmul
  1399  05C0  0871               	movf	??___bmul,w
  1400  05C1  07F2               	addwf	___bmul@product,f
  1401  05C2                     l854:	
  1402  05C2  1003               	clrc
  1403  05C3  0DF0               	rlf	___bmul@multiplicand,f
  1404  05C4                     l856:	
  1405  05C4  1003               	clrc
  1406  05C5  0CF3               	rrf	___bmul@multiplier,f
  1407  05C6  0873               	movf	___bmul@multiplier,w
  1408  05C7  1D03               	btfss	3,2
  1409  05C8  2DCA               	goto	u281
  1410  05C9  2DCB               	goto	u280
  1411  05CA                     u281:	
  1412  05CA  2DBA               	goto	l850
  1413  05CB                     u280:	
  1414  05CB                     l858:	
  1415  05CB  0872               	movf	___bmul@product,w
  1416  05CC                     l196:	
  1417  05CC  0008               	return
  1418  05CD                     __end_of___bmul:	
  1419  007E                     btemp	set	126	;btemp
  1420  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      0       9
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    GPIO_Init_Pin@DirRegAddress	PTR unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR1[1]), 


Critical Paths under _main in COMMON

    _main->_SW_Update
    _SW_Update->_SW_UpdateState
    _SW_UpdateState->___bmul
    _SW_Init->_GPIO_Init_Pin
    _SW_GetState->___bmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3524
                                             10 COMMON     3     3      0
                      _GPIO_Init_Pin
                        _SW_GetState
                            _SW_Init
                          _SW_Update
 ---------------------------------------------------------------------------------
 (1) _SW_Update                                            2     2      0     742
                                              8 COMMON     2     2      0
                     _SW_UpdateState
 ---------------------------------------------------------------------------------
 (2) _SW_UpdateState                                       4     4      0     742
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _SW_Init                                              1     1      0    1140
                                              8 COMMON     1     1      0
                      _GPIO_Init_Pin
 ---------------------------------------------------------------------------------
 (2) _GPIO_Init_Pin                                        8     4      4    1140
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _SW_GetState                                          4     4      0     502
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     456
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPIO_Init_Pin
   _SW_GetState
     ___bmul
   _SW_Init
     _GPIO_Init_Pin
   _SW_Update
     _SW_UpdateState
       ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       9       5       11.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      17      12        0.0%
ABS                  0      0      17       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Jan 14 23:10:18 2020

            ___bmul@product 0072                 __CFG_CP$OFF 0000         __end_of_SW_GetState 05B8  
                        l61 060A                          l70 0695                          l64 05B7  
                        l48 06F3                          l84 07EC                         l196 05CC  
                       l900 0793                         l902 07A5                         l920 05DE  
                       l904 07B7                         l850 05BA                         l930 0603  
                       l922 05E0                         l914 05CD                         l852 05BE  
                       l932 0606                         l924 05F0                         l916 05D9  
                       l908 07C9                         l940 0656                         l854 05C2  
                       l870 06B9                         l862 0696                         l934 0608  
                       l926 05F2                         l918 05DC                         l950 0676  
                       l942 0657                         l856 05C4                         l848 05B9  
                       l960 05A5                         l872 06C4                         l864 0696  
                       l928 05F4                         l880 06F5                         l952 067C  
                       l944 0662                         l936 064B                         l858 05CB  
                       l962 05B6                         l874 06CF                         l866 06A3  
                       l890 073B                         l882 06F6                         l954 0682  
                       l946 0668                         l970 062B                         l868 06AE  
                       l876 06D0                         l892 074D                         l884 0708  
                       l956 068F                         l948 066E                         l972 0630  
                       l958 05A5                         l894 075D                         l886 071A  
                       l974 063B                         l966 060B                         l896 076F  
                       l888 0729                         l976 0641                         l968 061E  
                       l898 0781                         l998 07DE                         u300 06AE  
                       u301 06AD                         u310 06B9                         u311 06B8  
                       u320 06C4                         u400 076F                         u321 06C3  
                       u401 076E                         u330 06CF                         u410 0781  
                       u331 06CE                         u411 0780                         u420 07A5  
                       u421 07A4                         u270 05BE                         u430 07B7  
                       u271 05BD                         u431 07B6                         u280 05CB  
                       u344 06D6                         u360 0708                         u440 0655  
                       u281 05CA                         u345 06D4                         u361 0707  
                       u441 0654                         u354 06E4                         u290 06A3  
                       u370 071A                __CFG_CPD$OFF 0000                         u355 06E2  
                       u291 06A2                         u371 0719                         u380 073B  
                       u460 063B                         u381 073A                         u461 063A  
                       u390 074D                         u391 074C                         u455 0685  
                       u477 0624                         fsr0 0004                         indf 0000  
              __CFG_FOSC$HS 0000                __CFG_LVP$OFF 0000                __CFG_WRT$OFF 0000  
                      _main 060B                        btemp 007E                        start 0000  
           __end_of_SW_Init 060B           ___bmul@multiplier 0073               _GPIO_Init_Pin 0696  
                     ?_main 0070               __CFG_WDTE$OFF 0000                       _PORTB 0006  
                     _TRISA 0085                       _TRISB 0086                       _TRISC 0087  
                     _TRISD 0088                       _TRISE 0089              __CFG_BOREN$OFF 0000  
                     status 0003                       wtemp0 007E     __size_of_SW_UpdateState 00F9  
               _SW_GetState 05A4              ?_GPIO_Init_Pin 0070             __initialization 07ED  
              __end_of_main 064B                      ??_main 007A          __size_of_SW_Update 004B  
GPIO_Init_Pin@DirRegAddress 0070                   ??_SW_Init 0078              __CFG_PWRTE$OFF 0000  
                    ___bmul 05B8    SW_Update@SW_Time_Counter 007D                __pdataCOMMON 007D  
   __end_of__initialization 07FC             ??_GPIO_Init_Pin 0074            GPIO_Init_Pin@dir 0073  
         __end_of_SW_Update 0696         ___bmul@multiplicand 0070              __pcstackCOMMON 0070  
             SW_GetState@sw 0076                  __pbssBANK0 0020              _SW_UpdateState 06F4  
                __pmaintext 060B                     ?___bmul 0070      __end_of_SW_UpdateState 07ED  
                   _SW_DATA 0020                     _SW_Init 05CD                ?_SW_GetState 0070  
           __size_of___bmul 0015                     __ptext1 064B                     __ptext2 06F4  
                   __ptext3 05CD                     __ptext4 0696                     __ptext5 05A4  
                   __ptext6 05B8        end_of_initialization 07FC             ?_SW_UpdateState 0070  
   GPIO_Init_Pin@pin_number 0072                   _SW_Update 064B              __end_of___bmul 05CD  
             __pidataCOMMON 05A3         start_initialization 07ED       __end_of_GPIO_Init_Pin 06F4  
            SW_GetState@ret 0077                    ??___bmul 0071        __size_of_SW_GetState 0014  
                ?_SW_Update 0070                   ___latbits 0002                    ?_SW_Init 0070  
          ??_SW_UpdateState 0074            SW_UpdateState@sw 0077                 ??_SW_Update 0078  
          __size_of_SW_Init 003E               __size_of_main 0040               ??_SW_GetState 0074  
    __size_of_GPIO_Init_Pin 005E  
