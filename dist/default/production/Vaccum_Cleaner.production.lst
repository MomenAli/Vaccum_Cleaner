

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jan 15 20:13:07 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	dabs	1,0x7E,2
    32  0000                     
    33                           ; Version 2.10
    34                           ; Generated 31/07/2019 GMT
    35                           ; 
    36                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F877A Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     	;# 
    68  0001                     	;# 
    69  0002                     	;# 
    70  0003                     	;# 
    71  0004                     	;# 
    72  0005                     	;# 
    73  0006                     	;# 
    74  0007                     	;# 
    75  0008                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  000E                     	;# 
    83  000F                     	;# 
    84  0010                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0013                     	;# 
    88  0014                     	;# 
    89  0015                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001D                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  0081                     	;# 
   103  0085                     	;# 
   104  0086                     	;# 
   105  0087                     	;# 
   106  0088                     	;# 
   107  0089                     	;# 
   108  008C                     	;# 
   109  008D                     	;# 
   110  008E                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0094                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  018C                     	;# 
   126  018D                     	;# 
   127  0000                     	;# 
   128  0001                     	;# 
   129  0002                     	;# 
   130  0003                     	;# 
   131  0004                     	;# 
   132  0005                     	;# 
   133  0006                     	;# 
   134  0007                     	;# 
   135  0008                     	;# 
   136  0009                     	;# 
   137  000A                     	;# 
   138  000B                     	;# 
   139  000C                     	;# 
   140  000D                     	;# 
   141  000E                     	;# 
   142  000E                     	;# 
   143  000F                     	;# 
   144  0010                     	;# 
   145  0011                     	;# 
   146  0012                     	;# 
   147  0013                     	;# 
   148  0014                     	;# 
   149  0015                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001B                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  001D                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  0081                     	;# 
   163  0085                     	;# 
   164  0086                     	;# 
   165  0087                     	;# 
   166  0088                     	;# 
   167  0089                     	;# 
   168  008C                     	;# 
   169  008D                     	;# 
   170  008E                     	;# 
   171  0091                     	;# 
   172  0092                     	;# 
   173  0093                     	;# 
   174  0094                     	;# 
   175  0098                     	;# 
   176  0099                     	;# 
   177  009C                     	;# 
   178  009D                     	;# 
   179  009E                     	;# 
   180  009F                     	;# 
   181  010C                     	;# 
   182  010D                     	;# 
   183  010E                     	;# 
   184  010F                     	;# 
   185  018C                     	;# 
   186  018D                     	;# 
   187  0000                     	;# 
   188  0001                     	;# 
   189  0002                     	;# 
   190  0003                     	;# 
   191  0004                     	;# 
   192  0005                     	;# 
   193  0006                     	;# 
   194  0007                     	;# 
   195  0008                     	;# 
   196  0009                     	;# 
   197  000A                     	;# 
   198  000B                     	;# 
   199  000C                     	;# 
   200  000D                     	;# 
   201  000E                     	;# 
   202  000E                     	;# 
   203  000F                     	;# 
   204  0010                     	;# 
   205  0011                     	;# 
   206  0012                     	;# 
   207  0013                     	;# 
   208  0014                     	;# 
   209  0015                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0017                     	;# 
   213  0018                     	;# 
   214  0019                     	;# 
   215  001A                     	;# 
   216  001B                     	;# 
   217  001B                     	;# 
   218  001C                     	;# 
   219  001D                     	;# 
   220  001E                     	;# 
   221  001F                     	;# 
   222  0081                     	;# 
   223  0085                     	;# 
   224  0086                     	;# 
   225  0087                     	;# 
   226  0088                     	;# 
   227  0089                     	;# 
   228  008C                     	;# 
   229  008D                     	;# 
   230  008E                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0093                     	;# 
   234  0094                     	;# 
   235  0098                     	;# 
   236  0099                     	;# 
   237  009C                     	;# 
   238  009D                     	;# 
   239  009E                     	;# 
   240  009F                     	;# 
   241  010C                     	;# 
   242  010D                     	;# 
   243  010E                     	;# 
   244  010F                     	;# 
   245  018C                     	;# 
   246  018D                     	;# 
   247  0000                     	;# 
   248  0001                     	;# 
   249  0002                     	;# 
   250  0003                     	;# 
   251  0004                     	;# 
   252  0005                     	;# 
   253  0006                     	;# 
   254  0007                     	;# 
   255  0008                     	;# 
   256  0009                     	;# 
   257  000A                     	;# 
   258  000B                     	;# 
   259  000C                     	;# 
   260  000D                     	;# 
   261  000E                     	;# 
   262  000E                     	;# 
   263  000F                     	;# 
   264  0010                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0013                     	;# 
   268  0014                     	;# 
   269  0015                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0017                     	;# 
   273  0018                     	;# 
   274  0019                     	;# 
   275  001A                     	;# 
   276  001B                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  001D                     	;# 
   280  001E                     	;# 
   281  001F                     	;# 
   282  0081                     	;# 
   283  0085                     	;# 
   284  0086                     	;# 
   285  0087                     	;# 
   286  0088                     	;# 
   287  0089                     	;# 
   288  008C                     	;# 
   289  008D                     	;# 
   290  008E                     	;# 
   291  0091                     	;# 
   292  0092                     	;# 
   293  0093                     	;# 
   294  0094                     	;# 
   295  0098                     	;# 
   296  0099                     	;# 
   297  009C                     	;# 
   298  009D                     	;# 
   299  009E                     	;# 
   300  009F                     	;# 
   301  010C                     	;# 
   302  010D                     	;# 
   303  010E                     	;# 
   304  010F                     	;# 
   305  018C                     	;# 
   306  018D                     	;# 
   307  0000                     	;# 
   308  0001                     	;# 
   309  0002                     	;# 
   310  0003                     	;# 
   311  0004                     	;# 
   312  0005                     	;# 
   313  0006                     	;# 
   314  0007                     	;# 
   315  0008                     	;# 
   316  0009                     	;# 
   317  000A                     	;# 
   318  000B                     	;# 
   319  000C                     	;# 
   320  000D                     	;# 
   321  000E                     	;# 
   322  000E                     	;# 
   323  000F                     	;# 
   324  0010                     	;# 
   325  0011                     	;# 
   326  0012                     	;# 
   327  0013                     	;# 
   328  0014                     	;# 
   329  0015                     	;# 
   330  0015                     	;# 
   331  0016                     	;# 
   332  0017                     	;# 
   333  0018                     	;# 
   334  0019                     	;# 
   335  001A                     	;# 
   336  001B                     	;# 
   337  001B                     	;# 
   338  001C                     	;# 
   339  001D                     	;# 
   340  001E                     	;# 
   341  001F                     	;# 
   342  0081                     	;# 
   343  0085                     	;# 
   344  0086                     	;# 
   345  0087                     	;# 
   346  0088                     	;# 
   347  0089                     	;# 
   348  008C                     	;# 
   349  008D                     	;# 
   350  008E                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0094                     	;# 
   355  0098                     	;# 
   356  0099                     	;# 
   357  009C                     	;# 
   358  009D                     	;# 
   359  009E                     	;# 
   360  009F                     	;# 
   361  010C                     	;# 
   362  010D                     	;# 
   363  010E                     	;# 
   364  010F                     	;# 
   365  018C                     	;# 
   366  018D                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0008                     	;# 
   376  0009                     	;# 
   377  000A                     	;# 
   378  000B                     	;# 
   379  000C                     	;# 
   380  000D                     	;# 
   381  000E                     	;# 
   382  000E                     	;# 
   383  000F                     	;# 
   384  0010                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0013                     	;# 
   388  0014                     	;# 
   389  0015                     	;# 
   390  0015                     	;# 
   391  0016                     	;# 
   392  0017                     	;# 
   393  0018                     	;# 
   394  0019                     	;# 
   395  001A                     	;# 
   396  001B                     	;# 
   397  001B                     	;# 
   398  001C                     	;# 
   399  001D                     	;# 
   400  001E                     	;# 
   401  001F                     	;# 
   402  0081                     	;# 
   403  0085                     	;# 
   404  0086                     	;# 
   405  0087                     	;# 
   406  0088                     	;# 
   407  0089                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0094                     	;# 
   415  0098                     	;# 
   416  0099                     	;# 
   417  009C                     	;# 
   418  009D                     	;# 
   419  009E                     	;# 
   420  009F                     	;# 
   421  010C                     	;# 
   422  010D                     	;# 
   423  010E                     	;# 
   424  010F                     	;# 
   425  018C                     	;# 
   426  018D                     	;# 
   427  0000                     	;# 
   428  0001                     	;# 
   429  0002                     	;# 
   430  0003                     	;# 
   431  0004                     	;# 
   432  0005                     	;# 
   433  0006                     	;# 
   434  0007                     	;# 
   435  0008                     	;# 
   436  0009                     	;# 
   437  000A                     	;# 
   438  000B                     	;# 
   439  000C                     	;# 
   440  000D                     	;# 
   441  000E                     	;# 
   442  000E                     	;# 
   443  000F                     	;# 
   444  0010                     	;# 
   445  0011                     	;# 
   446  0012                     	;# 
   447  0013                     	;# 
   448  0014                     	;# 
   449  0015                     	;# 
   450  0015                     	;# 
   451  0016                     	;# 
   452  0017                     	;# 
   453  0018                     	;# 
   454  0019                     	;# 
   455  001A                     	;# 
   456  001B                     	;# 
   457  001B                     	;# 
   458  001C                     	;# 
   459  001D                     	;# 
   460  001E                     	;# 
   461  001F                     	;# 
   462  0081                     	;# 
   463  0085                     	;# 
   464  0086                     	;# 
   465  0087                     	;# 
   466  0088                     	;# 
   467  0089                     	;# 
   468  008C                     	;# 
   469  008D                     	;# 
   470  008E                     	;# 
   471  0091                     	;# 
   472  0092                     	;# 
   473  0093                     	;# 
   474  0094                     	;# 
   475  0098                     	;# 
   476  0099                     	;# 
   477  009C                     	;# 
   478  009D                     	;# 
   479  009E                     	;# 
   480  009F                     	;# 
   481  010C                     	;# 
   482  010D                     	;# 
   483  010E                     	;# 
   484  010F                     	;# 
   485  018C                     	;# 
   486  018D                     	;# 
   487                           
   488                           	psect	idataBANK0
   489  02B4                     __pidataBANK0:	
   490                           
   491                           ;initializer for _SSD_LOT_ARR
   492  02B4  3408               	retlw	8
   493  02B5  3448               	retlw	72
   494  02B6  3449               	retlw	73
   495  02B7  3400               	retlw	0
   496                           
   497                           ;initializer for SW_Update@SW_Time_Counter
   498  02B8  340F               	retlw	15
   499  0008                     _PORTD	set	8
   500  0006                     _PORTB	set	6
   501  0089                     _TRISE	set	137
   502  0087                     _TRISC	set	135
   503  0085                     _TRISA	set	133
   504  0088                     _TRISD	set	136
   505  0086                     _TRISB	set	134
   506                           
   507                           ; #config settings
   508  0000                     
   509                           	psect	cinit
   510  07D5                     start_initialization:	
   511  07D5                     __initialization:	
   512                           
   513                           ; Initialize objects allocated to BANK0
   514  07D5  120A  118A  22B4  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   515  07DA  00B3               	movwf	__pdataBANK0& (0+127)
   516  07DB  120A  118A  22B5  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   517  07E0  00B4               	movwf	(__pdataBANK0+1)& (0+127)
   518  07E1  120A  118A  22B6  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   519  07E6  00B5               	movwf	(__pdataBANK0+2)& (0+127)
   520  07E7  120A  118A  22B7  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   521  07EC  00B6               	movwf	(__pdataBANK0+3)& (0+127)
   522  07ED  120A  118A  22B8  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   523  07F2  00B7               	movwf	(__pdataBANK0+4)& (0+127)
   524                           
   525                           ; Clear objects allocated to BANK0
   526  07F3  1383               	bcf	3,7	;select IRP bank0
   527  07F4  3020               	movlw	low __pbssBANK0
   528  07F5  0084               	movwf	4
   529  07F6  3033               	movlw	low (__pbssBANK0+19)
   530  07F7  120A  118A  22B9  120A  118A  	fcall	clear_ram0
   531  07FC                     end_of_initialization:	
   532                           ;End of C runtime variable initialization code
   533                           
   534  07FC                     __end_of__initialization:	
   535  07FC  0183               	clrf	3
   536  07FD  120A  118A  2D93   	ljmp	_main	;jump to C main() function
   537                           
   538                           	psect	bssBANK0
   539  0020                     __pbssBANK0:	
   540  0020                     _SW_DATA:	
   541  0020                     	ds	9
   542  0029                     _Buffer:	
   543  0029                     	ds	4
   544  002D                     _pressure_sw_counter:	
   545  002D                     	ds	2
   546  002F                     VC_Update@VC_TICK_COUNTER:	
   547  002F                     	ds	1
   548  0030                     _motor_speed:	
   549  0030                     	ds	1
   550  0031                     SSD_Update@SSD_Time_Counter:	
   551  0031                     	ds	1
   552  0032                     _currentSSD:	
   553  0032                     	ds	1
   554                           
   555                           	psect	dataBANK0
   556  0033                     __pdataBANK0:	
   557  0033                     _SSD_LOT_ARR:	
   558  0033                     	ds	4
   559  0037                     SW_Update@SW_Time_Counter:	
   560  0037                     	ds	1
   561                           
   562                           	psect	clrtext
   563  02B9                     clear_ram0:	
   564                           ;	Called with FSR containing the base address, and
   565                           ;	W with the last address+1
   566                           
   567  02B9  0064               	clrwdt	;clear the watchdog before getting into this loop
   568  02BA                     clrloop0:	
   569  02BA  0180               	clrf	0	;clear RAM location pointed to by FSR
   570  02BB  0A84               	incf	4,f	;increment pointer
   571  02BC  0604               	xorwf	4,w	;XOR with final address
   572  02BD  1903               	btfsc	3,2	;have we reached the end yet?
   573  02BE  3400               	retlw	0	;all done for this memory range, return
   574  02BF  0604               	xorwf	4,w	;XOR again to restore value
   575  02C0  2ABA               	goto	clrloop0	;do the next byte
   576                           
   577                           	psect	cstackCOMMON
   578  0070                     __pcstackCOMMON:	
   579  0070                     ?_SSD_Init:	
   580  0070                     ?_VC_Init:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_SW_Init:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ?_SW_Update:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ?_VC_Update:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ?_SSD_Set_Symbol:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ?_VC_GetSpeed:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ??_VC_GetSpeed:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ?_SSD_Update:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ?_SW_UpdateState:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ?_LED_SetState:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_SSD_Disable:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ??_SSD_Disable:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ?_SSD_Data_write:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ??_SSD_Data_write:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_SSD_Enable:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ??_SSD_Enable:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_Switch_Event_Handler:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ?_main:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?_GPIO_Init_Port:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ?_GPIO_Init_Pin:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ?_SW_GetState:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ?___bmul:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     LED_SetState@state:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     SSD_Set_Symbol@index:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ___bmul@multiplicand:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     GPIO_Init_Port@DirRegAddress:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     GPIO_Init_Pin@DirRegAddress:	
   659                           ; 2 bytes @ 0x0
   660                           
   661                           
   662                           ; 2 bytes @ 0x0
   663  0070                     	ds	1
   664  0071                     ??_SSD_Set_Symbol:	
   665  0071                     ??_LED_SetState:	
   666                           ; 1 bytes @ 0x1
   667                           
   668  0071                     ??___bmul:	
   669                           ; 1 bytes @ 0x1
   670                           
   671                           
   672                           ; 1 bytes @ 0x1
   673  0071                     	ds	1
   674  0072                     GPIO_Init_Port@dir:	
   675  0072                     GPIO_Init_Pin@pin_number:	
   676                           ; 1 bytes @ 0x2
   677                           
   678  0072                     SSD_Set_Symbol@symbol:	
   679                           ; 1 bytes @ 0x2
   680                           
   681  0072                     SSD_Disable@s:	
   682                           ; 1 bytes @ 0x2
   683                           
   684  0072                     SSD_Enable@s:	
   685                           ; 1 bytes @ 0x2
   686                           
   687  0072                     ___bmul@product:	
   688                           ; 1 bytes @ 0x2
   689                           
   690                           
   691                           ; 1 bytes @ 0x2
   692  0072                     	ds	1
   693  0073                     ??_SSD_Update:	
   694  0073                     ??_GPIO_Init_Port:	
   695                           ; 1 bytes @ 0x3
   696                           
   697  0073                     GPIO_Init_Pin@dir:	
   698                           ; 1 bytes @ 0x3
   699                           
   700  0073                     LED_SetState@led:	
   701                           ; 1 bytes @ 0x3
   702                           
   703  0073                     ___bmul@multiplier:	
   704                           ; 1 bytes @ 0x3
   705                           
   706                           
   707                           ; 1 bytes @ 0x3
   708  0073                     	ds	1
   709  0074                     ??_SW_UpdateState:	
   710  0074                     ??_GPIO_Init_Pin:	
   711                           ; 1 bytes @ 0x4
   712                           
   713  0074                     ??_SW_GetState:	
   714                           ; 1 bytes @ 0x4
   715                           
   716                           
   717                           ; 1 bytes @ 0x4
   718  0074                     	ds	1
   719  0075                     _GPIO_Init_Port$90:	
   720                           
   721                           ; 2 bytes @ 0x5
   722  0075                     	ds	1
   723  0076                     SW_GetState@sw:	
   724                           
   725                           ; 1 bytes @ 0x6
   726  0076                     	ds	1
   727  0077                     GPIO_Init_Pin@ret:	
   728  0077                     SW_GetState@ret:	
   729                           ; 1 bytes @ 0x7
   730                           
   731  0077                     SW_UpdateState@sw:	
   732                           ; 1 bytes @ 0x7
   733                           
   734                           
   735                           ; 1 bytes @ 0x7
   736  0077                     	ds	1
   737  0078                     ??_SSD_Init:	
   738  0078                     ??_SW_Init:	
   739                           ; 1 bytes @ 0x8
   740                           
   741  0078                     ??_SW_Update:	
   742                           ; 1 bytes @ 0x8
   743                           
   744  0078                     ??_Switch_Event_Handler:	
   745                           ; 1 bytes @ 0x8
   746                           
   747  0078                     ?_LED_Init:	
   748                           ; 1 bytes @ 0x8
   749                           
   750  0078                     LED_Init@state:	
   751                           ; 1 bytes @ 0x8
   752                           
   753                           
   754                           ; 1 bytes @ 0x8
   755  0078                     	ds	1
   756  0079                     ??_LED_Init:	
   757                           
   758                           ; 1 bytes @ 0x9
   759  0079                     	ds	1
   760  007A                     ??_VC_Update:	
   761                           
   762                           ; 1 bytes @ 0xA
   763  007A                     	ds	1
   764  007B                     LED_Init@ret:	
   765                           
   766                           ; 1 bytes @ 0xB
   767  007B                     	ds	1
   768  007C                     LED_Init@led:	
   769                           
   770                           ; 1 bytes @ 0xC
   771  007C                     	ds	1
   772  007D                     ??_VC_Init:	
   773                           
   774                           ; 1 bytes @ 0xD
   775  007D                     	ds	1
   776                           
   777                           	psect	cstackBANK0
   778  0038                     __pcstackBANK0:	
   779  0038                     VC_Init@speed:	
   780                           
   781                           ; 1 bytes @ 0x0
   782  0038                     	ds	1
   783  0039                     ??_main:	
   784                           
   785                           ; 1 bytes @ 0x1
   786  0039                     	ds	2
   787                           
   788                           	psect	maintext
   789  0593                     __pmaintext:	
   790 ;;
   791 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   792 ;;
   793 ;; *************** function _main *****************
   794 ;; Defined at:
   795 ;;		line 18 in file "VaccumCleaner.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : B00/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   809 ;;      Params:         0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0
   811 ;;      Temps:          0       2       0       0       0
   812 ;;      Totals:         0       2       0       0       0
   813 ;;Total ram usage:        2 bytes
   814 ;; Hardware stack levels required when called:    4
   815 ;; This function calls:
   816 ;;		_SSD_Init
   817 ;;		_SSD_Set_Symbol
   818 ;;		_SSD_Update
   819 ;;		_SW_Init
   820 ;;		_SW_Update
   821 ;;		_VC_GetSpeed
   822 ;;		_VC_Init
   823 ;;		_VC_Update
   824 ;; This function is called by:
   825 ;;		Startup code after reset
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           
   830                           ;psect for function _main
   831  0593                     _main:	
   832  0593                     l1698:	
   833                           ;incstack = 0
   834                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   835                           
   836                           
   837                           ;VaccumCleaner.c: 20:     SSD_Init();
   838  0593  120A  118A  24D4  120A  118A  	fcall	_SSD_Init
   839                           
   840                           ;VaccumCleaner.c: 21:     VC_Init(MID_SPEED);
   841  0598  305A               	movlw	90
   842  0599  120A  118A  22D7  120A  118A  	fcall	_VC_Init
   843                           
   844                           ;VaccumCleaner.c: 22:     SW_Init();
   845  059E  120A  118A  23FB  120A  118A  	fcall	_SW_Init
   846  05A3                     l1700:	
   847                           
   848                           ;VaccumCleaner.c: 24:     {;VaccumCleaner.c: 25:         _delay((unsigned long)((5)*(800
      +                          0000/4000.0)));
   849  05A3  300D               	movlw	13
   850  05A4  1283               	bcf	3,5	;RP0=0, select bank0
   851  05A5  1303               	bcf	3,6	;RP1=0, select bank0
   852  05A6  00BA               	movwf	??_main+1
   853  05A7  30FB               	movlw	251
   854  05A8  00B9               	movwf	??_main
   855  05A9                     u787:	
   856  05A9  0BB9               	decfsz	??_main,f
   857  05AA  2DA9               	goto	u787
   858  05AB  0BBA               	decfsz	??_main+1,f
   859  05AC  2DA9               	goto	u787
   860  05AD                     l1702:	
   861                           
   862                           ;VaccumCleaner.c: 26:         SW_Update();
   863  05AD  120A  118A  2439  120A  118A  	fcall	_SW_Update
   864  05B2                     l1704:	
   865                           
   866                           ;VaccumCleaner.c: 27:         VC_Update();
   867  05B2  120A  118A  22FE  120A  118A  	fcall	_VC_Update
   868                           
   869                           ;VaccumCleaner.c: 28:         switch(VC_GetSpeed())
   870  05B7  2E0A               	goto	l1714
   871  05B8                     l1706:	
   872                           
   873                           ;VaccumCleaner.c: 31:                 SSD_Set_Symbol(SSD_L_3,SSD_THIRD);
   874  05B8  3002               	movlw	2
   875  05B9  00B9               	movwf	??_main
   876  05BA  0839               	movf	??_main,w
   877  05BB  00F0               	movwf	SSD_Set_Symbol@index
   878  05BC  3002               	movlw	2
   879  05BD  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
   880                           
   881                           ;VaccumCleaner.c: 32:                 SSD_Set_Symbol(SSD_L_2,SSD_SECOND);
   882  05C2  01F0               	clrf	SSD_Set_Symbol@index
   883  05C3  0AF0               	incf	SSD_Set_Symbol@index,f
   884  05C4  3001               	movlw	1
   885  05C5  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
   886                           
   887                           ;VaccumCleaner.c: 33:                 SSD_Set_Symbol(SSD_L_1,SSD_FIRST);
   888  05CA  01F0               	clrf	SSD_Set_Symbol@index
   889  05CB  3000               	movlw	0
   890  05CC  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
   891                           
   892                           ;VaccumCleaner.c: 34:                 break;
   893  05D1  2E23               	goto	l1716
   894  05D2                     l1708:	
   895                           
   896                           ;VaccumCleaner.c: 36:                 SSD_Set_Symbol(SSD_L_1,SSD_FIRST);
   897  05D2  01F0               	clrf	SSD_Set_Symbol@index
   898  05D3  3000               	movlw	0
   899  05D4  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
   900                           
   901                           ;VaccumCleaner.c: 37:                 SSD_Set_Symbol(SSD_L_2,SSD_SECOND);
   902  05D9  01F0               	clrf	SSD_Set_Symbol@index
   903  05DA  0AF0               	incf	SSD_Set_Symbol@index,f
   904  05DB  3001               	movlw	1
   905  05DC  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
   906                           
   907                           ;VaccumCleaner.c: 38:                 SSD_Set_Symbol(SSD_NULL,SSD_THIRD);
   908  05E1  3002               	movlw	2
   909  05E2  1283               	bcf	3,5	;RP0=0, select bank0
   910  05E3  1303               	bcf	3,6	;RP1=0, select bank0
   911  05E4  00B9               	movwf	??_main
   912  05E5  0839               	movf	??_main,w
   913  05E6  00F0               	movwf	SSD_Set_Symbol@index
   914  05E7  3003               	movlw	3
   915  05E8  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
   916                           
   917                           ;VaccumCleaner.c: 39:                 break;
   918  05ED  2E23               	goto	l1716
   919  05EE                     l1710:	
   920                           
   921                           ;VaccumCleaner.c: 41:                 SSD_Set_Symbol(SSD_L_1,SSD_FIRST);
   922  05EE  01F0               	clrf	SSD_Set_Symbol@index
   923  05EF  3000               	movlw	0
   924  05F0  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
   925                           
   926                           ;VaccumCleaner.c: 42:                 SSD_Set_Symbol(SSD_NULL,SSD_SECOND);
   927  05F5  01F0               	clrf	SSD_Set_Symbol@index
   928  05F6  0AF0               	incf	SSD_Set_Symbol@index,f
   929  05F7  3003               	movlw	3
   930  05F8  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
   931                           
   932                           ;VaccumCleaner.c: 43:                 SSD_Set_Symbol(SSD_NULL,SSD_THIRD);
   933  05FD  3002               	movlw	2
   934  05FE  1283               	bcf	3,5	;RP0=0, select bank0
   935  05FF  1303               	bcf	3,6	;RP1=0, select bank0
   936  0600  00B9               	movwf	??_main
   937  0601  0839               	movf	??_main,w
   938  0602  00F0               	movwf	SSD_Set_Symbol@index
   939  0603  3003               	movlw	3
   940  0604  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
   941                           
   942                           ;VaccumCleaner.c: 44:                 break;
   943  0609  2E23               	goto	l1716
   944  060A                     l1714:	
   945  060A  120A  118A  22B0  120A  118A  	fcall	_VC_GetSpeed
   946  060F  1283               	bcf	3,5	;RP0=0, select bank0
   947  0610  1303               	bcf	3,6	;RP1=0, select bank0
   948  0611  00B9               	movwf	??_main
   949  0612  01BA               	clrf	??_main+1
   950                           
   951                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   952                           ; Switch size 1, requested type "simple"
   953                           ; Number of cases is 1, Range of values is 0 to 0
   954                           ; switch strategies available:
   955                           ; Name         Instructions Cycles
   956                           ; simple_byte            4     3 (average)
   957                           ; direct_byte           11     8 (fixed)
   958                           ; jumptable            260     6 (fixed)
   959                           ;	Chosen strategy is simple_byte
   960  0613  083A               	movf	??_main+1,w
   961  0614  3A00               	xorlw	0	; case 0
   962  0615  1903               	skipnz
   963  0616  2E18               	goto	l1908
   964  0617  2E23               	goto	l1716
   965  0618                     l1908:	
   966                           
   967                           ; Switch size 1, requested type "simple"
   968                           ; Number of cases is 3, Range of values is 10 to 140
   969                           ; switch strategies available:
   970                           ; Name         Instructions Cycles
   971                           ; simple_byte           10     6 (average)
   972                           ; jumptable            263     9 (fixed)
   973                           ;	Chosen strategy is simple_byte
   974  0618  0839               	movf	??_main,w
   975  0619  3A0A               	xorlw	10	; case 10
   976  061A  1903               	skipnz
   977  061B  2DB8               	goto	l1706
   978  061C  3A50               	xorlw	80	; case 90
   979  061D  1903               	skipnz
   980  061E  2DD2               	goto	l1708
   981  061F  3AD6               	xorlw	214	; case 140
   982  0620  1903               	skipnz
   983  0621  2DEE               	goto	l1710
   984  0622  2E23               	goto	l1716
   985  0623                     l1716:	
   986                           
   987                           ;VaccumCleaner.c: 46:         SSD_Update();
   988  0623  120A  118A  2399  120A  118A  	fcall	_SSD_Update
   989  0628  2DA3               	goto	l1700
   990  0629  120A  118A  2800   	ljmp	start
   991  062C                     __end_of_main:	
   992                           
   993                           	psect	text1
   994  02FE                     __ptext1:	
   995 ;; *************** function _VC_Update *****************
   996 ;; Defined at:
   997 ;;		line 49 in file "Vacuum.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;		None
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;		None
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1011 ;;      Params:         0       0       0       0       0
  1012 ;;      Locals:         0       0       0       0       0
  1013 ;;      Temps:          1       0       0       0       0
  1014 ;;      Totals:         1       0       0       0       0
  1015 ;;Total ram usage:        1 bytes
  1016 ;; Hardware stack levels used:    1
  1017 ;; Hardware stack levels required when called:    3
  1018 ;; This function calls:
  1019 ;;		_Switch_Event_Handler
  1020 ;; This function is called by:
  1021 ;;		_main
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           
  1026                           ;psect for function _VC_Update
  1027  02FE                     _VC_Update:	
  1028  02FE                     l1668:	
  1029                           ;incstack = 0
  1030                           ; Regs used in _VC_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1031                           
  1032                           
  1033                           ;Vacuum.c: 51:     static uint8 VC_TICK_COUNTER = 0;;Vacuum.c: 52:     VC_TICK_COUNTER +
      +                          = (5);
  1034  02FE  3005               	movlw	5
  1035  02FF  00FA               	movwf	??_VC_Update
  1036  0300  087A               	movf	??_VC_Update,w
  1037  0301  1283               	bcf	3,5	;RP0=0, select bank0
  1038  0302  1303               	bcf	3,6	;RP1=0, select bank0
  1039  0303  07AF               	addwf	VC_Update@VC_TICK_COUNTER,f
  1040                           
  1041                           ;Vacuum.c: 54:     if(VC_TICK_COUNTER != (20))
  1042  0304  3014               	movlw	20
  1043  0305  062F               	xorwf	VC_Update@VC_TICK_COUNTER,w
  1044  0306  1903               	btfsc	3,2
  1045  0307  2B09               	goto	u741
  1046  0308  2B0A               	goto	u740
  1047  0309                     u741:	
  1048  0309  2B0B               	goto	l1672
  1049  030A                     u740:	
  1050  030A  2B11               	goto	l213
  1051  030B                     l1672:	
  1052                           
  1053                           ;Vacuum.c: 56:     VC_TICK_COUNTER = 0;
  1054  030B  01AF               	clrf	VC_Update@VC_TICK_COUNTER
  1055  030C                     l1674:	
  1056                           
  1057                           ;Vacuum.c: 67:     Switch_Event_Handler();
  1058  030C  120A  118A  262C  120A  118A  	fcall	_Switch_Event_Handler
  1059  0311                     l213:	
  1060  0311  0008               	return
  1061  0312                     __end_of_VC_Update:	
  1062                           
  1063                           	psect	text2
  1064  062C                     __ptext2:	
  1065 ;; *************** function _Switch_Event_Handler *****************
  1066 ;; Defined at:
  1067 ;;		line 74 in file "Vacuum.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;		None
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;		None
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1081 ;;      Params:         0       0       0       0       0
  1082 ;;      Locals:         0       0       0       0       0
  1083 ;;      Temps:          2       0       0       0       0
  1084 ;;      Totals:         2       0       0       0       0
  1085 ;;Total ram usage:        2 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    2
  1088 ;; This function calls:
  1089 ;;		_LED_SetState
  1090 ;;		_SW_GetState
  1091 ;; This function is called by:
  1092 ;;		_VC_Update
  1093 ;; This function uses a non-reentrant model
  1094 ;;
  1095                           
  1096                           
  1097                           ;psect for function _Switch_Event_Handler
  1098  062C                     _Switch_Event_Handler:	
  1099  062C                     l1538:	
  1100                           ;incstack = 0
  1101                           ; Regs used in _Switch_Event_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1102                           
  1103                           
  1104                           ;Vacuum.c: 80:     if(SW_GetState(SW_PLUS) == SW_PRE_PRESSED && motor_speed != HIGH_SPEE
      +                          D)
  1105  062C  3000               	movlw	0
  1106  062D  120A  118A  22EA  120A  118A  	fcall	_SW_GetState
  1107  0632  3A01               	xorlw	1
  1108  0633  1D03               	skipz
  1109  0634  2E36               	goto	u651
  1110  0635  2E37               	goto	u650
  1111  0636                     u651:	
  1112  0636  2E5A               	goto	l1552
  1113  0637                     u650:	
  1114  0637                     l1540:	
  1115  0637  300A               	movlw	10
  1116  0638  1283               	bcf	3,5	;RP0=0, select bank0
  1117  0639  1303               	bcf	3,6	;RP1=0, select bank0
  1118  063A  0630               	xorwf	_motor_speed,w
  1119  063B  1903               	btfsc	3,2
  1120  063C  2E3E               	goto	u661
  1121  063D  2E3F               	goto	u660
  1122  063E                     u661:	
  1123  063E  2E5A               	goto	l1552
  1124  063F                     u660:	
  1125  063F  2E4A               	goto	l1550
  1126  0640                     l1544:	
  1127                           
  1128                           ;Vacuum.c: 86:                 motor_speed = MID_SPEED;
  1129  0640  305A               	movlw	90
  1130  0641  00F8               	movwf	??_Switch_Event_Handler
  1131  0642  0878               	movf	??_Switch_Event_Handler,w
  1132  0643  00B0               	movwf	_motor_speed
  1133                           
  1134                           ;Vacuum.c: 87:                 break;
  1135  0644  2E5A               	goto	l1552
  1136  0645                     l1546:	
  1137                           
  1138                           ;Vacuum.c: 89:                 motor_speed = HIGH_SPEED;
  1139  0645  300A               	movlw	10
  1140  0646  00F8               	movwf	??_Switch_Event_Handler
  1141  0647  0878               	movf	??_Switch_Event_Handler,w
  1142  0648  00B0               	movwf	_motor_speed
  1143                           
  1144                           ;Vacuum.c: 90:                 break;
  1145  0649  2E5A               	goto	l1552
  1146  064A                     l1550:	
  1147  064A  0830               	movf	_motor_speed,w
  1148  064B  00F8               	movwf	??_Switch_Event_Handler
  1149  064C  01F9               	clrf	??_Switch_Event_Handler+1
  1150                           
  1151                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1152                           ; Switch size 1, requested type "simple"
  1153                           ; Number of cases is 1, Range of values is 0 to 0
  1154                           ; switch strategies available:
  1155                           ; Name         Instructions Cycles
  1156                           ; simple_byte            4     3 (average)
  1157                           ; direct_byte           11     8 (fixed)
  1158                           ; jumptable            260     6 (fixed)
  1159                           ;	Chosen strategy is simple_byte
  1160  064D  0879               	movf	??_Switch_Event_Handler+1,w
  1161  064E  3A00               	xorlw	0	; case 0
  1162  064F  1903               	skipnz
  1163  0650  2E52               	goto	l1910
  1164  0651  2E5A               	goto	l1552
  1165  0652                     l1910:	
  1166                           
  1167                           ; Switch size 1, requested type "simple"
  1168                           ; Number of cases is 2, Range of values is 90 to 140
  1169                           ; switch strategies available:
  1170                           ; Name         Instructions Cycles
  1171                           ; simple_byte            7     4 (average)
  1172                           ; direct_byte          164    11 (fixed)
  1173                           ; jumptable            263     9 (fixed)
  1174                           ;	Chosen strategy is simple_byte
  1175  0652  0878               	movf	??_Switch_Event_Handler,w
  1176  0653  3A5A               	xorlw	90	; case 90
  1177  0654  1903               	skipnz
  1178  0655  2E45               	goto	l1546
  1179  0656  3AD6               	xorlw	214	; case 140
  1180  0657  1903               	skipnz
  1181  0658  2E40               	goto	l1544
  1182  0659  2E5A               	goto	l1552
  1183  065A                     l1552:	
  1184                           
  1185                           ;Vacuum.c: 101:     if((SW_GetState(SW_MINUS) == SW_PRE_PRESSED) && (motor_speed != LOW_
      +                          SPEED))
  1186  065A  3001               	movlw	1
  1187  065B  120A  118A  22EA  120A  118A  	fcall	_SW_GetState
  1188  0660  3A01               	xorlw	1
  1189  0661  1D03               	skipz
  1190  0662  2E64               	goto	u671
  1191  0663  2E65               	goto	u670
  1192  0664                     u671:	
  1193  0664  2E88               	goto	l1566
  1194  0665                     u670:	
  1195  0665                     l1554:	
  1196  0665  308C               	movlw	140
  1197  0666  1283               	bcf	3,5	;RP0=0, select bank0
  1198  0667  1303               	bcf	3,6	;RP1=0, select bank0
  1199  0668  0630               	xorwf	_motor_speed,w
  1200  0669  1903               	btfsc	3,2
  1201  066A  2E6C               	goto	u681
  1202  066B  2E6D               	goto	u680
  1203  066C                     u681:	
  1204  066C  2E88               	goto	l1566
  1205  066D                     u680:	
  1206  066D  2E78               	goto	l1564
  1207  066E                     l1558:	
  1208                           
  1209                           ;Vacuum.c: 108:                 motor_speed = LOW_SPEED;
  1210  066E  308C               	movlw	140
  1211  066F  00F8               	movwf	??_Switch_Event_Handler
  1212  0670  0878               	movf	??_Switch_Event_Handler,w
  1213  0671  00B0               	movwf	_motor_speed
  1214                           
  1215                           ;Vacuum.c: 109:                 break;
  1216  0672  2E88               	goto	l1566
  1217  0673                     l1560:	
  1218                           
  1219                           ;Vacuum.c: 111:                 motor_speed = MID_SPEED;
  1220  0673  305A               	movlw	90
  1221  0674  00F8               	movwf	??_Switch_Event_Handler
  1222  0675  0878               	movf	??_Switch_Event_Handler,w
  1223  0676  00B0               	movwf	_motor_speed
  1224                           
  1225                           ;Vacuum.c: 112:                 break;
  1226  0677  2E88               	goto	l1566
  1227  0678                     l1564:	
  1228  0678  0830               	movf	_motor_speed,w
  1229  0679  00F8               	movwf	??_Switch_Event_Handler
  1230  067A  01F9               	clrf	??_Switch_Event_Handler+1
  1231                           
  1232                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1233                           ; Switch size 1, requested type "simple"
  1234                           ; Number of cases is 1, Range of values is 0 to 0
  1235                           ; switch strategies available:
  1236                           ; Name         Instructions Cycles
  1237                           ; simple_byte            4     3 (average)
  1238                           ; direct_byte           11     8 (fixed)
  1239                           ; jumptable            260     6 (fixed)
  1240                           ;	Chosen strategy is simple_byte
  1241  067B  0879               	movf	??_Switch_Event_Handler+1,w
  1242  067C  3A00               	xorlw	0	; case 0
  1243  067D  1903               	skipnz
  1244  067E  2E80               	goto	l1912
  1245  067F  2E88               	goto	l1566
  1246  0680                     l1912:	
  1247                           
  1248                           ; Switch size 1, requested type "simple"
  1249                           ; Number of cases is 2, Range of values is 10 to 90
  1250                           ; switch strategies available:
  1251                           ; Name         Instructions Cycles
  1252                           ; simple_byte            7     4 (average)
  1253                           ; direct_byte          254    11 (fixed)
  1254                           ; jumptable            263     9 (fixed)
  1255                           ;	Chosen strategy is simple_byte
  1256  0680  0878               	movf	??_Switch_Event_Handler,w
  1257  0681  3A0A               	xorlw	10	; case 10
  1258  0682  1903               	skipnz
  1259  0683  2E73               	goto	l1560
  1260  0684  3A50               	xorlw	80	; case 90
  1261  0685  1903               	skipnz
  1262  0686  2E6E               	goto	l1558
  1263  0687  2E88               	goto	l1566
  1264  0688                     l1566:	
  1265                           
  1266                           ;Vacuum.c: 122:     if(SW_GetState(SW_PRESSURE) == SW_PRESSED && (motor_speed != LOW_SPE
      +                          ED))
  1267  0688  3002               	movlw	2
  1268  0689  120A  118A  22EA  120A  118A  	fcall	_SW_GetState
  1269  068E  3A02               	xorlw	2
  1270  068F  1D03               	skipz
  1271  0690  2E92               	goto	u691
  1272  0691  2E93               	goto	u690
  1273  0692                     u691:	
  1274  0692  2ED0               	goto	l1588
  1275  0693                     u690:	
  1276  0693                     l1568:	
  1277  0693  308C               	movlw	140
  1278  0694  1283               	bcf	3,5	;RP0=0, select bank0
  1279  0695  1303               	bcf	3,6	;RP1=0, select bank0
  1280  0696  0630               	xorwf	_motor_speed,w
  1281  0697  1903               	btfsc	3,2
  1282  0698  2E9A               	goto	u701
  1283  0699  2E9B               	goto	u700
  1284  069A                     u701:	
  1285  069A  2ED0               	goto	l1588
  1286  069B                     u700:	
  1287  069B                     l1570:	
  1288                           
  1289                           ;Vacuum.c: 123:     {;Vacuum.c: 125:         pressure_sw_counter += (20);
  1290  069B  3014               	movlw	20
  1291  069C  07AD               	addwf	_pressure_sw_counter,f
  1292  069D  1803               	skipnc
  1293  069E  0AAE               	incf	_pressure_sw_counter+1,f
  1294  069F  3000               	movlw	0
  1295  06A0  07AE               	addwf	_pressure_sw_counter+1,f
  1296  06A1                     l1572:	
  1297                           
  1298                           ;Vacuum.c: 129:         if( pressure_sw_counter == (30000) )
  1299  06A1  3030               	movlw	48
  1300  06A2  062D               	xorwf	_pressure_sw_counter,w
  1301  06A3  3075               	movlw	117
  1302  06A4  1903               	skipnz
  1303  06A5  062E               	xorwf	_pressure_sw_counter+1,w
  1304  06A6  1D03               	btfss	3,2
  1305  06A7  2EA9               	goto	u711
  1306  06A8  2EAA               	goto	u710
  1307  06A9                     u711:	
  1308  06A9  2EC7               	goto	l1586
  1309  06AA                     u710:	
  1310  06AA  2EB5               	goto	l1582
  1311  06AB                     l1576:	
  1312                           
  1313                           ;Vacuum.c: 136:                     motor_speed = LOW_SPEED;
  1314  06AB  308C               	movlw	140
  1315  06AC  00F8               	movwf	??_Switch_Event_Handler
  1316  06AD  0878               	movf	??_Switch_Event_Handler,w
  1317  06AE  00B0               	movwf	_motor_speed
  1318                           
  1319                           ;Vacuum.c: 137:                     break;
  1320  06AF  2EC5               	goto	l1584
  1321  06B0                     l1578:	
  1322                           
  1323                           ;Vacuum.c: 139:                     motor_speed = MID_SPEED;
  1324  06B0  305A               	movlw	90
  1325  06B1  00F8               	movwf	??_Switch_Event_Handler
  1326  06B2  0878               	movf	??_Switch_Event_Handler,w
  1327  06B3  00B0               	movwf	_motor_speed
  1328                           
  1329                           ;Vacuum.c: 140:                     break;
  1330  06B4  2EC5               	goto	l1584
  1331  06B5                     l1582:	
  1332  06B5  0830               	movf	_motor_speed,w
  1333  06B6  00F8               	movwf	??_Switch_Event_Handler
  1334  06B7  01F9               	clrf	??_Switch_Event_Handler+1
  1335                           
  1336                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1337                           ; Switch size 1, requested type "simple"
  1338                           ; Number of cases is 1, Range of values is 0 to 0
  1339                           ; switch strategies available:
  1340                           ; Name         Instructions Cycles
  1341                           ; simple_byte            4     3 (average)
  1342                           ; direct_byte           11     8 (fixed)
  1343                           ; jumptable            260     6 (fixed)
  1344                           ;	Chosen strategy is simple_byte
  1345  06B8  0879               	movf	??_Switch_Event_Handler+1,w
  1346  06B9  3A00               	xorlw	0	; case 0
  1347  06BA  1903               	skipnz
  1348  06BB  2EBD               	goto	l1914
  1349  06BC  2EC5               	goto	l1584
  1350  06BD                     l1914:	
  1351                           
  1352                           ; Switch size 1, requested type "simple"
  1353                           ; Number of cases is 2, Range of values is 10 to 90
  1354                           ; switch strategies available:
  1355                           ; Name         Instructions Cycles
  1356                           ; simple_byte            7     4 (average)
  1357                           ; direct_byte          254    11 (fixed)
  1358                           ; jumptable            263     9 (fixed)
  1359                           ;	Chosen strategy is simple_byte
  1360  06BD  0878               	movf	??_Switch_Event_Handler,w
  1361  06BE  3A0A               	xorlw	10	; case 10
  1362  06BF  1903               	skipnz
  1363  06C0  2EB0               	goto	l1578
  1364  06C1  3A50               	xorlw	80	; case 90
  1365  06C2  1903               	skipnz
  1366  06C3  2EAB               	goto	l1576
  1367  06C4  2EC5               	goto	l1584
  1368  06C5                     l1584:	
  1369                           
  1370                           ;Vacuum.c: 146:             pressure_sw_counter = 0;
  1371  06C5  01AD               	clrf	_pressure_sw_counter
  1372  06C6  01AE               	clrf	_pressure_sw_counter+1
  1373  06C7                     l1586:	
  1374                           
  1375                           ;Vacuum.c: 149:         LED_SetState(LED_ALARM,LED_ON);
  1376  06C7  01F0               	clrf	LED_SetState@state
  1377  06C8  0AF0               	incf	LED_SetState@state,f
  1378  06C9  3000               	movlw	0
  1379  06CA  120A  118A  2327  120A  118A  	fcall	_LED_SetState
  1380                           
  1381                           ;Vacuum.c: 150:     }
  1382  06CF  2EDB               	goto	l236
  1383  06D0                     l1588:	
  1384                           
  1385                           ;Vacuum.c: 152:     {;Vacuum.c: 153:         pressure_sw_counter = 0;
  1386  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  1387  06D1  1303               	bcf	3,6	;RP1=0, select bank0
  1388  06D2  01AD               	clrf	_pressure_sw_counter
  1389  06D3  01AE               	clrf	_pressure_sw_counter+1
  1390  06D4                     l1590:	
  1391                           
  1392                           ;Vacuum.c: 155:         LED_SetState(LED_ALARM,LED_OFF);
  1393  06D4  01F0               	clrf	LED_SetState@state
  1394  06D5  3000               	movlw	0
  1395  06D6  120A  118A  2327  120A  118A  	fcall	_LED_SetState
  1396  06DB                     l236:	
  1397  06DB  0008               	return
  1398  06DC                     __end_of_Switch_Event_Handler:	
  1399                           
  1400                           	psect	text3
  1401  02EA                     __ptext3:	
  1402 ;; *************** function _SW_GetState *****************
  1403 ;; Defined at:
  1404 ;;		line 74 in file "SW.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  sw              1    wreg     enum E859
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  sw              1    6[COMMON] enum E859
  1409 ;;  ret             1    7[COMMON] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      unsigned char 
  1412 ;; Registers used:
  1413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1419 ;;      Params:         0       0       0       0       0
  1420 ;;      Locals:         2       0       0       0       0
  1421 ;;      Temps:          2       0       0       0       0
  1422 ;;      Totals:         4       0       0       0       0
  1423 ;;Total ram usage:        4 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    1
  1426 ;; This function calls:
  1427 ;;		___bmul
  1428 ;; This function is called by:
  1429 ;;		_Switch_Event_Handler
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           
  1434                           ;psect for function _SW_GetState
  1435  02EA                     _SW_GetState:	
  1436                           
  1437                           ;incstack = 0
  1438                           ; Regs used in _SW_GetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1439                           ;SW_GetState@sw stored from wreg
  1440  02EA  00F6               	movwf	SW_GetState@sw
  1441  02EB                     l1410:	
  1442  02EB                     l1412:	
  1443                           
  1444                           ;SW.c: 79:     ret = SW_DATA[sw].state;
  1445  02EB  3003               	movlw	3
  1446  02EC  00F4               	movwf	??_SW_GetState
  1447  02ED  0874               	movf	??_SW_GetState,w
  1448  02EE  00F0               	movwf	___bmul@multiplicand
  1449  02EF  0876               	movf	SW_GetState@sw,w
  1450  02F0  120A  118A  2312  120A  118A  	fcall	___bmul
  1451  02F5  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1452  02F6  0084               	movwf	4
  1453  02F7  1383               	bcf	3,7	;select IRP bank0
  1454  02F8  0800               	movf	0,w
  1455  02F9  00F5               	movwf	??_SW_GetState+1
  1456  02FA  0875               	movf	??_SW_GetState+1,w
  1457  02FB  00F7               	movwf	SW_GetState@ret
  1458  02FC                     l1414:	
  1459                           
  1460                           ;SW.c: 81:     return ret;
  1461  02FC  0877               	movf	SW_GetState@ret,w
  1462  02FD                     l71:	
  1463  02FD  0008               	return
  1464  02FE                     __end_of_SW_GetState:	
  1465                           
  1466                           	psect	text4
  1467  02D7                     __ptext4:	
  1468 ;; *************** function _VC_Init *****************
  1469 ;; Defined at:
  1470 ;;		line 32 in file "Vacuum.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  speed           1    wreg     enum E850
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  speed           1    0[BANK0 ] enum E850
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      void 
  1477 ;; Registers used:
  1478 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1484 ;;      Params:         0       0       0       0       0
  1485 ;;      Locals:         0       1       0       0       0
  1486 ;;      Temps:          1       0       0       0       0
  1487 ;;      Totals:         1       1       0       0       0
  1488 ;;Total ram usage:        2 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:    2
  1491 ;; This function calls:
  1492 ;;		_LED_Init
  1493 ;; This function is called by:
  1494 ;;		_main
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           
  1499                           ;psect for function _VC_Init
  1500  02D7                     _VC_Init:	
  1501                           
  1502                           ;incstack = 0
  1503                           ; Regs used in _VC_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1504                           ;VC_Init@speed stored from wreg
  1505  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  1506  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  1507  02D9  00B8               	movwf	VC_Init@speed
  1508  02DA                     l1618:	
  1509                           
  1510                           ;Vacuum.c: 32: void VC_Init(MOTOR_SPEET_t speed);Vacuum.c: 33: {;Vacuum.c: 35:     motor
      +                          _speed = speed;
  1511  02DA  0838               	movf	VC_Init@speed,w
  1512  02DB  00FD               	movwf	??_VC_Init
  1513  02DC  087D               	movf	??_VC_Init,w
  1514  02DD  00B0               	movwf	_motor_speed
  1515  02DE                     l1620:	
  1516                           
  1517                           ;Vacuum.c: 40:     LED_Init(LED_ALARM,LED_OFF);
  1518  02DE  01F8               	clrf	LED_Init@state
  1519  02DF  3000               	movlw	0
  1520  02E0  120A  118A  23C8  120A  118A  	fcall	_LED_Init
  1521  02E5                     l1622:	
  1522                           
  1523                           ;Vacuum.c: 42:     pressure_sw_counter = 0;
  1524  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  1525  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  1526  02E7  01AD               	clrf	_pressure_sw_counter
  1527  02E8  01AE               	clrf	_pressure_sw_counter+1
  1528  02E9                     l204:	
  1529  02E9  0008               	return
  1530  02EA                     __end_of_VC_Init:	
  1531                           
  1532                           	psect	text5
  1533  03C8                     __ptext5:	
  1534 ;; *************** function _LED_Init *****************
  1535 ;; Defined at:
  1536 ;;		line 14 in file "Led.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;  led             1    wreg     enum E859
  1539 ;;  state           1    8[COMMON] enum E862
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  led             1   12[COMMON] enum E859
  1542 ;;  ret             1   11[COMMON] unsigned char 
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      unsigned char 
  1545 ;; Registers used:
  1546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1552 ;;      Params:         1       0       0       0       0
  1553 ;;      Locals:         2       0       0       0       0
  1554 ;;      Temps:          2       0       0       0       0
  1555 ;;      Totals:         5       0       0       0       0
  1556 ;;Total ram usage:        5 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    1
  1559 ;; This function calls:
  1560 ;;		_GPIO_Init_Pin
  1561 ;;		_LED_SetState
  1562 ;; This function is called by:
  1563 ;;		_VC_Init
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           
  1568                           ;psect for function _LED_Init
  1569  03C8                     _LED_Init:	
  1570                           
  1571                           ;incstack = 0
  1572                           ; Regs used in _LED_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1573                           ;LED_Init@led stored from wreg
  1574  03C8  00FC               	movwf	LED_Init@led
  1575  03C9                     l1490:	
  1576                           
  1577                           ;Led.c: 21:     switch(led)
  1578  03C9  2BDE               	goto	l1496
  1579  03CA                     l1492:	
  1580                           
  1581                           ;Led.c: 24:             ret = GPIO_Init_Pin(&(TRISB),(3),(0));
  1582  03CA  3086               	movlw	134
  1583  03CB  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1584  03CC  3000               	movlw	0
  1585  03CD  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1586  03CE  3003               	movlw	3
  1587  03CF  00F9               	movwf	??_LED_Init
  1588  03D0  0879               	movf	??_LED_Init,w
  1589  03D1  00F2               	movwf	GPIO_Init_Pin@pin_number
  1590  03D2  01F3               	clrf	GPIO_Init_Pin@dir
  1591  03D3  120A  118A  2531  120A  118A  	fcall	_GPIO_Init_Pin
  1592  03D8  00FA               	movwf	??_LED_Init+1
  1593  03D9  087A               	movf	??_LED_Init+1,w
  1594  03DA  00FB               	movwf	LED_Init@ret
  1595                           
  1596                           ;Led.c: 25:             break;
  1597  03DB  2BEB               	goto	l1498
  1598  03DC                     l1494:	
  1599  03DC  01FB               	clrf	LED_Init@ret
  1600                           
  1601                           ;Led.c: 27:     }
  1602  03DD  2BEB               	goto	l1498
  1603  03DE                     l1496:	
  1604  03DE  087C               	movf	LED_Init@led,w
  1605  03DF  00F9               	movwf	??_LED_Init
  1606  03E0  01FA               	clrf	??_LED_Init+1
  1607                           
  1608                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1609                           ; Switch size 1, requested type "simple"
  1610                           ; Number of cases is 1, Range of values is 0 to 0
  1611                           ; switch strategies available:
  1612                           ; Name         Instructions Cycles
  1613                           ; simple_byte            4     3 (average)
  1614                           ; direct_byte           11     8 (fixed)
  1615                           ; jumptable            260     6 (fixed)
  1616                           ;	Chosen strategy is simple_byte
  1617  03E1  087A               	movf	??_LED_Init+1,w
  1618  03E2  3A00               	xorlw	0	; case 0
  1619  03E3  1903               	skipnz
  1620  03E4  2BE6               	goto	l1916
  1621  03E5  2BDC               	goto	l1494
  1622  03E6                     l1916:	
  1623                           
  1624                           ; Switch size 1, requested type "simple"
  1625                           ; Number of cases is 1, Range of values is 0 to 0
  1626                           ; switch strategies available:
  1627                           ; Name         Instructions Cycles
  1628                           ; simple_byte            4     3 (average)
  1629                           ; direct_byte           11     8 (fixed)
  1630                           ; jumptable            260     6 (fixed)
  1631                           ;	Chosen strategy is simple_byte
  1632  03E6  0879               	movf	??_LED_Init,w
  1633  03E7  3A00               	xorlw	0	; case 0
  1634  03E8  1903               	skipnz
  1635  03E9  2BCA               	goto	l1492
  1636  03EA  2BDC               	goto	l1494
  1637  03EB                     l1498:	
  1638                           
  1639                           ;Led.c: 28:     if(ret != 0)
  1640  03EB  087B               	movf	LED_Init@ret,w
  1641  03EC  1903               	btfsc	3,2
  1642  03ED  2BEF               	goto	u641
  1643  03EE  2BF0               	goto	u640
  1644  03EF                     u641:	
  1645  03EF  2BFA               	goto	l107
  1646  03F0                     u640:	
  1647  03F0                     l1500:	
  1648                           
  1649                           ;Led.c: 29:     {;Led.c: 30:         LED_SetState(led,state);
  1650  03F0  0878               	movf	LED_Init@state,w
  1651  03F1  00F9               	movwf	??_LED_Init
  1652  03F2  0879               	movf	??_LED_Init,w
  1653  03F3  00F0               	movwf	LED_SetState@state
  1654  03F4  087C               	movf	LED_Init@led,w
  1655  03F5  120A  118A  2327  120A  118A  	fcall	_LED_SetState
  1656  03FA                     l107:	
  1657  03FA  0008               	return
  1658  03FB                     __end_of_LED_Init:	
  1659                           
  1660                           	psect	text6
  1661  0327                     __ptext6:	
  1662 ;; *************** function _LED_SetState *****************
  1663 ;; Defined at:
  1664 ;;		line 50 in file "Led.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;  led             1    wreg     enum E859
  1667 ;;  state           1    0[COMMON] enum E862
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  led             1    3[COMMON] enum E859
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1679 ;;      Params:         1       0       0       0       0
  1680 ;;      Locals:         1       0       0       0       0
  1681 ;;      Temps:          2       0       0       0       0
  1682 ;;      Totals:         4       0       0       0       0
  1683 ;;Total ram usage:        4 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_LED_Init
  1689 ;;		_Switch_Event_Handler
  1690 ;;		_LED_Toggle
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           
  1695                           ;psect for function _LED_SetState
  1696  0327                     _LED_SetState:	
  1697                           
  1698                           ;incstack = 0
  1699                           ; Regs used in _LED_SetState: [wreg-fsr0h+status,2+status,0]
  1700                           ;LED_SetState@led stored from wreg
  1701  0327  00F3               	movwf	LED_SetState@led
  1702  0328                     l1418:	
  1703                           
  1704                           ;Led.c: 50: void LED_SetState(LED_t led, LEDState_t state);Led.c: 51: {;Led.c: 53:     s
      +                          witch(led)
  1705  0328  2B38               	goto	l1424
  1706  0329                     l1420:	
  1707                           
  1708                           ;Led.c: 56:             (((PORTB))=((PORTB) & ~(1<<(3)))|(state<<(3)));
  1709  0329  0870               	movf	LED_SetState@state,w
  1710  032A  00F1               	movwf	??_LED_SetState
  1711  032B  3003               	movlw	3
  1712  032C                     u495:	
  1713  032C  1003               	clrc
  1714  032D  0DF1               	rlf	??_LED_SetState,f
  1715  032E  3EFF               	addlw	-1
  1716  032F  1D03               	skipz
  1717  0330  2B2C               	goto	u495
  1718  0331  1283               	bcf	3,5	;RP0=0, select bank0
  1719  0332  1303               	bcf	3,6	;RP1=0, select bank0
  1720  0333  0806               	movf	6,w	;volatile
  1721  0334  39F7               	andlw	247
  1722  0335  0471               	iorwf	??_LED_SetState,w
  1723  0336  0086               	movwf	6	;volatile
  1724                           
  1725                           ;Led.c: 57:             break;
  1726  0337  2B45               	goto	l121
  1727  0338                     l1424:	
  1728  0338  0873               	movf	LED_SetState@led,w
  1729  0339  00F1               	movwf	??_LED_SetState
  1730  033A  01F2               	clrf	??_LED_SetState+1
  1731                           
  1732                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1733                           ; Switch size 1, requested type "simple"
  1734                           ; Number of cases is 1, Range of values is 0 to 0
  1735                           ; switch strategies available:
  1736                           ; Name         Instructions Cycles
  1737                           ; simple_byte            4     3 (average)
  1738                           ; direct_byte           11     8 (fixed)
  1739                           ; jumptable            260     6 (fixed)
  1740                           ;	Chosen strategy is simple_byte
  1741  033B  0872               	movf	??_LED_SetState+1,w
  1742  033C  3A00               	xorlw	0	; case 0
  1743  033D  1903               	skipnz
  1744  033E  2B40               	goto	l1918
  1745  033F  2B45               	goto	l121
  1746  0340                     l1918:	
  1747                           
  1748                           ; Switch size 1, requested type "simple"
  1749                           ; Number of cases is 1, Range of values is 0 to 0
  1750                           ; switch strategies available:
  1751                           ; Name         Instructions Cycles
  1752                           ; simple_byte            4     3 (average)
  1753                           ; direct_byte           11     8 (fixed)
  1754                           ; jumptable            260     6 (fixed)
  1755                           ;	Chosen strategy is simple_byte
  1756  0340  0871               	movf	??_LED_SetState,w
  1757  0341  3A00               	xorlw	0	; case 0
  1758  0342  1903               	skipnz
  1759  0343  2B29               	goto	l1420
  1760  0344  2B45               	goto	l121
  1761  0345                     l121:	
  1762  0345  0008               	return
  1763  0346                     __end_of_LED_SetState:	
  1764                           
  1765                           	psect	text7
  1766  02B0                     __ptext7:	
  1767 ;; *************** function _VC_GetSpeed *****************
  1768 ;; Defined at:
  1769 ;;		line 44 in file "Vacuum.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      enum E912
  1776 ;; Registers used:
  1777 ;;		wreg
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1783 ;;      Params:         0       0       0       0       0
  1784 ;;      Locals:         0       0       0       0       0
  1785 ;;      Temps:          0       0       0       0       0
  1786 ;;      Totals:         0       0       0       0       0
  1787 ;;Total ram usage:        0 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; This function calls:
  1790 ;;		Nothing
  1791 ;; This function is called by:
  1792 ;;		_main
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           
  1797                           ;psect for function _VC_GetSpeed
  1798  02B0                     _VC_GetSpeed:	
  1799  02B0                     l1676:	
  1800                           ;incstack = 0
  1801                           ; Regs used in _VC_GetSpeed: [wreg]
  1802                           
  1803                           
  1804                           ;Vacuum.c: 47:     return motor_speed;
  1805  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  1806  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  1807  02B2  0830               	movf	_motor_speed,w
  1808  02B3                     l207:	
  1809  02B3  0008               	return
  1810  02B4                     __end_of_VC_GetSpeed:	
  1811                           
  1812                           	psect	text8
  1813  0439                     __ptext8:	
  1814 ;; *************** function _SW_Update *****************
  1815 ;; Defined at:
  1816 ;;		line 83 in file "SW.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1830 ;;      Params:         0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0
  1832 ;;      Temps:          2       0       0       0       0
  1833 ;;      Totals:         2       0       0       0       0
  1834 ;;Total ram usage:        2 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    2
  1837 ;; This function calls:
  1838 ;;		_SW_UpdateState
  1839 ;; This function is called by:
  1840 ;;		_main
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           
  1845                           ;psect for function _SW_Update
  1846  0439                     _SW_Update:	
  1847  0439                     l1646:	
  1848                           ;incstack = 0
  1849                           ; Regs used in _SW_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1850                           
  1851                           
  1852                           ;SW.c: 88:     static uint8 SW_Time_Counter = 15;;SW.c: 89:     SW_Time_Counter += (5);
  1853  0439  3005               	movlw	5
  1854  043A  00F8               	movwf	??_SW_Update
  1855  043B  0878               	movf	??_SW_Update,w
  1856  043C  1283               	bcf	3,5	;RP0=0, select bank0
  1857  043D  1303               	bcf	3,6	;RP1=0, select bank0
  1858  043E  07B7               	addwf	SW_Update@SW_Time_Counter,f
  1859                           
  1860                           ;SW.c: 91:     if(SW_Time_Counter != (20))
  1861  043F  3014               	movlw	20
  1862  0440  0637               	xorwf	SW_Update@SW_Time_Counter,w
  1863  0441  1903               	btfsc	3,2
  1864  0442  2C44               	goto	u721
  1865  0443  2C45               	goto	u720
  1866  0444                     u721:	
  1867  0444  2C46               	goto	l1650
  1868  0445                     u720:	
  1869  0445  2C83               	goto	l77
  1870  0446                     l1650:	
  1871                           
  1872                           ;SW.c: 95:     SW_Time_Counter = 0;
  1873  0446  01B7               	clrf	SW_Update@SW_Time_Counter
  1874  0447                     l1652:	
  1875                           
  1876                           ;SW.c: 97:     SW_DATA[SW_PLUS].samples[0] = SW_DATA[SW_PLUS].samples[1];
  1877  0447  0821               	movf	_SW_DATA+1,w
  1878  0448  00F8               	movwf	??_SW_Update
  1879  0449  0878               	movf	??_SW_Update,w
  1880  044A  00A0               	movwf	_SW_DATA
  1881                           
  1882                           ;SW.c: 98:     SW_DATA[SW_PLUS].samples[1] = (((PORTB) >> (0))& 1);
  1883  044B  0806               	movf	6,w	;volatile
  1884  044C  3901               	andlw	1
  1885  044D  00F8               	movwf	??_SW_Update
  1886  044E  0878               	movf	??_SW_Update,w
  1887  044F  00A1               	movwf	_SW_DATA+1
  1888  0450                     l1654:	
  1889                           
  1890                           ;SW.c: 100:     SW_UpdateState(SW_PLUS);
  1891  0450  3000               	movlw	0
  1892  0451  120A  118A  26DC  120A  118A  	fcall	_SW_UpdateState
  1893  0456                     l1656:	
  1894                           
  1895                           ;SW.c: 102:     SW_DATA[SW_MINUS].samples[0] = SW_DATA[SW_MINUS].samples[1];
  1896  0456  1283               	bcf	3,5	;RP0=0, select bank0
  1897  0457  1303               	bcf	3,6	;RP1=0, select bank0
  1898  0458  0824               	movf	_SW_DATA+4,w
  1899  0459  00F8               	movwf	??_SW_Update
  1900  045A  0878               	movf	??_SW_Update,w
  1901  045B  00A3               	movwf	_SW_DATA+3
  1902  045C                     l1658:	
  1903                           
  1904                           ;SW.c: 103:     SW_DATA[SW_MINUS].samples[1] = (((PORTB) >> (1))& 1);
  1905  045C  0806               	movf	6,w	;volatile
  1906  045D  00F8               	movwf	??_SW_Update
  1907  045E  1003               	clrc
  1908  045F  0C78               	rrf	??_SW_Update,w
  1909  0460  3901               	andlw	1
  1910  0461  00F9               	movwf	??_SW_Update+1
  1911  0462  0879               	movf	??_SW_Update+1,w
  1912  0463  00A4               	movwf	_SW_DATA+4
  1913  0464                     l1660:	
  1914                           
  1915                           ;SW.c: 105:     SW_UpdateState(SW_MINUS);
  1916  0464  3001               	movlw	1
  1917  0465  120A  118A  26DC  120A  118A  	fcall	_SW_UpdateState
  1918  046A                     l1662:	
  1919                           
  1920                           ;SW.c: 108:     SW_DATA[SW_PRESSURE].samples[0] = SW_DATA[SW_PRESSURE].samples[1];
  1921  046A  1283               	bcf	3,5	;RP0=0, select bank0
  1922  046B  1303               	bcf	3,6	;RP1=0, select bank0
  1923  046C  0827               	movf	_SW_DATA+7,w
  1924  046D  00F8               	movwf	??_SW_Update
  1925  046E  0878               	movf	??_SW_Update,w
  1926  046F  00A6               	movwf	_SW_DATA+6
  1927  0470                     l1664:	
  1928                           
  1929                           ;SW.c: 109:     SW_DATA[SW_PRESSURE].samples[1] = (((PORTB) >> (2))& 1);
  1930  0470  0806               	movf	6,w	;volatile
  1931  0471  00F8               	movwf	??_SW_Update
  1932  0472  3002               	movlw	2
  1933  0473                     u735:	
  1934  0473  1003               	clrc
  1935  0474  0CF8               	rrf	??_SW_Update,f
  1936  0475  3EFF               	addlw	-1
  1937  0476  1D03               	skipz
  1938  0477  2C73               	goto	u735
  1939  0478  0878               	movf	??_SW_Update,w
  1940  0479  3901               	andlw	1
  1941  047A  00F9               	movwf	??_SW_Update+1
  1942  047B  0879               	movf	??_SW_Update+1,w
  1943  047C  00A7               	movwf	_SW_DATA+7
  1944  047D                     l1666:	
  1945                           
  1946                           ;SW.c: 111:     SW_UpdateState(SW_PRESSURE);
  1947  047D  3002               	movlw	2
  1948  047E  120A  118A  26DC  120A  118A  	fcall	_SW_UpdateState
  1949  0483                     l77:	
  1950  0483  0008               	return
  1951  0484                     __end_of_SW_Update:	
  1952                           
  1953                           	psect	text9
  1954  06DC                     __ptext9:	
  1955 ;; *************** function _SW_UpdateState *****************
  1956 ;; Defined at:
  1957 ;;		line 114 in file "SW.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;  sw              1    wreg     enum E859
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;  sw              1    7[COMMON] enum E859
  1962 ;; Return value:  Size  Location     Type
  1963 ;;                  1    wreg      void 
  1964 ;; Registers used:
  1965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1966 ;; Tracked objects:
  1967 ;;		On entry : 0/0
  1968 ;;		On exit  : 0/0
  1969 ;;		Unchanged: 0/0
  1970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1971 ;;      Params:         0       0       0       0       0
  1972 ;;      Locals:         1       0       0       0       0
  1973 ;;      Temps:          3       0       0       0       0
  1974 ;;      Totals:         4       0       0       0       0
  1975 ;;Total ram usage:        4 bytes
  1976 ;; Hardware stack levels used:    1
  1977 ;; Hardware stack levels required when called:    1
  1978 ;; This function calls:
  1979 ;;		___bmul
  1980 ;; This function is called by:
  1981 ;;		_SW_Update
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           
  1986                           ;psect for function _SW_UpdateState
  1987  06DC                     _SW_UpdateState:	
  1988                           
  1989                           ;incstack = 0
  1990                           ; Regs used in _SW_UpdateState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1991                           ;SW_UpdateState@sw stored from wreg
  1992  06DC  00F7               	movwf	SW_UpdateState@sw
  1993  06DD                     l1456:	
  1994                           
  1995                           ;SW.c: 114: void SW_UpdateState(SW_t sw);SW.c: 115: {;SW.c: 131:     switch(SW_DATA[sw].
      +                          state)
  1996  06DD  2FB1               	goto	l1484
  1997  06DE                     l1458:	
  1998                           
  1999                           ;SW.c: 135:             if(SW_DATA[sw].samples[0] == (1) && SW_DATA[sw].samples[1] == (1
      +                          ))
  2000  06DE  3003               	movlw	3
  2001  06DF  00F4               	movwf	??_SW_UpdateState
  2002  06E0  0874               	movf	??_SW_UpdateState,w
  2003  06E1  00F0               	movwf	___bmul@multiplicand
  2004  06E2  0877               	movf	SW_UpdateState@sw,w
  2005  06E3  120A  118A  2312  120A  118A  	fcall	___bmul
  2006  06E8  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  2007  06E9  0084               	movwf	4
  2008  06EA  1383               	bcf	3,7	;select IRP bank0
  2009  06EB  0300               	decf	0,w
  2010  06EC  1D03               	btfss	3,2
  2011  06ED  2EEF               	goto	u561
  2012  06EE  2EF0               	goto	u560
  2013  06EF                     u561:	
  2014  06EF  2FD4               	goto	l91
  2015  06F0                     u560:	
  2016  06F0                     l1460:	
  2017  06F0  3003               	movlw	3
  2018  06F1  00F4               	movwf	??_SW_UpdateState
  2019  06F2  0874               	movf	??_SW_UpdateState,w
  2020  06F3  00F0               	movwf	___bmul@multiplicand
  2021  06F4  0877               	movf	SW_UpdateState@sw,w
  2022  06F5  120A  118A  2312  120A  118A  	fcall	___bmul
  2023  06FA  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  2024  06FB  0084               	movwf	4
  2025  06FC  1383               	bcf	3,7	;select IRP bank0
  2026  06FD  0300               	decf	0,w
  2027  06FE  1D03               	btfss	3,2
  2028  06FF  2F01               	goto	u571
  2029  0700  2F02               	goto	u570
  2030  0701                     u571:	
  2031  0701  2FD4               	goto	l91
  2032  0702                     u570:	
  2033  0702                     l1462:	
  2034                           
  2035                           ;SW.c: 136:                 SW_DATA[sw].state = SW_RELEASED;
  2036  0702  3003               	movlw	3
  2037  0703  00F4               	movwf	??_SW_UpdateState
  2038  0704  0874               	movf	??_SW_UpdateState,w
  2039  0705  00F0               	movwf	___bmul@multiplicand
  2040  0706  0877               	movf	SW_UpdateState@sw,w
  2041  0707  120A  118A  2312  120A  118A  	fcall	___bmul
  2042  070C  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2043  070D  0084               	movwf	4
  2044  070E  1383               	bcf	3,7	;select IRP bank0
  2045  070F  0180               	clrf	0
  2046  0710  2FD4               	goto	l91
  2047  0711                     l1464:	
  2048                           
  2049                           ;SW.c: 139:             if(SW_DATA[sw].samples[0] == (0) && SW_DATA[sw].samples[1] == (0
      +                          ))
  2050  0711  3003               	movlw	3
  2051  0712  00F4               	movwf	??_SW_UpdateState
  2052  0713  0874               	movf	??_SW_UpdateState,w
  2053  0714  00F0               	movwf	___bmul@multiplicand
  2054  0715  0877               	movf	SW_UpdateState@sw,w
  2055  0716  120A  118A  2312  120A  118A  	fcall	___bmul
  2056  071B  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  2057  071C  0084               	movwf	4
  2058  071D  1383               	bcf	3,7	;select IRP bank0
  2059  071E  0800               	movf	0,w
  2060  071F  1D03               	btfss	3,2
  2061  0720  2F22               	goto	u581
  2062  0721  2F23               	goto	u580
  2063  0722                     u581:	
  2064  0722  2FD4               	goto	l91
  2065  0723                     u580:	
  2066  0723                     l1466:	
  2067  0723  3003               	movlw	3
  2068  0724  00F4               	movwf	??_SW_UpdateState
  2069  0725  0874               	movf	??_SW_UpdateState,w
  2070  0726  00F0               	movwf	___bmul@multiplicand
  2071  0727  0877               	movf	SW_UpdateState@sw,w
  2072  0728  120A  118A  2312  120A  118A  	fcall	___bmul
  2073  072D  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  2074  072E  0084               	movwf	4
  2075  072F  1383               	bcf	3,7	;select IRP bank0
  2076  0730  0800               	movf	0,w
  2077  0731  1D03               	btfss	3,2
  2078  0732  2F34               	goto	u591
  2079  0733  2F35               	goto	u590
  2080  0734                     u591:	
  2081  0734  2FD4               	goto	l91
  2082  0735                     u590:	
  2083  0735                     l1468:	
  2084                           
  2085                           ;SW.c: 140:                 SW_DATA[sw].state = SW_PRE_PRESSED;
  2086  0735  3003               	movlw	3
  2087  0736  00F4               	movwf	??_SW_UpdateState
  2088  0737  0874               	movf	??_SW_UpdateState,w
  2089  0738  00F0               	movwf	___bmul@multiplicand
  2090  0739  0877               	movf	SW_UpdateState@sw,w
  2091  073A  120A  118A  2312  120A  118A  	fcall	___bmul
  2092  073F  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2093  0740  0084               	movwf	4
  2094  0741  1383               	bcf	3,7	;select IRP bank0
  2095  0742  0180               	clrf	0
  2096  0743  0A80               	incf	0,f
  2097  0744  2FD4               	goto	l91
  2098  0745                     l1470:	
  2099                           
  2100                           ;SW.c: 143:             if(SW_DATA[sw].samples[0] == (0) && SW_DATA[sw].samples[1] == (0
      +                          ))
  2101  0745  3003               	movlw	3
  2102  0746  00F4               	movwf	??_SW_UpdateState
  2103  0747  0874               	movf	??_SW_UpdateState,w
  2104  0748  00F0               	movwf	___bmul@multiplicand
  2105  0749  0877               	movf	SW_UpdateState@sw,w
  2106  074A  120A  118A  2312  120A  118A  	fcall	___bmul
  2107  074F  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  2108  0750  0084               	movwf	4
  2109  0751  1383               	bcf	3,7	;select IRP bank0
  2110  0752  0800               	movf	0,w
  2111  0753  1D03               	btfss	3,2
  2112  0754  2F56               	goto	u601
  2113  0755  2F57               	goto	u600
  2114  0756                     u601:	
  2115  0756  2FD4               	goto	l91
  2116  0757                     u600:	
  2117  0757                     l1472:	
  2118  0757  3003               	movlw	3
  2119  0758  00F4               	movwf	??_SW_UpdateState
  2120  0759  0874               	movf	??_SW_UpdateState,w
  2121  075A  00F0               	movwf	___bmul@multiplicand
  2122  075B  0877               	movf	SW_UpdateState@sw,w
  2123  075C  120A  118A  2312  120A  118A  	fcall	___bmul
  2124  0761  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  2125  0762  0084               	movwf	4
  2126  0763  1383               	bcf	3,7	;select IRP bank0
  2127  0764  0800               	movf	0,w
  2128  0765  1D03               	btfss	3,2
  2129  0766  2F68               	goto	u611
  2130  0767  2F69               	goto	u610
  2131  0768                     u611:	
  2132  0768  2FD4               	goto	l91
  2133  0769                     u610:	
  2134  0769                     l1474:	
  2135                           
  2136                           ;SW.c: 144:                 SW_DATA[sw].state = SW_PRESSED;
  2137  0769  3002               	movlw	2
  2138  076A  00F4               	movwf	??_SW_UpdateState
  2139  076B  3003               	movlw	3
  2140  076C  00F5               	movwf	??_SW_UpdateState+1
  2141  076D  0875               	movf	??_SW_UpdateState+1,w
  2142  076E  00F0               	movwf	___bmul@multiplicand
  2143  076F  0877               	movf	SW_UpdateState@sw,w
  2144  0770  120A  118A  2312  120A  118A  	fcall	___bmul
  2145  0775  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2146  0776  0084               	movwf	4
  2147  0777  0874               	movf	??_SW_UpdateState,w
  2148  0778  1383               	bcf	3,7	;select IRP bank0
  2149  0779  0080               	movwf	0
  2150  077A  2FD4               	goto	l91
  2151  077B                     l1476:	
  2152                           
  2153                           ;SW.c: 147:             if(SW_DATA[sw].samples[0] == (1) && SW_DATA[sw].samples[1] == (1
      +                          ))
  2154  077B  3003               	movlw	3
  2155  077C  00F4               	movwf	??_SW_UpdateState
  2156  077D  0874               	movf	??_SW_UpdateState,w
  2157  077E  00F0               	movwf	___bmul@multiplicand
  2158  077F  0877               	movf	SW_UpdateState@sw,w
  2159  0780  120A  118A  2312  120A  118A  	fcall	___bmul
  2160  0785  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  2161  0786  0084               	movwf	4
  2162  0787  1383               	bcf	3,7	;select IRP bank0
  2163  0788  0300               	decf	0,w
  2164  0789  1D03               	btfss	3,2
  2165  078A  2F8C               	goto	u621
  2166  078B  2F8D               	goto	u620
  2167  078C                     u621:	
  2168  078C  2FD4               	goto	l91
  2169  078D                     u620:	
  2170  078D                     l1478:	
  2171  078D  3003               	movlw	3
  2172  078E  00F4               	movwf	??_SW_UpdateState
  2173  078F  0874               	movf	??_SW_UpdateState,w
  2174  0790  00F0               	movwf	___bmul@multiplicand
  2175  0791  0877               	movf	SW_UpdateState@sw,w
  2176  0792  120A  118A  2312  120A  118A  	fcall	___bmul
  2177  0797  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  2178  0798  0084               	movwf	4
  2179  0799  1383               	bcf	3,7	;select IRP bank0
  2180  079A  0300               	decf	0,w
  2181  079B  1D03               	btfss	3,2
  2182  079C  2F9E               	goto	u631
  2183  079D  2F9F               	goto	u630
  2184  079E                     u631:	
  2185  079E  2FD4               	goto	l91
  2186  079F                     u630:	
  2187  079F                     l1480:	
  2188                           
  2189                           ;SW.c: 148:                 SW_DATA[sw].state = SW_PRE_RELEASED;
  2190  079F  3003               	movlw	3
  2191  07A0  00F4               	movwf	??_SW_UpdateState
  2192  07A1  3003               	movlw	3
  2193  07A2  00F5               	movwf	??_SW_UpdateState+1
  2194  07A3  0875               	movf	??_SW_UpdateState+1,w
  2195  07A4  00F0               	movwf	___bmul@multiplicand
  2196  07A5  0877               	movf	SW_UpdateState@sw,w
  2197  07A6  120A  118A  2312  120A  118A  	fcall	___bmul
  2198  07AB  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2199  07AC  0084               	movwf	4
  2200  07AD  0874               	movf	??_SW_UpdateState,w
  2201  07AE  1383               	bcf	3,7	;select IRP bank0
  2202  07AF  0080               	movwf	0
  2203  07B0  2FD4               	goto	l91
  2204  07B1                     l1484:	
  2205  07B1  3003               	movlw	3
  2206  07B2  00F4               	movwf	??_SW_UpdateState
  2207  07B3  0874               	movf	??_SW_UpdateState,w
  2208  07B4  00F0               	movwf	___bmul@multiplicand
  2209  07B5  0877               	movf	SW_UpdateState@sw,w
  2210  07B6  120A  118A  2312  120A  118A  	fcall	___bmul
  2211  07BB  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2212  07BC  0084               	movwf	4
  2213  07BD  1383               	bcf	3,7	;select IRP bank0
  2214  07BE  0800               	movf	0,w
  2215  07BF  00F5               	movwf	??_SW_UpdateState+1
  2216  07C0  01F6               	clrf	??_SW_UpdateState+2
  2217                           
  2218                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2219                           ; Switch size 1, requested type "simple"
  2220                           ; Number of cases is 1, Range of values is 0 to 0
  2221                           ; switch strategies available:
  2222                           ; Name         Instructions Cycles
  2223                           ; simple_byte            4     3 (average)
  2224                           ; direct_byte           11     8 (fixed)
  2225                           ; jumptable            260     6 (fixed)
  2226                           ;	Chosen strategy is simple_byte
  2227  07C1  0876               	movf	??_SW_UpdateState+2,w
  2228  07C2  3A00               	xorlw	0	; case 0
  2229  07C3  1903               	skipnz
  2230  07C4  2FC6               	goto	l1920
  2231  07C5  2FD4               	goto	l91
  2232  07C6                     l1920:	
  2233                           
  2234                           ; Switch size 1, requested type "simple"
  2235                           ; Number of cases is 4, Range of values is 0 to 3
  2236                           ; switch strategies available:
  2237                           ; Name         Instructions Cycles
  2238                           ; simple_byte           13     7 (average)
  2239                           ; direct_byte           20     8 (fixed)
  2240                           ; jumptable            260     6 (fixed)
  2241                           ;	Chosen strategy is simple_byte
  2242  07C6  0875               	movf	??_SW_UpdateState+1,w
  2243  07C7  3A00               	xorlw	0	; case 0
  2244  07C8  1903               	skipnz
  2245  07C9  2F11               	goto	l1464
  2246  07CA  3A01               	xorlw	1	; case 1
  2247  07CB  1903               	skipnz
  2248  07CC  2F45               	goto	l1470
  2249  07CD  3A03               	xorlw	3	; case 2
  2250  07CE  1903               	skipnz
  2251  07CF  2F7B               	goto	l1476
  2252  07D0  3A01               	xorlw	1	; case 3
  2253  07D1  1903               	skipnz
  2254  07D2  2EDE               	goto	l1458
  2255  07D3  2FD4               	goto	l91
  2256  07D4                     l91:	
  2257  07D4  0008               	return
  2258  07D5                     __end_of_SW_UpdateState:	
  2259                           
  2260                           	psect	text10
  2261  0312                     __ptext10:	
  2262 ;; *************** function ___bmul *****************
  2263 ;; Defined at:
  2264 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  multiplier      1    wreg     unsigned char 
  2267 ;;  multiplicand    1    0[COMMON] unsigned char 
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;  multiplier      1    3[COMMON] unsigned char 
  2270 ;;  product         1    2[COMMON] unsigned char 
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  1    wreg      unsigned char 
  2273 ;; Registers used:
  2274 ;;		wreg, status,2, status,0
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/0
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2280 ;;      Params:         1       0       0       0       0
  2281 ;;      Locals:         2       0       0       0       0
  2282 ;;      Temps:          1       0       0       0       0
  2283 ;;      Totals:         4       0       0       0       0
  2284 ;;Total ram usage:        4 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; This function calls:
  2287 ;;		Nothing
  2288 ;; This function is called by:
  2289 ;;		_SW_GetState
  2290 ;;		_SW_UpdateState
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           
  2295                           ;psect for function ___bmul
  2296  0312                     ___bmul:	
  2297                           
  2298                           ;incstack = 0
  2299                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2300                           ;___bmul@multiplier stored from wreg
  2301  0312  00F3               	movwf	___bmul@multiplier
  2302  0313                     l1376:	
  2303  0313  01F2               	clrf	___bmul@product
  2304  0314                     l1378:	
  2305  0314  1C73               	btfss	___bmul@multiplier,0
  2306  0315  2B17               	goto	u401
  2307  0316  2B18               	goto	u400
  2308  0317                     u401:	
  2309  0317  2B1C               	goto	l1382
  2310  0318                     u400:	
  2311  0318                     l1380:	
  2312  0318  0870               	movf	___bmul@multiplicand,w
  2313  0319  00F1               	movwf	??___bmul
  2314  031A  0871               	movf	??___bmul,w
  2315  031B  07F2               	addwf	___bmul@product,f
  2316  031C                     l1382:	
  2317  031C  1003               	clrc
  2318  031D  0DF0               	rlf	___bmul@multiplicand,f
  2319  031E                     l1384:	
  2320  031E  1003               	clrc
  2321  031F  0CF3               	rrf	___bmul@multiplier,f
  2322  0320  0873               	movf	___bmul@multiplier,w
  2323  0321  1D03               	btfss	3,2
  2324  0322  2B24               	goto	u411
  2325  0323  2B25               	goto	u410
  2326  0324                     u411:	
  2327  0324  2B14               	goto	l1378
  2328  0325                     u410:	
  2329  0325                     l1386:	
  2330  0325  0872               	movf	___bmul@product,w
  2331  0326                     l348:	
  2332  0326  0008               	return
  2333  0327                     __end_of___bmul:	
  2334                           
  2335                           	psect	text11
  2336  03FB                     __ptext11:	
  2337 ;; *************** function _SW_Init *****************
  2338 ;; Defined at:
  2339 ;;		line 54 in file "SW.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;		None
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;		None
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2353 ;;      Params:         0       0       0       0       0
  2354 ;;      Locals:         0       0       0       0       0
  2355 ;;      Temps:          1       0       0       0       0
  2356 ;;      Totals:         1       0       0       0       0
  2357 ;;Total ram usage:        1 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    1
  2360 ;; This function calls:
  2361 ;;		_GPIO_Init_Pin
  2362 ;; This function is called by:
  2363 ;;		_main
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           
  2368                           ;psect for function _SW_Init
  2369  03FB                     _SW_Init:	
  2370  03FB                     l1624:	
  2371                           ;incstack = 0
  2372                           ; Regs used in _SW_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2373                           
  2374                           
  2375                           ;SW.c: 58:     GPIO_Init_Pin(&(TRISB),(0),(1));
  2376  03FB  3086               	movlw	134
  2377  03FC  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  2378  03FD  3000               	movlw	0
  2379  03FE  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  2380  03FF  01F2               	clrf	GPIO_Init_Pin@pin_number
  2381  0400  01F3               	clrf	GPIO_Init_Pin@dir
  2382  0401  0AF3               	incf	GPIO_Init_Pin@dir,f
  2383  0402  120A  118A  2531  120A  118A  	fcall	_GPIO_Init_Pin
  2384  0407                     l1626:	
  2385                           
  2386                           ;SW.c: 59:     SW_DATA[SW_PLUS].state = SW_RELEASED;
  2387  0407  1283               	bcf	3,5	;RP0=0, select bank0
  2388  0408  1303               	bcf	3,6	;RP1=0, select bank0
  2389  0409  01A2               	clrf	_SW_DATA+2
  2390  040A                     l1628:	
  2391                           
  2392                           ;SW.c: 60:     SW_DATA[SW_PLUS].samples[0] = (1);
  2393  040A  01A0               	clrf	_SW_DATA
  2394  040B  0AA0               	incf	_SW_DATA,f
  2395  040C                     l1630:	
  2396                           
  2397                           ;SW.c: 61:     SW_DATA[SW_PLUS].samples[1] = (1);
  2398  040C  01A1               	clrf	_SW_DATA+1
  2399  040D  0AA1               	incf	_SW_DATA+1,f
  2400  040E                     l1632:	
  2401                           
  2402                           ;SW.c: 63:     GPIO_Init_Pin(&(TRISB),(1),(1));
  2403  040E  3086               	movlw	134
  2404  040F  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  2405  0410  3000               	movlw	0
  2406  0411  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  2407  0412  01F2               	clrf	GPIO_Init_Pin@pin_number
  2408  0413  0AF2               	incf	GPIO_Init_Pin@pin_number,f
  2409  0414  01F3               	clrf	GPIO_Init_Pin@dir
  2410  0415  0AF3               	incf	GPIO_Init_Pin@dir,f
  2411  0416  120A  118A  2531  120A  118A  	fcall	_GPIO_Init_Pin
  2412                           
  2413                           ;SW.c: 64:     SW_DATA[SW_MINUS].state = SW_RELEASED;
  2414  041B  1283               	bcf	3,5	;RP0=0, select bank0
  2415  041C  1303               	bcf	3,6	;RP1=0, select bank0
  2416  041D  01A5               	clrf	_SW_DATA+5
  2417  041E                     l1634:	
  2418                           
  2419                           ;SW.c: 65:     SW_DATA[SW_MINUS].samples[0] = (1);
  2420  041E  01A3               	clrf	_SW_DATA+3
  2421  041F  0AA3               	incf	_SW_DATA+3,f
  2422  0420                     l1636:	
  2423                           
  2424                           ;SW.c: 66:     SW_DATA[SW_MINUS].samples[1] = (1);
  2425  0420  01A4               	clrf	_SW_DATA+4
  2426  0421  0AA4               	incf	_SW_DATA+4,f
  2427  0422                     l1638:	
  2428                           
  2429                           ;SW.c: 68:     GPIO_Init_Pin(&(TRISB),(2),(1));
  2430  0422  3086               	movlw	134
  2431  0423  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  2432  0424  3000               	movlw	0
  2433  0425  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  2434  0426  3002               	movlw	2
  2435  0427  00F8               	movwf	??_SW_Init
  2436  0428  0878               	movf	??_SW_Init,w
  2437  0429  00F2               	movwf	GPIO_Init_Pin@pin_number
  2438  042A  01F3               	clrf	GPIO_Init_Pin@dir
  2439  042B  0AF3               	incf	GPIO_Init_Pin@dir,f
  2440  042C  120A  118A  2531  120A  118A  	fcall	_GPIO_Init_Pin
  2441  0431                     l1640:	
  2442                           
  2443                           ;SW.c: 69:     SW_DATA[SW_PRESSURE].state = SW_RELEASED;
  2444  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2445  0432  1303               	bcf	3,6	;RP1=0, select bank0
  2446  0433  01A8               	clrf	_SW_DATA+8
  2447  0434                     l1642:	
  2448                           
  2449                           ;SW.c: 70:     SW_DATA[SW_PRESSURE].samples[0] = (1);
  2450  0434  01A6               	clrf	_SW_DATA+6
  2451  0435  0AA6               	incf	_SW_DATA+6,f
  2452  0436                     l1644:	
  2453                           
  2454                           ;SW.c: 71:     SW_DATA[SW_PRESSURE].samples[1] = (1);
  2455  0436  01A7               	clrf	_SW_DATA+7
  2456  0437  0AA7               	incf	_SW_DATA+7,f
  2457  0438                     l68:	
  2458  0438  0008               	return
  2459  0439                     __end_of_SW_Init:	
  2460                           
  2461                           	psect	text12
  2462  0399                     __ptext12:	
  2463 ;; *************** function _SSD_Update *****************
  2464 ;; Defined at:
  2465 ;;		line 74 in file "SSD.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;		None
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;		None
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      void 
  2472 ;; Registers used:
  2473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2479 ;;      Params:         0       0       0       0       0
  2480 ;;      Locals:         0       0       0       0       0
  2481 ;;      Temps:          1       0       0       0       0
  2482 ;;      Totals:         1       0       0       0       0
  2483 ;;Total ram usage:        1 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; Hardware stack levels required when called:    1
  2486 ;; This function calls:
  2487 ;;		_SSD_Data_write
  2488 ;;		_SSD_Disable
  2489 ;;		_SSD_Enable
  2490 ;; This function is called by:
  2491 ;;		_main
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           
  2496                           ;psect for function _SSD_Update
  2497  0399                     _SSD_Update:	
  2498  0399                     l1680:	
  2499                           ;incstack = 0
  2500                           ; Regs used in _SSD_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2501                           
  2502                           
  2503                           ;SSD.c: 79:     static uint8 SSD_Time_Counter = 0;;SSD.c: 80:     SSD_Time_Counter += (5
      +                          );
  2504  0399  3005               	movlw	5
  2505  039A  00F3               	movwf	??_SSD_Update
  2506  039B  0873               	movf	??_SSD_Update,w
  2507  039C  1283               	bcf	3,5	;RP0=0, select bank0
  2508  039D  1303               	bcf	3,6	;RP1=0, select bank0
  2509  039E  07B1               	addwf	SSD_Update@SSD_Time_Counter,f
  2510                           
  2511                           ;SSD.c: 82:     if(SSD_Time_Counter != (5))
  2512  039F  3005               	movlw	5
  2513  03A0  0631               	xorwf	SSD_Update@SSD_Time_Counter,w
  2514  03A1  1903               	btfsc	3,2
  2515  03A2  2BA4               	goto	u751
  2516  03A3  2BA5               	goto	u750
  2517  03A4                     u751:	
  2518  03A4  2BA6               	goto	l1684
  2519  03A5                     u750:	
  2520  03A5  2BC7               	goto	l167
  2521  03A6                     l1684:	
  2522                           
  2523                           ;SSD.c: 86:     SSD_Time_Counter = 0;
  2524  03A6  01B1               	clrf	SSD_Update@SSD_Time_Counter
  2525  03A7                     l1686:	
  2526                           
  2527                           ;SSD.c: 89:     SSD_Disable(currentSSD);
  2528  03A7  0832               	movf	_currentSSD,w
  2529  03A8  120A  118A  2346  120A  118A  	fcall	_SSD_Disable
  2530  03AD                     l1688:	
  2531                           
  2532                           ;SSD.c: 91:     currentSSD++;
  2533  03AD  3001               	movlw	1
  2534  03AE  00F3               	movwf	??_SSD_Update
  2535  03AF  0873               	movf	??_SSD_Update,w
  2536  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  2537  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  2538  03B2  07B2               	addwf	_currentSSD,f
  2539  03B3                     l1690:	
  2540                           
  2541                           ;SSD.c: 92:     if(currentSSD > SSD_THIRD)currentSSD = 0;
  2542  03B3  3003               	movlw	3
  2543  03B4  0232               	subwf	_currentSSD,w
  2544  03B5  1C03               	skipc
  2545  03B6  2BB8               	goto	u761
  2546  03B7  2BB9               	goto	u760
  2547  03B8                     u761:	
  2548  03B8  2BBA               	goto	l1694
  2549  03B9                     u760:	
  2550  03B9                     l1692:	
  2551  03B9  01B2               	clrf	_currentSSD
  2552  03BA                     l1694:	
  2553                           
  2554                           ;SSD.c: 94:     SSD_Data_write();
  2555  03BA  120A  118A  22CB  120A  118A  	fcall	_SSD_Data_write
  2556  03BF                     l1696:	
  2557                           
  2558                           ;SSD.c: 96:     SSD_Enable(currentSSD);
  2559  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2560  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2561  03C1  0832               	movf	_currentSSD,w
  2562  03C2  120A  118A  236E  120A  118A  	fcall	_SSD_Enable
  2563  03C7                     l167:	
  2564  03C7  0008               	return
  2565  03C8                     __end_of_SSD_Update:	
  2566                           
  2567                           	psect	text13
  2568  036E                     __ptext13:	
  2569 ;; *************** function _SSD_Enable *****************
  2570 ;; Defined at:
  2571 ;;		line 117 in file "SSD.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  s               1    wreg     enum E865
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;  s               1    2[COMMON] enum E865
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      void 
  2578 ;; Registers used:
  2579 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2585 ;;      Params:         0       0       0       0       0
  2586 ;;      Locals:         1       0       0       0       0
  2587 ;;      Temps:          2       0       0       0       0
  2588 ;;      Totals:         3       0       0       0       0
  2589 ;;Total ram usage:        3 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; This function calls:
  2592 ;;		Nothing
  2593 ;; This function is called by:
  2594 ;;		_SSD_Update
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           
  2599                           ;psect for function _SSD_Enable
  2600  036E                     _SSD_Enable:	
  2601                           
  2602                           ;incstack = 0
  2603                           ; Regs used in _SSD_Enable: [wreg-fsr0h+status,2+status,0]
  2604                           ;SSD_Enable@s stored from wreg
  2605  036E  00F2               	movwf	SSD_Enable@s
  2606  036F                     l1524:	
  2607                           
  2608                           ;SSD.c: 117: void SSD_Enable(SSD_t s);SSD.c: 118: {;SSD.c: 119:     switch(s)
  2609  036F  2B85               	goto	l1532
  2610  0370                     l1526:	
  2611                           
  2612                           ;SSD.c: 122:             (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_ON<<(7)));
  2613  0370  1283               	bcf	3,5	;RP0=0, select bank0
  2614  0371  1303               	bcf	3,6	;RP1=0, select bank0
  2615  0372  0806               	movf	6,w	;volatile
  2616  0373  397F               	andlw	127
  2617  0374  3880               	iorlw	128
  2618  0375  0086               	movwf	6	;volatile
  2619                           
  2620                           ;SSD.c: 123:             break;
  2621  0376  2B98               	goto	l186
  2622  0377                     l1528:	
  2623                           
  2624                           ;SSD.c: 125:             (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_ON<<(6)));
  2625  0377  1283               	bcf	3,5	;RP0=0, select bank0
  2626  0378  1303               	bcf	3,6	;RP1=0, select bank0
  2627  0379  0806               	movf	6,w	;volatile
  2628  037A  39BF               	andlw	191
  2629  037B  3840               	iorlw	64
  2630  037C  0086               	movwf	6	;volatile
  2631                           
  2632                           ;SSD.c: 126:             break;
  2633  037D  2B98               	goto	l186
  2634  037E                     l1530:	
  2635                           
  2636                           ;SSD.c: 128:             (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_ON<<(5)));
  2637  037E  1283               	bcf	3,5	;RP0=0, select bank0
  2638  037F  1303               	bcf	3,6	;RP1=0, select bank0
  2639  0380  0806               	movf	6,w	;volatile
  2640  0381  39DF               	andlw	223
  2641  0382  3820               	iorlw	32
  2642  0383  0086               	movwf	6	;volatile
  2643                           
  2644                           ;SSD.c: 129:             break;
  2645  0384  2B98               	goto	l186
  2646  0385                     l1532:	
  2647  0385  0872               	movf	SSD_Enable@s,w
  2648  0386  00F0               	movwf	??_SSD_Enable
  2649  0387  01F1               	clrf	??_SSD_Enable+1
  2650                           
  2651                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2652                           ; Switch size 1, requested type "simple"
  2653                           ; Number of cases is 1, Range of values is 0 to 0
  2654                           ; switch strategies available:
  2655                           ; Name         Instructions Cycles
  2656                           ; simple_byte            4     3 (average)
  2657                           ; direct_byte           11     8 (fixed)
  2658                           ; jumptable            260     6 (fixed)
  2659                           ;	Chosen strategy is simple_byte
  2660  0388  0871               	movf	??_SSD_Enable+1,w
  2661  0389  3A00               	xorlw	0	; case 0
  2662  038A  1903               	skipnz
  2663  038B  2B8D               	goto	l1922
  2664  038C  2B98               	goto	l186
  2665  038D                     l1922:	
  2666                           
  2667                           ; Switch size 1, requested type "simple"
  2668                           ; Number of cases is 3, Range of values is 0 to 2
  2669                           ; switch strategies available:
  2670                           ; Name         Instructions Cycles
  2671                           ; simple_byte           10     6 (average)
  2672                           ; direct_byte           17     8 (fixed)
  2673                           ; jumptable            260     6 (fixed)
  2674                           ;	Chosen strategy is simple_byte
  2675  038D  0870               	movf	??_SSD_Enable,w
  2676  038E  3A00               	xorlw	0	; case 0
  2677  038F  1903               	skipnz
  2678  0390  2B70               	goto	l1526
  2679  0391  3A01               	xorlw	1	; case 1
  2680  0392  1903               	skipnz
  2681  0393  2B77               	goto	l1528
  2682  0394  3A03               	xorlw	3	; case 2
  2683  0395  1903               	skipnz
  2684  0396  2B7E               	goto	l1530
  2685  0397  2B98               	goto	l186
  2686  0398                     l186:	
  2687  0398  0008               	return
  2688  0399                     __end_of_SSD_Enable:	
  2689                           
  2690                           	psect	text14
  2691  0346                     __ptext14:	
  2692 ;; *************** function _SSD_Disable *****************
  2693 ;; Defined at:
  2694 ;;		line 99 in file "SSD.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;  s               1    wreg     enum E865
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  s               1    2[COMMON] enum E865
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2708 ;;      Params:         0       0       0       0       0
  2709 ;;      Locals:         1       0       0       0       0
  2710 ;;      Temps:          2       0       0       0       0
  2711 ;;      Totals:         3       0       0       0       0
  2712 ;;Total ram usage:        3 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; This function calls:
  2715 ;;		Nothing
  2716 ;; This function is called by:
  2717 ;;		_SSD_Update
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           
  2722                           ;psect for function _SSD_Disable
  2723  0346                     _SSD_Disable:	
  2724                           
  2725                           ;incstack = 0
  2726                           ; Regs used in _SSD_Disable: [wreg-fsr0h+status,2+status,0]
  2727                           ;SSD_Disable@s stored from wreg
  2728  0346  00F2               	movwf	SSD_Disable@s
  2729  0347                     l1508:	
  2730                           
  2731                           ;SSD.c: 99: void SSD_Disable(SSD_t s);SSD.c: 100: {;SSD.c: 101:     switch(s)
  2732  0347  2B5A               	goto	l1516
  2733  0348                     l1510:	
  2734                           
  2735                           ;SSD.c: 104:             (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_OFF<<(7)));
  2736  0348  1283               	bcf	3,5	;RP0=0, select bank0
  2737  0349  1303               	bcf	3,6	;RP1=0, select bank0
  2738  034A  0806               	movf	6,w	;volatile
  2739  034B  397F               	andlw	127
  2740  034C  0086               	movwf	6	;volatile
  2741                           
  2742                           ;SSD.c: 105:             break;
  2743  034D  2B6D               	goto	l177
  2744  034E                     l1512:	
  2745                           
  2746                           ;SSD.c: 107:             (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_OFF<<(6)));
  2747  034E  1283               	bcf	3,5	;RP0=0, select bank0
  2748  034F  1303               	bcf	3,6	;RP1=0, select bank0
  2749  0350  0806               	movf	6,w	;volatile
  2750  0351  39BF               	andlw	191
  2751  0352  0086               	movwf	6	;volatile
  2752                           
  2753                           ;SSD.c: 108:             break;
  2754  0353  2B6D               	goto	l177
  2755  0354                     l1514:	
  2756                           
  2757                           ;SSD.c: 110:             (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_OFF<<(5)));
  2758  0354  1283               	bcf	3,5	;RP0=0, select bank0
  2759  0355  1303               	bcf	3,6	;RP1=0, select bank0
  2760  0356  0806               	movf	6,w	;volatile
  2761  0357  39DF               	andlw	223
  2762  0358  0086               	movwf	6	;volatile
  2763                           
  2764                           ;SSD.c: 111:             break;
  2765  0359  2B6D               	goto	l177
  2766  035A                     l1516:	
  2767  035A  0872               	movf	SSD_Disable@s,w
  2768  035B  00F0               	movwf	??_SSD_Disable
  2769  035C  01F1               	clrf	??_SSD_Disable+1
  2770                           
  2771                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2772                           ; Switch size 1, requested type "simple"
  2773                           ; Number of cases is 1, Range of values is 0 to 0
  2774                           ; switch strategies available:
  2775                           ; Name         Instructions Cycles
  2776                           ; simple_byte            4     3 (average)
  2777                           ; direct_byte           11     8 (fixed)
  2778                           ; jumptable            260     6 (fixed)
  2779                           ;	Chosen strategy is simple_byte
  2780  035D  0871               	movf	??_SSD_Disable+1,w
  2781  035E  3A00               	xorlw	0	; case 0
  2782  035F  1903               	skipnz
  2783  0360  2B62               	goto	l1924
  2784  0361  2B6D               	goto	l177
  2785  0362                     l1924:	
  2786                           
  2787                           ; Switch size 1, requested type "simple"
  2788                           ; Number of cases is 3, Range of values is 0 to 2
  2789                           ; switch strategies available:
  2790                           ; Name         Instructions Cycles
  2791                           ; simple_byte           10     6 (average)
  2792                           ; direct_byte           17     8 (fixed)
  2793                           ; jumptable            260     6 (fixed)
  2794                           ;	Chosen strategy is simple_byte
  2795  0362  0870               	movf	??_SSD_Disable,w
  2796  0363  3A00               	xorlw	0	; case 0
  2797  0364  1903               	skipnz
  2798  0365  2B48               	goto	l1510
  2799  0366  3A01               	xorlw	1	; case 1
  2800  0367  1903               	skipnz
  2801  0368  2B4E               	goto	l1512
  2802  0369  3A03               	xorlw	3	; case 2
  2803  036A  1903               	skipnz
  2804  036B  2B54               	goto	l1514
  2805  036C  2B6D               	goto	l177
  2806  036D                     l177:	
  2807  036D  0008               	return
  2808  036E                     __end_of_SSD_Disable:	
  2809                           
  2810                           	psect	text15
  2811  02CB                     __ptext15:	
  2812 ;; *************** function _SSD_Data_write *****************
  2813 ;; Defined at:
  2814 ;;		line 137 in file "SSD.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;		None
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;		None
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  1    wreg      void 
  2821 ;; Registers used:
  2822 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2828 ;;      Params:         0       0       0       0       0
  2829 ;;      Locals:         0       0       0       0       0
  2830 ;;      Temps:          0       0       0       0       0
  2831 ;;      Totals:         0       0       0       0       0
  2832 ;;Total ram usage:        0 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; This function calls:
  2835 ;;		Nothing
  2836 ;; This function is called by:
  2837 ;;		_SSD_Update
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           
  2842                           ;psect for function _SSD_Data_write
  2843  02CB                     _SSD_Data_write:	
  2844  02CB                     l1522:	
  2845                           ;incstack = 0
  2846                           ; Regs used in _SSD_Data_write: [wreg-fsr0h+status,2+status,0]
  2847                           
  2848                           
  2849                           ;SSD.c: 140:     (((PORTD))=(SSD_LOT_ARR[Buffer[currentSSD]]));
  2850  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  2851  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  2852  02CD  0832               	movf	_currentSSD,w
  2853  02CE  3E29               	addlw	(low (_Buffer| 0))& (0+255)
  2854  02CF  0084               	movwf	4
  2855  02D0  1383               	bcf	3,7	;select IRP bank0
  2856  02D1  0800               	movf	0,w
  2857  02D2  3E33               	addlw	(low (_SSD_LOT_ARR| 0))& (0+255)
  2858  02D3  0084               	movwf	4
  2859  02D4  0800               	movf	0,w
  2860  02D5  0088               	movwf	8	;volatile
  2861  02D6                     l189:	
  2862  02D6  0008               	return
  2863  02D7                     __end_of_SSD_Data_write:	
  2864                           
  2865                           	psect	text16
  2866  04D4                     __ptext16:	
  2867 ;; *************** function _SSD_Init *****************
  2868 ;; Defined at:
  2869 ;;		line 51 in file "SSD.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;		None
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;		None
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      void 
  2876 ;; Registers used:
  2877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2883 ;;      Params:         0       0       0       0       0
  2884 ;;      Locals:         0       0       0       0       0
  2885 ;;      Temps:          1       0       0       0       0
  2886 ;;      Totals:         1       0       0       0       0
  2887 ;;Total ram usage:        1 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    1
  2890 ;; This function calls:
  2891 ;;		_GPIO_Init_Pin
  2892 ;;		_GPIO_Init_Port
  2893 ;;		_SSD_Set_Symbol
  2894 ;; This function is called by:
  2895 ;;		_main
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           
  2900                           ;psect for function _SSD_Init
  2901  04D4                     _SSD_Init:	
  2902  04D4                     l1604:	
  2903                           ;incstack = 0
  2904                           ; Regs used in _SSD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2905                           
  2906                           
  2907                           ;SSD.c: 54:     GPIO_Init_Port(&(TRISD),(0));
  2908  04D4  3088               	movlw	136
  2909  04D5  00F0               	movwf	GPIO_Init_Port@DirRegAddress
  2910  04D6  3000               	movlw	0
  2911  04D7  00F1               	movwf	GPIO_Init_Port@DirRegAddress+1
  2912  04D8  01F2               	clrf	GPIO_Init_Port@dir
  2913  04D9  120A  118A  2484  120A  118A  	fcall	_GPIO_Init_Port
  2914                           
  2915                           ;SSD.c: 57:     GPIO_Init_Pin(&(TRISB),(7),(0));
  2916  04DE  3086               	movlw	134
  2917  04DF  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  2918  04E0  3000               	movlw	0
  2919  04E1  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  2920  04E2  3007               	movlw	7
  2921  04E3  00F8               	movwf	??_SSD_Init
  2922  04E4  0878               	movf	??_SSD_Init,w
  2923  04E5  00F2               	movwf	GPIO_Init_Pin@pin_number
  2924  04E6  01F3               	clrf	GPIO_Init_Pin@dir
  2925  04E7  120A  118A  2531  120A  118A  	fcall	_GPIO_Init_Pin
  2926  04EC                     l1606:	
  2927                           
  2928                           ;SSD.c: 58:     (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_OFF<<(7)));
  2929  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  2930  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  2931  04EE  0806               	movf	6,w	;volatile
  2932  04EF  397F               	andlw	127
  2933  04F0  0086               	movwf	6	;volatile
  2934  04F1                     l1608:	
  2935                           
  2936                           ;SSD.c: 59:     SSD_Set_Symbol(SSD_NULL,SSD_FIRST);
  2937  04F1  01F0               	clrf	SSD_Set_Symbol@index
  2938  04F2  3003               	movlw	3
  2939  04F3  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
  2940  04F8                     l1610:	
  2941                           
  2942                           ;SSD.c: 61:     GPIO_Init_Pin(&(TRISB),(6),(0));
  2943  04F8  3086               	movlw	134
  2944  04F9  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  2945  04FA  3000               	movlw	0
  2946  04FB  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  2947  04FC  3006               	movlw	6
  2948  04FD  00F8               	movwf	??_SSD_Init
  2949  04FE  0878               	movf	??_SSD_Init,w
  2950  04FF  00F2               	movwf	GPIO_Init_Pin@pin_number
  2951  0500  01F3               	clrf	GPIO_Init_Pin@dir
  2952  0501  120A  118A  2531  120A  118A  	fcall	_GPIO_Init_Pin
  2953  0506                     l1612:	
  2954                           
  2955                           ;SSD.c: 62:     (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_OFF<<(6)));
  2956  0506  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0507  1303               	bcf	3,6	;RP1=0, select bank0
  2958  0508  0806               	movf	6,w	;volatile
  2959  0509  39BF               	andlw	191
  2960  050A  0086               	movwf	6	;volatile
  2961                           
  2962                           ;SSD.c: 63:     SSD_Set_Symbol(SSD_NULL,SSD_SECOND);
  2963  050B  01F0               	clrf	SSD_Set_Symbol@index
  2964  050C  0AF0               	incf	SSD_Set_Symbol@index,f
  2965  050D  3003               	movlw	3
  2966  050E  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
  2967                           
  2968                           ;SSD.c: 65:     GPIO_Init_Pin(&(TRISB),(5),(0));
  2969  0513  3086               	movlw	134
  2970  0514  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  2971  0515  3000               	movlw	0
  2972  0516  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  2973  0517  3005               	movlw	5
  2974  0518  00F8               	movwf	??_SSD_Init
  2975  0519  0878               	movf	??_SSD_Init,w
  2976  051A  00F2               	movwf	GPIO_Init_Pin@pin_number
  2977  051B  01F3               	clrf	GPIO_Init_Pin@dir
  2978  051C  120A  118A  2531  120A  118A  	fcall	_GPIO_Init_Pin
  2979  0521                     l1614:	
  2980                           
  2981                           ;SSD.c: 66:     (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_OFF<<(5)));
  2982  0521  1283               	bcf	3,5	;RP0=0, select bank0
  2983  0522  1303               	bcf	3,6	;RP1=0, select bank0
  2984  0523  0806               	movf	6,w	;volatile
  2985  0524  39DF               	andlw	223
  2986  0525  0086               	movwf	6	;volatile
  2987  0526                     l1616:	
  2988                           
  2989                           ;SSD.c: 67:     SSD_Set_Symbol(SSD_NULL,SSD_THIRD);
  2990  0526  3002               	movlw	2
  2991  0527  00F8               	movwf	??_SSD_Init
  2992  0528  0878               	movf	??_SSD_Init,w
  2993  0529  00F0               	movwf	SSD_Set_Symbol@index
  2994  052A  3003               	movlw	3
  2995  052B  120A  118A  22C1  120A  118A  	fcall	_SSD_Set_Symbol
  2996  0530                     l158:	
  2997  0530  0008               	return
  2998  0531                     __end_of_SSD_Init:	
  2999                           
  3000                           	psect	text17
  3001  02C1                     __ptext17:	
  3002 ;; *************** function _SSD_Set_Symbol *****************
  3003 ;; Defined at:
  3004 ;;		line 69 in file "SSD.c"
  3005 ;; Parameters:    Size  Location     Type
  3006 ;;  symbol          1    wreg     enum E859
  3007 ;;  index           1    0[COMMON] enum E865
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  symbol          1    2[COMMON] enum E859
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  1    wreg      void 
  3012 ;; Registers used:
  3013 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3019 ;;      Params:         1       0       0       0       0
  3020 ;;      Locals:         1       0       0       0       0
  3021 ;;      Temps:          1       0       0       0       0
  3022 ;;      Totals:         3       0       0       0       0
  3023 ;;Total ram usage:        3 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; This function calls:
  3026 ;;		Nothing
  3027 ;; This function is called by:
  3028 ;;		_main
  3029 ;;		_SSD_Init
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           
  3034                           ;psect for function _SSD_Set_Symbol
  3035  02C1                     _SSD_Set_Symbol:	
  3036                           
  3037                           ;incstack = 0
  3038                           ; Regs used in _SSD_Set_Symbol: [wreg-fsr0h+status,2+status,0]
  3039                           ;SSD_Set_Symbol@symbol stored from wreg
  3040  02C1  00F2               	movwf	SSD_Set_Symbol@symbol
  3041  02C2                     l1430:	
  3042                           
  3043                           ;SSD.c: 69: void SSD_Set_Symbol(SSD_Symbol_t symbol,SSD_t index);SSD.c: 70: {;SSD.c: 72:
      +                               Buffer[index] = symbol;
  3044  02C2  0872               	movf	SSD_Set_Symbol@symbol,w
  3045  02C3  00F1               	movwf	??_SSD_Set_Symbol
  3046  02C4  0870               	movf	SSD_Set_Symbol@index,w
  3047  02C5  3E29               	addlw	(low (_Buffer| 0))& (0+255)
  3048  02C6  0084               	movwf	4
  3049  02C7  0871               	movf	??_SSD_Set_Symbol,w
  3050  02C8  1383               	bcf	3,7	;select IRP bank0
  3051  02C9  0080               	movwf	0
  3052  02CA                     l161:	
  3053  02CA  0008               	return
  3054  02CB                     __end_of_SSD_Set_Symbol:	
  3055                           
  3056                           	psect	text18
  3057  0484                     __ptext18:	
  3058 ;; *************** function _GPIO_Init_Port *****************
  3059 ;; Defined at:
  3060 ;;		line 14 in file "GPIO.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  DirRegAddres    2    0[COMMON] PTR volatile unsigned ch
  3063 ;;		 -> TRISD(1), 
  3064 ;;  dir             1    2[COMMON] unsigned char 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  ret             1    0        unsigned char 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  1    wreg      unsigned char 
  3069 ;; Registers used:
  3070 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3076 ;;      Params:         3       0       0       0       0
  3077 ;;      Locals:         3       0       0       0       0
  3078 ;;      Temps:          1       0       0       0       0
  3079 ;;      Totals:         7       0       0       0       0
  3080 ;;Total ram usage:        7 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; This function calls:
  3083 ;;		Nothing
  3084 ;; This function is called by:
  3085 ;;		_SSD_Init
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           
  3090                           ;psect for function _GPIO_Init_Port
  3091  0484                     _GPIO_Init_Port:	
  3092  0484                     l1432:	
  3093                           ;incstack = 0
  3094                           ; Regs used in _GPIO_Init_Port: [wreg-fsr0h+status,2+status,0]
  3095                           
  3096  0484                     l1434:	
  3097                           
  3098                           ;GPIO.c: 18:     if(*DirRegAddress != (TRISA) && *DirRegAddress != (TRISB) &&
  3099  0484  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3100  0485  0084               	movwf	4
  3101  0486  1783               	bsf	3,7
  3102  0487  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3103  0488  1383               	bcf	3,7
  3104  0489  0800               	movf	0,w
  3105  048A  1683               	bsf	3,5	;RP0=1, select bank1
  3106  048B  1303               	bcf	3,6	;RP1=0, select bank1
  3107  048C  0605               	xorwf	5,w	;volatile
  3108  048D  1903               	skipnz
  3109  048E  2C90               	goto	u501
  3110  048F  2C91               	goto	u500
  3111  0490                     u501:	
  3112  0490  2CBE               	goto	l1446
  3113  0491                     u500:	
  3114  0491                     l1436:	
  3115  0491  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3116  0492  0084               	movwf	4
  3117  0493  1783               	bsf	3,7
  3118  0494  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3119  0495  1383               	bcf	3,7
  3120  0496  0800               	movf	0,w
  3121  0497  0606               	xorwf	6,w	;volatile
  3122  0498  1903               	skipnz
  3123  0499  2C9B               	goto	u511
  3124  049A  2C9C               	goto	u510
  3125  049B                     u511:	
  3126  049B  2CBE               	goto	l1446
  3127  049C                     u510:	
  3128  049C                     l1438:	
  3129  049C  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3130  049D  0084               	movwf	4
  3131  049E  1783               	bsf	3,7
  3132  049F  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3133  04A0  1383               	bcf	3,7
  3134  04A1  0800               	movf	0,w
  3135  04A2  0607               	xorwf	7,w	;volatile
  3136  04A3  1903               	skipnz
  3137  04A4  2CA6               	goto	u521
  3138  04A5  2CA7               	goto	u520
  3139  04A6                     u521:	
  3140  04A6  2CBE               	goto	l1446
  3141  04A7                     u520:	
  3142  04A7                     l1440:	
  3143  04A7  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3144  04A8  0084               	movwf	4
  3145  04A9  1783               	bsf	3,7
  3146  04AA  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3147  04AB  1383               	bcf	3,7
  3148  04AC  0800               	movf	0,w
  3149  04AD  0608               	xorwf	8,w	;volatile
  3150  04AE  1903               	skipnz
  3151  04AF  2CB1               	goto	u531
  3152  04B0  2CB2               	goto	u530
  3153  04B1                     u531:	
  3154  04B1  2CBE               	goto	l1446
  3155  04B2                     u530:	
  3156  04B2                     l1442:	
  3157  04B2  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3158  04B3  0084               	movwf	4
  3159  04B4  1783               	bsf	3,7
  3160  04B5  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3161  04B6  1383               	bcf	3,7
  3162  04B7  0800               	movf	0,w
  3163  04B8  0609               	xorwf	9,w	;volatile
  3164  04B9  1903               	skipnz
  3165  04BA  2CBC               	goto	u541
  3166  04BB  2CBD               	goto	u540
  3167  04BC                     u541:	
  3168  04BC  2CBE               	goto	l1446
  3169  04BD                     u540:	
  3170  04BD                     l1444:	
  3171                           
  3172                           ;GPIO.c: 24:     }
  3173  04BD  2CD3               	goto	l50
  3174  04BE                     l1446:	
  3175                           
  3176                           ;GPIO.c: 26:     {;GPIO.c: 27:         ((*DirRegAddress)=(dir)?(~0):(0));
  3177  04BE  0872               	movf	GPIO_Init_Port@dir,w
  3178  04BF  1D03               	btfss	3,2
  3179  04C0  2CC2               	goto	u551
  3180  04C1  2CC3               	goto	u550
  3181  04C2                     u551:	
  3182  04C2  2CC6               	goto	l1450
  3183  04C3                     u550:	
  3184  04C3                     l1448:	
  3185  04C3  01F5               	clrf	_GPIO_Init_Port$90
  3186  04C4  01F6               	clrf	_GPIO_Init_Port$90+1
  3187  04C5  2CCA               	goto	l1452
  3188  04C6                     l1450:	
  3189  04C6  30FF               	movlw	255
  3190  04C7  00F5               	movwf	_GPIO_Init_Port$90
  3191  04C8  30FF               	movlw	255
  3192  04C9  00F6               	movwf	_GPIO_Init_Port$90+1
  3193  04CA                     l1452:	
  3194  04CA  0875               	movf	_GPIO_Init_Port$90,w
  3195  04CB  00F3               	movwf	??_GPIO_Init_Port
  3196  04CC  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3197  04CD  0084               	movwf	4
  3198  04CE  1783               	bsf	3,7
  3199  04CF  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3200  04D0  1383               	bcf	3,7
  3201  04D1  0873               	movf	??_GPIO_Init_Port,w
  3202  04D2  0080               	movwf	0
  3203  04D3                     l50:	
  3204  04D3  0008               	return
  3205  04D4                     __end_of_GPIO_Init_Port:	
  3206                           
  3207                           	psect	text19
  3208  0531                     __ptext19:	
  3209 ;; *************** function _GPIO_Init_Pin *****************
  3210 ;; Defined at:
  3211 ;;		line 34 in file "GPIO.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;  DirRegAddres    2    0[COMMON] PTR volatile unsigned ch
  3214 ;;		 -> TRISB(1), 
  3215 ;;  pin_number      1    2[COMMON] unsigned char 
  3216 ;;  dir             1    3[COMMON] unsigned char 
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  ret             1    7[COMMON] unsigned char 
  3219 ;; Return value:  Size  Location     Type
  3220 ;;                  1    wreg      unsigned char 
  3221 ;; Registers used:
  3222 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3228 ;;      Params:         4       0       0       0       0
  3229 ;;      Locals:         1       0       0       0       0
  3230 ;;      Temps:          3       0       0       0       0
  3231 ;;      Totals:         8       0       0       0       0
  3232 ;;Total ram usage:        8 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; This function calls:
  3235 ;;		Nothing
  3236 ;; This function is called by:
  3237 ;;		_SW_Init
  3238 ;;		_LED_Init
  3239 ;;		_SSD_Init
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           
  3244                           ;psect for function _GPIO_Init_Pin
  3245  0531                     _GPIO_Init_Pin:	
  3246  0531                     l1390:	
  3247                           ;incstack = 0
  3248                           ; Regs used in _GPIO_Init_Pin: [wreg-fsr0h+status,2+status,0]
  3249                           
  3250                           
  3251                           ;GPIO.c: 34: uint8 GPIO_Init_Pin(volatile uint8 *DirRegAddress ,uint8 pin_number,uint8 d
      +                          ir );GPIO.c: 35: {;GPIO.c: 36:     uint8 ret = 1;
  3252  0531  01F7               	clrf	GPIO_Init_Pin@ret
  3253  0532  0AF7               	incf	GPIO_Init_Pin@ret,f
  3254  0533                     l1392:	
  3255                           
  3256                           ;GPIO.c: 38:     if(*DirRegAddress != (TRISA) && *DirRegAddress != (TRISB) &&
  3257  0533  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3258  0534  0084               	movwf	4
  3259  0535  1783               	bsf	3,7
  3260  0536  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3261  0537  1383               	bcf	3,7
  3262  0538  0800               	movf	0,w
  3263  0539  1683               	bsf	3,5	;RP0=1, select bank1
  3264  053A  1303               	bcf	3,6	;RP1=0, select bank1
  3265  053B  0605               	xorwf	5,w	;volatile
  3266  053C  1903               	skipnz
  3267  053D  2D3F               	goto	u421
  3268  053E  2D40               	goto	u420
  3269  053F                     u421:	
  3270  053F  2D6E               	goto	l1404
  3271  0540                     u420:	
  3272  0540                     l1394:	
  3273  0540  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3274  0541  0084               	movwf	4
  3275  0542  1783               	bsf	3,7
  3276  0543  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3277  0544  1383               	bcf	3,7
  3278  0545  0800               	movf	0,w
  3279  0546  0606               	xorwf	6,w	;volatile
  3280  0547  1903               	skipnz
  3281  0548  2D4A               	goto	u431
  3282  0549  2D4B               	goto	u430
  3283  054A                     u431:	
  3284  054A  2D6E               	goto	l1404
  3285  054B                     u430:	
  3286  054B                     l1396:	
  3287  054B  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3288  054C  0084               	movwf	4
  3289  054D  1783               	bsf	3,7
  3290  054E  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3291  054F  1383               	bcf	3,7
  3292  0550  0800               	movf	0,w
  3293  0551  0607               	xorwf	7,w	;volatile
  3294  0552  1903               	skipnz
  3295  0553  2D55               	goto	u441
  3296  0554  2D56               	goto	u440
  3297  0555                     u441:	
  3298  0555  2D6E               	goto	l1404
  3299  0556                     u440:	
  3300  0556                     l1398:	
  3301  0556  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3302  0557  0084               	movwf	4
  3303  0558  1783               	bsf	3,7
  3304  0559  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3305  055A  1383               	bcf	3,7
  3306  055B  0800               	movf	0,w
  3307  055C  0608               	xorwf	8,w	;volatile
  3308  055D  1903               	skipnz
  3309  055E  2D60               	goto	u451
  3310  055F  2D61               	goto	u450
  3311  0560                     u451:	
  3312  0560  2D6E               	goto	l1404
  3313  0561                     u450:	
  3314  0561                     l1400:	
  3315  0561  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3316  0562  0084               	movwf	4
  3317  0563  1783               	bsf	3,7
  3318  0564  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3319  0565  1383               	bcf	3,7
  3320  0566  0800               	movf	0,w
  3321  0567  0609               	xorwf	9,w	;volatile
  3322  0568  1903               	skipnz
  3323  0569  2D6B               	goto	u461
  3324  056A  2D6C               	goto	u460
  3325  056B                     u461:	
  3326  056B  2D6E               	goto	l1404
  3327  056C                     u460:	
  3328  056C                     l1402:	
  3329                           
  3330                           ;GPIO.c: 41:     {;GPIO.c: 43:        ret = 0;
  3331  056C  01F7               	clrf	GPIO_Init_Pin@ret
  3332                           
  3333                           ;GPIO.c: 44:     }
  3334  056D  2D91               	goto	l1406
  3335  056E                     l1404:	
  3336                           
  3337                           ;GPIO.c: 46:     {;GPIO.c: 47:         ((*DirRegAddress)=(*DirRegAddress & ~(1<<pin_numb
      +                          er))|(dir<<pin_number));
  3338  056E  0873               	movf	GPIO_Init_Pin@dir,w
  3339  056F  00F4               	movwf	??_GPIO_Init_Pin
  3340  0570  0A72               	incf	GPIO_Init_Pin@pin_number,w
  3341  0571  2D74               	goto	u474
  3342  0572                     u475:	
  3343  0572  1003               	clrc
  3344  0573  0DF4               	rlf	??_GPIO_Init_Pin,f
  3345  0574                     u474:	
  3346  0574  3EFF               	addlw	-1
  3347  0575  1D03               	skipz
  3348  0576  2D72               	goto	u475
  3349  0577  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3350  0578  0084               	movwf	4
  3351  0579  1783               	bsf	3,7
  3352  057A  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3353  057B  1383               	bcf	3,7
  3354  057C  3001               	movlw	1
  3355  057D  00F5               	movwf	??_GPIO_Init_Pin+1
  3356  057E  0A72               	incf	GPIO_Init_Pin@pin_number,w
  3357  057F  2D82               	goto	u484
  3358  0580                     u485:	
  3359  0580  1003               	clrc
  3360  0581  0DF5               	rlf	??_GPIO_Init_Pin+1,f
  3361  0582                     u484:	
  3362  0582  3EFF               	addlw	-1
  3363  0583  1D03               	skipz
  3364  0584  2D80               	goto	u485
  3365  0585  0875               	movf	??_GPIO_Init_Pin+1,w
  3366  0586  3AFF               	xorlw	255
  3367  0587  0500               	andwf	0,w
  3368  0588  0474               	iorwf	??_GPIO_Init_Pin,w
  3369  0589  00F6               	movwf	??_GPIO_Init_Pin+2
  3370  058A  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3371  058B  0084               	movwf	4
  3372  058C  1783               	bsf	3,7
  3373  058D  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3374  058E  1383               	bcf	3,7
  3375  058F  0876               	movf	??_GPIO_Init_Pin+2,w
  3376  0590  0080               	movwf	0
  3377  0591                     l1406:	
  3378                           
  3379                           ;GPIO.c: 49:     return ret;
  3380  0591  0877               	movf	GPIO_Init_Pin@ret,w
  3381  0592                     l55:	
  3382  0592  0008               	return
  3383  0593                     __end_of_GPIO_Init_Pin:	
  3384  007E                     btemp	set	126	;btemp
  3385  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      3      27
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    GPIO_Init_Pin@DirRegAddress	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR1[1]), 

    GPIO_Init_Port@DirRegAddress	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR1[1]), 


Critical Paths under _main in COMMON

    _main->_VC_Init
    _VC_Update->_Switch_Event_Handler
    _Switch_Event_Handler->_SW_GetState
    _SW_GetState->___bmul
    _VC_Init->_LED_Init
    _LED_Init->_GPIO_Init_Pin
    _SW_Update->_SW_UpdateState
    _SW_UpdateState->___bmul
    _SW_Init->_GPIO_Init_Pin
    _SSD_Update->_SSD_Disable
    _SSD_Update->_SSD_Enable
    _SSD_Init->_GPIO_Init_Pin

Critical Paths under _main in BANK0

    _main->_VC_Init

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10101
                                              1 BANK0      2     2      0
                           _SSD_Init
                     _SSD_Set_Symbol
                         _SSD_Update
                            _SW_Init
                          _SW_Update
                        _VC_GetSpeed
                            _VC_Init
                          _VC_Update
 ---------------------------------------------------------------------------------
 (1) _VC_Update                                            1     1      0     926
                                             10 COMMON     1     1      0
               _Switch_Event_Handler
 ---------------------------------------------------------------------------------
 (2) _Switch_Event_Handler                                 2     2      0     926
                                              8 COMMON     2     2      0
                       _LED_SetState
                        _SW_GetState
 ---------------------------------------------------------------------------------
 (3) _SW_GetState                                          4     4      0     502
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _VC_Init                                              2     2      0    2459
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                           _LED_Init
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             5     4      1    2437
                                              8 COMMON     5     4      1
                      _GPIO_Init_Pin
                       _LED_SetState
 ---------------------------------------------------------------------------------
 (3) _LED_SetState                                         4     3      1     424
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _VC_GetSpeed                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SW_Update                                            2     2      0     742
                                              8 COMMON     2     2      0
                     _SW_UpdateState
 ---------------------------------------------------------------------------------
 (2) _SW_UpdateState                                       4     4      0     742
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     456
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _SW_Init                                              1     1      0    1840
                                              8 COMMON     1     1      0
                      _GPIO_Init_Pin
 ---------------------------------------------------------------------------------
 (1) _SSD_Update                                           1     1      0      44
                                              3 COMMON     1     1      0
                     _SSD_Data_write
                        _SSD_Disable
                         _SSD_Enable
 ---------------------------------------------------------------------------------
 (2) _SSD_Enable                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SSD_Disable                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SSD_Data_write                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SSD_Init                                             1     1      0    3134
                                              8 COMMON     1     1      0
                      _GPIO_Init_Pin
                     _GPIO_Init_Port
                     _SSD_Set_Symbol
 ---------------------------------------------------------------------------------
 (1) _SSD_Set_Symbol                                       3     2      1     956
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _GPIO_Init_Port                                       7     4      3     338
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (3) _GPIO_Init_Pin                                        8     4      4    1840
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SSD_Init
     _GPIO_Init_Pin
     _GPIO_Init_Port
     _SSD_Set_Symbol
   _SSD_Set_Symbol
   _SSD_Update
     _SSD_Data_write
     _SSD_Disable
     _SSD_Enable
   _SW_Init
     _GPIO_Init_Pin
   _SW_Update
     _SW_UpdateState
       ___bmul
   _VC_GetSpeed
   _VC_Init
     _LED_Init
       _GPIO_Init_Pin
       _LED_SetState
   _VC_Update
     _Switch_Event_Handler
       _LED_SetState
       _SW_GetState
         ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      3      1B       5       33.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      29      12        0.0%
ABS                  0      0      29       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jan 15 20:13:07 2020

       __end_of_SSD_Data_write 02D7                     _SSD_Update 0399                 ___bmul@product 0072  
                  _VC_GetSpeed 02B0                    __CFG_CP$OFF 0000            __end_of_SW_GetState 02FE  
                           l50 04D3                             l55 0592                             l71 02FD  
                           l91 07D4                             l68 0438                             l77 0483  
                           fsr 0004                            l121 0345                            l107 03FA  
                          l204 02E9                            l213 0311                            l207 02B3  
                          l161 02CA                            l236 06DB                            l158 0530  
                          l167 03C7                            l177 036D                            l186 0398  
                          l348 0326                            l189 02D6                            u400 0318  
                          u401 0317                            u410 0325                            u411 0324  
                          u420 0540                            u500 0491                            u421 053F  
                          u501 0490                            u430 054B                            u510 049C  
                          u431 054A                            u511 049B                            u440 0556  
                          u520 04A7                            u600 0757                            u441 0555  
                          u521 04A6                            u601 0756                            u450 0561  
                          u530 04B2                            u610 0769                   __CFG_CPD$OFF 0000  
                          u451 0560                            u531 04B1                            u611 0768  
                          u460 056C                            u540 04BD                            u620 078D  
                          u700 069B                            u461 056B                            u541 04BC  
                          u621 078C                            u701 069A                            u550 04C3  
                          u630 079F                            u710 06AA                            u551 04C2  
                          u631 079E                            u711 06A9                            u560 06F0  
                          u720 0445                            u640 03F0                            u561 06EF  
                          u721 0444                            u641 03EF                            u474 0574  
                          u570 0702                            u650 0637                            u475 0572  
                          u571 0701                            u651 0636                            u484 0582  
                          u580 0723                            u660 063F                            u740 030A  
                          u485 0580                            u581 0722                            u661 063E  
                          u741 0309                            u750 03A5                            u590 0735  
                          u670 0665                            u751 03A4                            u591 0734  
                          u735 0473                            u495 032C                            u671 0664  
                          u760 03B9                            u680 066D                            u761 03B8  
                          u681 066C                            u690 0693                            u691 0692  
                          u787 05A9                            fsr0 0004                            indf 0000  
                 __CFG_FOSC$HS 0000                   __CFG_LVP$OFF 0000                           l1400 0561  
                         l1402 056C                           l1410 02EB                           l1404 056E  
                         l1420 0329                           l1500 03F0                           l1412 02EB  
                         l1406 0591                           l1430 02C2                           l1510 0348  
                         l1414 02FC                           l1440 04A7                           l1432 0484  
                         l1512 034E                           l1424 0338                           l1450 04C6  
                         l1442 04B2                           l1434 0484                           l1610 04F8  
                         l1522 02CB                           l1514 0354                           l1530 037E  
                         l1418 0328                           l1452 04CA                           l1444 04BD  
                         l1436 0491                           l1612 0506                           l1604 04D4  
                         l1516 035A                           l1508 0347                           l1532 0385  
                         l1524 036F                           l1380 0318                           l1460 06F0  
                         l1620 02DE                           l1540 0637                           l1700 05A3  
                         l1390 0531                           l1438 049C                           l1446 04BE  
                         l1614 0521                           l1606 04EC                           l1526 0370  
                         l1630 040C                           l1382 031C                           l1470 0745  
                         l1462 0702                           l1622 02E5                           l1550 064A  
                         l1710 05EE                           l1702 05AD                           l1392 0533  
                         l1448 04C3                           l1616 0526                           l1608 04F1  
                         l1528 0377                           l1640 0431                           l1632 040E  
                         l1624 03FB                           l1384 031E                           l1376 0313  
                         l1480 079F                           l1472 0757                           l1464 0711  
                         l1456 06DD                           l1560 0673                           l1544 0640  
                         l1552 065A                           l1704 05B2                           l1394 0540  
                         l1642 0434                           l1634 041E                           l1626 0407  
                         l1386 0325                           l1378 0314                           l1474 0769  
                         l1466 0723                           l1458 06DE                           l1650 0446  
                         l1490 03C9                           l1618 02DA                           l1570 069B  
                         l1554 0665                           l1546 0645                           l1538 062C  
                         l1706 05B8                           l1714 060A                           l1396 054B  
                         l1644 0436                           l1636 0420                           l1628 040A  
                         l1476 077B                           l1468 0735                           l1484 07B1  
                         l1660 0464                           l1652 0447                           l1492 03CA  
                         l1572 06A1                           l1564 0678                           l1708 05D2  
                         l1716 0623                           l1398 0556                           l1638 0422  
                         l1478 078D                           l1662 046A                           l1654 0450  
                         l1646 0439                           l1494 03DC                           l1590 06D4  
                         l1582 06B5                           l1558 066E                           l1566 0688  
                         l1910 0652                           l1680 0399                           l1920 07C6  
                         l1664 0470                           l1656 0456                           l1496 03DE  
                         l1584 06C5                           l1576 06AB                           l1568 0693  
                         l1912 0680                           l1672 030B                           l1922 038D  
                         l1690 03B3                           l1666 047D                           l1658 045C  
                         l1498 03EB                           l1914 06BD                           l1578 06B0  
                         l1586 06C7                           l1674 030C                           l1924 0362  
                         l1692 03B9                           l1684 03A6                           l1676 02B0  
                         l1916 03E6                           l1588 06D0                           l1668 02FE  
                         l1908 0618                           l1694 03BA                           l1686 03A7  
                         l1918 0340                           l1696 03BF                           l1688 03AD  
                         l1698 0593                   __CFG_WRT$OFF 0000                           _main 0593  
                         btemp 007E                __end_of_VC_Init 02EA                           start 0000  
              __end_of_SW_Init 0439            _pressure_sw_counter 002D              ___bmul@multiplier 0073  
                _GPIO_Init_Pin 0531                ?_SSD_Data_write 0070                  ?_LED_SetState 0070  
               _SSD_Set_Symbol 02C1               __end_of_LED_Init 03FB                          ?_main 0070  
                __CFG_WDTE$OFF 0000                          _PORTB 0006                          _PORTD 0008  
                        _TRISA 0085                          _TRISB 0086                          _TRISC 0087  
                        _TRISD 0088                          _TRISE 0089                    LED_Init@led 007C  
                  LED_Init@ret 007B              _GPIO_Init_Port$90 0075               __end_of_SSD_Init 0531  
               __CFG_BOREN$OFF 0000                          status 0003                          wtemp0 007E  
                 SSD_Disable@s 0072        __size_of_SW_UpdateState 00F9                    _SW_GetState 02EA  
           __size_of_VC_Update 0014                    ?_SSD_Enable 0070                 ?_GPIO_Init_Pin 0070  
              __initialization 07D5                   __end_of_main 062C         __end_of_SSD_Set_Symbol 02CB  
               _GPIO_Init_Port 0484                 ??_LED_SetState 0071                    ?_SSD_Update 0070  
                       ??_main 0039             __size_of_SW_Update 004B    GPIO_Init_Port@DirRegAddress 0070  
   GPIO_Init_Pin@DirRegAddress 0070                      ??_VC_Init 007D                      ??_SW_Init 0078  
                       _Buffer 0029                 __CFG_PWRTE$OFF 0000         __end_of_GPIO_Init_Port 04D4  
                       ___bmul 0312                ?_SSD_Set_Symbol 0070       SW_Update@SW_Time_Counter 0037  
                 VC_Init@speed 0038              __end_of_VC_Update 0312            __size_of_SSD_Enable 002B  
            LED_SetState@state 0070            __size_of_SSD_Update 002F        __end_of__initialization 07FC  
                    ?_LED_Init 0078                ??_GPIO_Init_Pin 0074               GPIO_Init_Pin@dir 0073  
            __end_of_SW_Update 0484               GPIO_Init_Pin@ret 0077                   ?_SSD_Disable 0070  
          ___bmul@multiplicand 0070                ?_GPIO_Init_Port 0070                 __pcstackCOMMON 0070  
                 __pidataBANK0 02B4                   ?_VC_GetSpeed 0070                      ?_SSD_Init 0070  
                SW_GetState@sw 0076  __size_of_Switch_Event_Handler 00B0           __end_of_LED_SetState 0346  
                   __pbssBANK0 0020                 _SW_UpdateState 06DC                     ??_LED_Init 0079  
             ??_SSD_Data_write 0070                     __pmaintext 0593                        ?___bmul 0070  
                   ??_SSD_Init 0078                        _VC_Init 02D7         __end_of_SW_UpdateState 07D5  
                      _SW_DATA 0020            SSD_Set_Symbol@index 0070                        _SW_Init 03FB  
                 ?_SW_GetState 0070                  LED_Init@state 0078                   ??_SSD_Enable 0070  
              __size_of___bmul 0015                   ??_SSD_Update 0073                     _currentSSD 0032  
                      __ptext1 02FE                        __ptext2 062C                        __ptext3 02EA  
                      __ptext4 02D7                        __ptext5 03C8                        __ptext6 0327  
                      __ptext7 02B0                        __ptext8 0439                        __ptext9 06DC  
           __end_of_SSD_Enable 0399                        clrloop0 02BA           end_of_initialization 07FC  
              ?_SW_UpdateState 0070             __end_of_SSD_Update 03C8               ??_SSD_Set_Symbol 0071  
         __size_of_SSD_Disable 0028           __size_of_VC_GetSpeed 0004          __size_of_LED_SetState 001F  
                    _VC_Update 02FE        GPIO_Init_Pin@pin_number 0072               ??_GPIO_Init_Port 0073  
            __size_of_LED_Init 0033              GPIO_Init_Port@dir 0072                      _SW_Update 0439  
               __end_of___bmul 0327                   _LED_SetState 0327                    SSD_Enable@s 0072  
            __size_of_SSD_Init 005D            start_initialization 07D5                     ?_VC_Update 0070  
        __end_of_GPIO_Init_Pin 0593   __end_of_Switch_Event_Handler 06DC                 SW_GetState@ret 0077  
                     ??___bmul 0071           __size_of_SW_GetState 0014                     ?_SW_Update 0070  
                  __pdataBANK0 0033                      ___latbits 0002                  __pcstackBANK0 0038  
                     ?_VC_Init 0070                       ?_SW_Init 0070               ??_SW_UpdateState 0074  
                  ??_VC_Update 007A               SW_UpdateState@sw 0077                       _LED_Init 03C8  
                    clear_ram0 02B9                    ??_SW_Update 0078        __size_of_SSD_Data_write 000C  
                     _SSD_Init 04D4           SSD_Set_Symbol@symbol 0072           _Switch_Event_Handler 062C  
             __size_of_VC_Init 0013               __size_of_SW_Init 003E                  ??_SSD_Disable 0070  
                ??_VC_GetSpeed 0070                LED_SetState@led 0073     SSD_Update@SSD_Time_Counter 0031  
        ?_Switch_Event_Handler 0070                       __ptext10 0312                       __ptext11 03FB  
                     __ptext12 0399                       __ptext13 036E                       __ptext14 0346  
                     __ptext15 02CB                       __ptext16 04D4                       __ptext17 02C1  
                     __ptext18 0484                       __ptext19 0531                  __size_of_main 0099  
          __end_of_SSD_Disable 036E        __size_of_SSD_Set_Symbol 000A       VC_Update@VC_TICK_COUNTER 002F  
          __end_of_VC_GetSpeed 02B4                  ??_SW_GetState 0074        __size_of_GPIO_Init_Port 0050  
               _SSD_Data_write 02CB                    _motor_speed 0030         ??_Switch_Event_Handler 0078  
       __size_of_GPIO_Init_Pin 0062                    _SSD_LOT_ARR 0033                    _SSD_Disable 0346  
                   _SSD_Enable 036E  
