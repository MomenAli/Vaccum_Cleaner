

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jan 15 01:50:12 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.10
    22                           ; Generated 31/07/2019 GMT
    23                           ; 
    24                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  001D                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  0086                     	;# 
   153  0087                     	;# 
   154  0088                     	;# 
   155  0089                     	;# 
   156  008C                     	;# 
   157  008D                     	;# 
   158  008E                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  010C                     	;# 
   170  010D                     	;# 
   171  010E                     	;# 
   172  010F                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  000E                     	;# 
   191  000F                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0013                     	;# 
   196  0014                     	;# 
   197  0015                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0017                     	;# 
   201  0018                     	;# 
   202  0019                     	;# 
   203  001A                     	;# 
   204  001B                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  001D                     	;# 
   208  001E                     	;# 
   209  001F                     	;# 
   210  0081                     	;# 
   211  0085                     	;# 
   212  0086                     	;# 
   213  0087                     	;# 
   214  0088                     	;# 
   215  0089                     	;# 
   216  008C                     	;# 
   217  008D                     	;# 
   218  008E                     	;# 
   219  0091                     	;# 
   220  0092                     	;# 
   221  0093                     	;# 
   222  0094                     	;# 
   223  0098                     	;# 
   224  0099                     	;# 
   225  009C                     	;# 
   226  009D                     	;# 
   227  009E                     	;# 
   228  009F                     	;# 
   229  010C                     	;# 
   230  010D                     	;# 
   231  010E                     	;# 
   232  010F                     	;# 
   233  018C                     	;# 
   234  018D                     	;# 
   235  0000                     	;# 
   236  0001                     	;# 
   237  0002                     	;# 
   238  0003                     	;# 
   239  0004                     	;# 
   240  0005                     	;# 
   241  0006                     	;# 
   242  0007                     	;# 
   243  0008                     	;# 
   244  0009                     	;# 
   245  000A                     	;# 
   246  000B                     	;# 
   247  000C                     	;# 
   248  000D                     	;# 
   249  000E                     	;# 
   250  000E                     	;# 
   251  000F                     	;# 
   252  0010                     	;# 
   253  0011                     	;# 
   254  0012                     	;# 
   255  0013                     	;# 
   256  0014                     	;# 
   257  0015                     	;# 
   258  0015                     	;# 
   259  0016                     	;# 
   260  0017                     	;# 
   261  0018                     	;# 
   262  0019                     	;# 
   263  001A                     	;# 
   264  001B                     	;# 
   265  001B                     	;# 
   266  001C                     	;# 
   267  001D                     	;# 
   268  001E                     	;# 
   269  001F                     	;# 
   270  0081                     	;# 
   271  0085                     	;# 
   272  0086                     	;# 
   273  0087                     	;# 
   274  0088                     	;# 
   275  0089                     	;# 
   276  008C                     	;# 
   277  008D                     	;# 
   278  008E                     	;# 
   279  0091                     	;# 
   280  0092                     	;# 
   281  0093                     	;# 
   282  0094                     	;# 
   283  0098                     	;# 
   284  0099                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  009F                     	;# 
   289  010C                     	;# 
   290  010D                     	;# 
   291  010E                     	;# 
   292  010F                     	;# 
   293  018C                     	;# 
   294  018D                     	;# 
   295  0000                     	;# 
   296  0001                     	;# 
   297  0002                     	;# 
   298  0003                     	;# 
   299  0004                     	;# 
   300  0005                     	;# 
   301  0006                     	;# 
   302  0007                     	;# 
   303  0008                     	;# 
   304  0009                     	;# 
   305  000A                     	;# 
   306  000B                     	;# 
   307  000C                     	;# 
   308  000D                     	;# 
   309  000E                     	;# 
   310  000E                     	;# 
   311  000F                     	;# 
   312  0010                     	;# 
   313  0011                     	;# 
   314  0012                     	;# 
   315  0013                     	;# 
   316  0014                     	;# 
   317  0015                     	;# 
   318  0015                     	;# 
   319  0016                     	;# 
   320  0017                     	;# 
   321  0018                     	;# 
   322  0019                     	;# 
   323  001A                     	;# 
   324  001B                     	;# 
   325  001B                     	;# 
   326  001C                     	;# 
   327  001D                     	;# 
   328  001E                     	;# 
   329  001F                     	;# 
   330  0081                     	;# 
   331  0085                     	;# 
   332  0086                     	;# 
   333  0087                     	;# 
   334  0088                     	;# 
   335  0089                     	;# 
   336  008C                     	;# 
   337  008D                     	;# 
   338  008E                     	;# 
   339  0091                     	;# 
   340  0092                     	;# 
   341  0093                     	;# 
   342  0094                     	;# 
   343  0098                     	;# 
   344  0099                     	;# 
   345  009C                     	;# 
   346  009D                     	;# 
   347  009E                     	;# 
   348  009F                     	;# 
   349  010C                     	;# 
   350  010D                     	;# 
   351  010E                     	;# 
   352  010F                     	;# 
   353  018C                     	;# 
   354  018D                     	;# 
   355                           
   356                           	psect	idataCOMMON
   357  0552                     __pidataCOMMON:	
   358                           
   359                           ;initializer for SW_Update@SW_Time_Counter
   360  0552  340F               	retlw	15
   361  0006                     _PORTB	set	6
   362  0089                     _TRISE	set	137
   363  0088                     _TRISD	set	136
   364  0087                     _TRISC	set	135
   365  0085                     _TRISA	set	133
   366  0086                     _TRISB	set	134
   367                           
   368                           ; #config settings
   369  0000                     
   370                           	psect	cinit
   371  07ED                     start_initialization:	
   372  07ED                     __initialization:	
   373                           
   374                           ; Initialize objects allocated to COMMON
   375  07ED  120A  118A  2552  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   376  07F2  00FD               	movwf	__pdataCOMMON& (0+127)
   377                           
   378                           ; Clear objects allocated to BANK0
   379  07F3  01A0               	clrf	__pbssBANK0& (0+127)
   380  07F4  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   381  07F5  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   382  07F6  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   383  07F7  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   384  07F8  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   385  07F9  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   386  07FA  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   387  07FB  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   388  07FC                     end_of_initialization:	
   389                           ;End of C runtime variable initialization code
   390                           
   391  07FC                     __end_of__initialization:	
   392  07FC  0183               	clrf	3
   393  07FD  120A  118A  2DCE   	ljmp	_main	;jump to C main() function
   394                           
   395                           	psect	dataCOMMON
   396  007D                     __pdataCOMMON:	
   397  007D                     SW_Update@SW_Time_Counter:	
   398  007D                     	ds	1
   399                           
   400                           	psect	bssBANK0
   401  0020                     __pbssBANK0:	
   402  0020                     _SW_DATA:	
   403  0020                     	ds	9
   404                           
   405                           	psect	cstackCOMMON
   406  0070                     __pcstackCOMMON:	
   407  0070                     ?_SW_Init:	
   408  0070                     ?_SW_Update:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_SW_GetState:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_LED_SetState:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_SW_UpdateState:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_main:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_GPIO_Init_Pin:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?___bmul:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     LED_SetState@state:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ___bmul@multiplicand:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     GPIO_Init_Pin@DirRegAddress:	
   436                           ; 1 bytes @ 0x0
   437                           
   438                           
   439                           ; 2 bytes @ 0x0
   440  0070                     	ds	1
   441  0071                     ??_LED_SetState:	
   442  0071                     ??___bmul:	
   443                           ; 1 bytes @ 0x1
   444                           
   445                           
   446                           ; 1 bytes @ 0x1
   447  0071                     	ds	1
   448  0072                     GPIO_Init_Pin@pin_number:	
   449  0072                     ___bmul@product:	
   450                           ; 1 bytes @ 0x2
   451                           
   452                           
   453                           ; 1 bytes @ 0x2
   454  0072                     	ds	1
   455  0073                     GPIO_Init_Pin@dir:	
   456  0073                     LED_SetState@led:	
   457                           ; 1 bytes @ 0x3
   458                           
   459  0073                     ___bmul@multiplier:	
   460                           ; 1 bytes @ 0x3
   461                           
   462                           
   463                           ; 1 bytes @ 0x3
   464  0073                     	ds	1
   465  0074                     ??_SW_GetState:	
   466  0074                     ??_SW_UpdateState:	
   467                           ; 1 bytes @ 0x4
   468                           
   469  0074                     ??_GPIO_Init_Pin:	
   470                           ; 1 bytes @ 0x4
   471                           
   472                           
   473                           ; 1 bytes @ 0x4
   474  0074                     	ds	2
   475  0076                     SW_GetState@sw:	
   476                           
   477                           ; 1 bytes @ 0x6
   478  0076                     	ds	1
   479  0077                     GPIO_Init_Pin@ret:	
   480  0077                     SW_GetState@ret:	
   481                           ; 1 bytes @ 0x7
   482                           
   483  0077                     SW_UpdateState@sw:	
   484                           ; 1 bytes @ 0x7
   485                           
   486                           
   487                           ; 1 bytes @ 0x7
   488  0077                     	ds	1
   489  0078                     ??_SW_Init:	
   490  0078                     ?_LED_Init:	
   491                           ; 1 bytes @ 0x8
   492                           
   493  0078                     ??_SW_Update:	
   494                           ; 1 bytes @ 0x8
   495                           
   496  0078                     LED_Init@state:	
   497                           ; 1 bytes @ 0x8
   498                           
   499                           
   500                           ; 1 bytes @ 0x8
   501  0078                     	ds	1
   502  0079                     ??_LED_Init:	
   503                           
   504                           ; 1 bytes @ 0x9
   505  0079                     	ds	2
   506  007B                     LED_Init@ret:	
   507                           
   508                           ; 1 bytes @ 0xB
   509  007B                     	ds	1
   510  007C                     LED_Init@led:	
   511                           
   512                           ; 1 bytes @ 0xC
   513  007C                     	ds	1
   514                           
   515                           	psect	cstackBANK0
   516  0029                     __pcstackBANK0:	
   517  0029                     ??_main:	
   518                           
   519                           ; 1 bytes @ 0x0
   520  0029                     	ds	2
   521                           
   522                           	psect	maintext
   523  05CE                     __pmaintext:	
   524 ;;
   525 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   526 ;;
   527 ;; *************** function _main *****************
   528 ;; Defined at:
   529 ;;		line 16 in file "VaccumCleaner.c"
   530 ;; Parameters:    Size  Location     Type
   531 ;;		None
   532 ;; Auto vars:     Size  Location     Type
   533 ;;		None
   534 ;; Return value:  Size  Location     Type
   535 ;;                  1    wreg      void 
   536 ;; Registers used:
   537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   538 ;; Tracked objects:
   539 ;;		On entry : B00/0
   540 ;;		On exit  : 0/0
   541 ;;		Unchanged: 0/0
   542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   543 ;;      Params:         0       0       0       0       0
   544 ;;      Locals:         0       0       0       0       0
   545 ;;      Temps:          0       2       0       0       0
   546 ;;      Totals:         0       2       0       0       0
   547 ;;Total ram usage:        2 bytes
   548 ;; Hardware stack levels required when called:    3
   549 ;; This function calls:
   550 ;;		_LED_Init
   551 ;;		_LED_SetState
   552 ;;		_SW_GetState
   553 ;;		_SW_Init
   554 ;;		_SW_Update
   555 ;; This function is called by:
   556 ;;		Startup code after reset
   557 ;; This function uses a non-reentrant model
   558 ;;
   559                           
   560                           
   561                           ;psect for function _main
   562  05CE                     _main:	
   563  05CE                     l1128:	
   564                           ;incstack = 0
   565                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   566                           
   567                           
   568                           ;VaccumCleaner.c: 18:     SW_Init();
   569  05CE  120A  118A  2609  120A  118A  	fcall	_SW_Init
   570                           
   571                           ;VaccumCleaner.c: 19:     LED_Init(LED_ALARM,LED_ON);
   572  05D3  01F8               	clrf	LED_Init@state
   573  05D4  0AF8               	incf	LED_Init@state,f
   574  05D5  3000               	movlw	0
   575  05D6  120A  118A  259B  120A  118A  	fcall	_LED_Init
   576  05DB                     l1130:	
   577                           
   578                           ;VaccumCleaner.c: 21:     {;VaccumCleaner.c: 22:         _delay((unsigned long)((5)*(800
      +                          0000/4000.0)));
   579  05DB  300D               	movlw	13
   580  05DC  1283               	bcf	3,5	;RP0=0, select bank0
   581  05DD  1303               	bcf	3,6	;RP1=0, select bank0
   582  05DE  00AA               	movwf	??_main+1
   583  05DF  30FB               	movlw	251
   584  05E0  00A9               	movwf	??_main
   585  05E1                     u547:	
   586  05E1  0BA9               	decfsz	??_main,f
   587  05E2  2DE1               	goto	u547
   588  05E3  0BAA               	decfsz	??_main+1,f
   589  05E4  2DE1               	goto	u547
   590  05E5                     l1132:	
   591                           
   592                           ;VaccumCleaner.c: 23:         SW_Update();
   593  05E5  120A  118A  2647  120A  118A  	fcall	_SW_Update
   594  05EA                     l1134:	
   595                           
   596                           ;VaccumCleaner.c: 24:         if(SW_GetState(SW_PLUS) == SW_PRESSED)
   597  05EA  3000               	movlw	0
   598  05EB  120A  118A  2553  120A  118A  	fcall	_SW_GetState
   599  05F0  3A02               	xorlw	2
   600  05F1  1D03               	skipz
   601  05F2  2DF4               	goto	u521
   602  05F3  2DF5               	goto	u520
   603  05F4                     u521:	
   604  05F4  2DFD               	goto	l1138
   605  05F5                     u520:	
   606  05F5                     l1136:	
   607                           
   608                           ;VaccumCleaner.c: 25:         {;VaccumCleaner.c: 26:             LED_SetState(LED_ALARM,
      +                          LED_OFF);
   609  05F5  01F0               	clrf	LED_SetState@state
   610  05F6  3000               	movlw	0
   611  05F7  120A  118A  257C  120A  118A  	fcall	_LED_SetState
   612                           
   613                           ;VaccumCleaner.c: 27:         }
   614  05FC  2DDB               	goto	l1130
   615  05FD                     l1138:	
   616                           
   617                           ;VaccumCleaner.c: 29:         {;VaccumCleaner.c: 31:             LED_SetState(LED_ALARM,
      +                          LED_ON);
   618  05FD  01F0               	clrf	LED_SetState@state
   619  05FE  0AF0               	incf	LED_SetState@state,f
   620  05FF  3000               	movlw	0
   621  0600  120A  118A  257C  120A  118A  	fcall	_LED_SetState
   622  0605  2DDB               	goto	l1130
   623  0606  120A  118A  2800   	ljmp	start
   624  0609                     __end_of_main:	
   625                           
   626                           	psect	text1
   627  0647                     __ptext1:	
   628 ;; *************** function _SW_Update *****************
   629 ;; Defined at:
   630 ;;		line 83 in file "SW.c"
   631 ;; Parameters:    Size  Location     Type
   632 ;;		None
   633 ;; Auto vars:     Size  Location     Type
   634 ;;		None
   635 ;; Return value:  Size  Location     Type
   636 ;;                  1    wreg      void 
   637 ;; Registers used:
   638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   639 ;; Tracked objects:
   640 ;;		On entry : 0/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   644 ;;      Params:         0       0       0       0       0
   645 ;;      Locals:         0       0       0       0       0
   646 ;;      Temps:          2       0       0       0       0
   647 ;;      Totals:         2       0       0       0       0
   648 ;;Total ram usage:        2 bytes
   649 ;; Hardware stack levels used:    1
   650 ;; Hardware stack levels required when called:    2
   651 ;; This function calls:
   652 ;;		_SW_UpdateState
   653 ;; This function is called by:
   654 ;;		_main
   655 ;; This function uses a non-reentrant model
   656 ;;
   657                           
   658                           
   659                           ;psect for function _SW_Update
   660  0647                     _SW_Update:	
   661  0647                     l1098:	
   662                           ;incstack = 0
   663                           ; Regs used in _SW_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   664                           
   665                           
   666                           ;SW.c: 88:     static uint8 SW_Time_Counter = 15;;SW.c: 89:     SW_Time_Counter += (5);
   667  0647  3005               	movlw	5
   668  0648  00F8               	movwf	??_SW_Update
   669  0649  0878               	movf	??_SW_Update,w
   670  064A  07FD               	addwf	SW_Update@SW_Time_Counter,f
   671                           
   672                           ;SW.c: 91:     if(SW_Time_Counter != (20))
   673  064B  3014               	movlw	20
   674  064C  067D               	xorwf	SW_Update@SW_Time_Counter,w
   675  064D  1903               	btfsc	3,2
   676  064E  2E50               	goto	u501
   677  064F  2E51               	goto	u500
   678  0650                     u501:	
   679  0650  2E52               	goto	l1102
   680  0651                     u500:	
   681  0651  2E91               	goto	l68
   682  0652                     l1102:	
   683                           
   684                           ;SW.c: 95:     SW_Time_Counter = 0;
   685  0652  01FD               	clrf	SW_Update@SW_Time_Counter
   686  0653                     l1104:	
   687                           
   688                           ;SW.c: 97:     SW_DATA[SW_PLUS].samples[0] = SW_DATA[SW_PLUS].samples[1];
   689  0653  1283               	bcf	3,5	;RP0=0, select bank0
   690  0654  1303               	bcf	3,6	;RP1=0, select bank0
   691  0655  0821               	movf	_SW_DATA+1,w
   692  0656  00F8               	movwf	??_SW_Update
   693  0657  0878               	movf	??_SW_Update,w
   694  0658  00A0               	movwf	_SW_DATA
   695                           
   696                           ;SW.c: 98:     SW_DATA[SW_PLUS].samples[1] = (((PORTB) >> (0))& 1);
   697  0659  0806               	movf	6,w	;volatile
   698  065A  3901               	andlw	1
   699  065B  00F8               	movwf	??_SW_Update
   700  065C  0878               	movf	??_SW_Update,w
   701  065D  00A1               	movwf	_SW_DATA+1
   702  065E                     l1106:	
   703                           
   704                           ;SW.c: 100:     SW_UpdateState(SW_PLUS);
   705  065E  3000               	movlw	0
   706  065F  120A  118A  26F4  120A  118A  	fcall	_SW_UpdateState
   707  0664                     l1108:	
   708                           
   709                           ;SW.c: 102:     SW_DATA[SW_MINUS].samples[0] = SW_DATA[SW_MINUS].samples[1];
   710  0664  1283               	bcf	3,5	;RP0=0, select bank0
   711  0665  1303               	bcf	3,6	;RP1=0, select bank0
   712  0666  0824               	movf	_SW_DATA+4,w
   713  0667  00F8               	movwf	??_SW_Update
   714  0668  0878               	movf	??_SW_Update,w
   715  0669  00A3               	movwf	_SW_DATA+3
   716  066A                     l1110:	
   717                           
   718                           ;SW.c: 103:     SW_DATA[SW_MINUS].samples[1] = (((PORTB) >> (1))& 1);
   719  066A  0806               	movf	6,w	;volatile
   720  066B  00F8               	movwf	??_SW_Update
   721  066C  1003               	clrc
   722  066D  0C78               	rrf	??_SW_Update,w
   723  066E  3901               	andlw	1
   724  066F  00F9               	movwf	??_SW_Update+1
   725  0670  0879               	movf	??_SW_Update+1,w
   726  0671  00A4               	movwf	_SW_DATA+4
   727  0672                     l1112:	
   728                           
   729                           ;SW.c: 105:     SW_UpdateState(SW_MINUS);
   730  0672  3001               	movlw	1
   731  0673  120A  118A  26F4  120A  118A  	fcall	_SW_UpdateState
   732  0678                     l1114:	
   733                           
   734                           ;SW.c: 108:     SW_DATA[SW_PRESSURE].samples[0] = SW_DATA[SW_PRESSURE].samples[1];
   735  0678  1283               	bcf	3,5	;RP0=0, select bank0
   736  0679  1303               	bcf	3,6	;RP1=0, select bank0
   737  067A  0827               	movf	_SW_DATA+7,w
   738  067B  00F8               	movwf	??_SW_Update
   739  067C  0878               	movf	??_SW_Update,w
   740  067D  00A6               	movwf	_SW_DATA+6
   741  067E                     l1116:	
   742                           
   743                           ;SW.c: 109:     SW_DATA[SW_PRESSURE].samples[1] = (((PORTB) >> (2))& 1);
   744  067E  0806               	movf	6,w	;volatile
   745  067F  00F8               	movwf	??_SW_Update
   746  0680  3002               	movlw	2
   747  0681                     u515:	
   748  0681  1003               	clrc
   749  0682  0CF8               	rrf	??_SW_Update,f
   750  0683  3EFF               	addlw	-1
   751  0684  1D03               	skipz
   752  0685  2E81               	goto	u515
   753  0686  0878               	movf	??_SW_Update,w
   754  0687  3901               	andlw	1
   755  0688  00F9               	movwf	??_SW_Update+1
   756  0689  0879               	movf	??_SW_Update+1,w
   757  068A  00A7               	movwf	_SW_DATA+7
   758  068B                     l1118:	
   759                           
   760                           ;SW.c: 111:     SW_UpdateState(SW_PRESSURE);
   761  068B  3002               	movlw	2
   762  068C  120A  118A  26F4  120A  118A  	fcall	_SW_UpdateState
   763  0691                     l68:	
   764  0691  0008               	return
   765  0692                     __end_of_SW_Update:	
   766                           
   767                           	psect	text2
   768  06F4                     __ptext2:	
   769 ;; *************** function _SW_UpdateState *****************
   770 ;; Defined at:
   771 ;;		line 114 in file "SW.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;  sw              1    wreg     enum E859
   774 ;; Auto vars:     Size  Location     Type
   775 ;;  sw              1    7[COMMON] enum E859
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      void 
   778 ;; Registers used:
   779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   785 ;;      Params:         0       0       0       0       0
   786 ;;      Locals:         1       0       0       0       0
   787 ;;      Temps:          3       0       0       0       0
   788 ;;      Totals:         4       0       0       0       0
   789 ;;Total ram usage:        4 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    1
   792 ;; This function calls:
   793 ;;		___bmul
   794 ;; This function is called by:
   795 ;;		_SW_Update
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           
   800                           ;psect for function _SW_UpdateState
   801  06F4                     _SW_UpdateState:	
   802                           
   803                           ;incstack = 0
   804                           ; Regs used in _SW_UpdateState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   805                           ;SW_UpdateState@sw stored from wreg
   806  06F4  00F7               	movwf	SW_UpdateState@sw
   807  06F5                     l1024:	
   808                           
   809                           ;SW.c: 114: void SW_UpdateState(SW_t sw);SW.c: 115: {;SW.c: 131:     switch(SW_DATA[sw].
      +                          state)
   810  06F5  2FC9               	goto	l1052
   811  06F6                     l1026:	
   812                           
   813                           ;SW.c: 135:             if(SW_DATA[sw].samples[0] == (1) && SW_DATA[sw].samples[1] == (1
      +                          ))
   814  06F6  3003               	movlw	3
   815  06F7  00F4               	movwf	??_SW_UpdateState
   816  06F8  0874               	movf	??_SW_UpdateState,w
   817  06F9  00F0               	movwf	___bmul@multiplicand
   818  06FA  0877               	movf	SW_UpdateState@sw,w
   819  06FB  120A  118A  2567  120A  118A  	fcall	___bmul
   820  0700  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
   821  0701  0084               	movwf	4
   822  0702  1383               	bcf	3,7	;select IRP bank0
   823  0703  0300               	decf	0,w
   824  0704  1D03               	btfss	3,2
   825  0705  2F07               	goto	u411
   826  0706  2F08               	goto	u410
   827  0707                     u411:	
   828  0707  2FEC               	goto	l82
   829  0708                     u410:	
   830  0708                     l1028:	
   831  0708  3003               	movlw	3
   832  0709  00F4               	movwf	??_SW_UpdateState
   833  070A  0874               	movf	??_SW_UpdateState,w
   834  070B  00F0               	movwf	___bmul@multiplicand
   835  070C  0877               	movf	SW_UpdateState@sw,w
   836  070D  120A  118A  2567  120A  118A  	fcall	___bmul
   837  0712  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
   838  0713  0084               	movwf	4
   839  0714  1383               	bcf	3,7	;select IRP bank0
   840  0715  0300               	decf	0,w
   841  0716  1D03               	btfss	3,2
   842  0717  2F19               	goto	u421
   843  0718  2F1A               	goto	u420
   844  0719                     u421:	
   845  0719  2FEC               	goto	l82
   846  071A                     u420:	
   847  071A                     l1030:	
   848                           
   849                           ;SW.c: 136:                 SW_DATA[sw].state = SW_RELEASED;
   850  071A  3003               	movlw	3
   851  071B  00F4               	movwf	??_SW_UpdateState
   852  071C  0874               	movf	??_SW_UpdateState,w
   853  071D  00F0               	movwf	___bmul@multiplicand
   854  071E  0877               	movf	SW_UpdateState@sw,w
   855  071F  120A  118A  2567  120A  118A  	fcall	___bmul
   856  0724  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
   857  0725  0084               	movwf	4
   858  0726  1383               	bcf	3,7	;select IRP bank0
   859  0727  0180               	clrf	0
   860  0728  2FEC               	goto	l82
   861  0729                     l1032:	
   862                           
   863                           ;SW.c: 139:             if(SW_DATA[sw].samples[0] == (0) && SW_DATA[sw].samples[1] == (0
      +                          ))
   864  0729  3003               	movlw	3
   865  072A  00F4               	movwf	??_SW_UpdateState
   866  072B  0874               	movf	??_SW_UpdateState,w
   867  072C  00F0               	movwf	___bmul@multiplicand
   868  072D  0877               	movf	SW_UpdateState@sw,w
   869  072E  120A  118A  2567  120A  118A  	fcall	___bmul
   870  0733  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
   871  0734  0084               	movwf	4
   872  0735  1383               	bcf	3,7	;select IRP bank0
   873  0736  0800               	movf	0,w
   874  0737  1D03               	btfss	3,2
   875  0738  2F3A               	goto	u431
   876  0739  2F3B               	goto	u430
   877  073A                     u431:	
   878  073A  2FEC               	goto	l82
   879  073B                     u430:	
   880  073B                     l1034:	
   881  073B  3003               	movlw	3
   882  073C  00F4               	movwf	??_SW_UpdateState
   883  073D  0874               	movf	??_SW_UpdateState,w
   884  073E  00F0               	movwf	___bmul@multiplicand
   885  073F  0877               	movf	SW_UpdateState@sw,w
   886  0740  120A  118A  2567  120A  118A  	fcall	___bmul
   887  0745  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
   888  0746  0084               	movwf	4
   889  0747  1383               	bcf	3,7	;select IRP bank0
   890  0748  0800               	movf	0,w
   891  0749  1D03               	btfss	3,2
   892  074A  2F4C               	goto	u441
   893  074B  2F4D               	goto	u440
   894  074C                     u441:	
   895  074C  2FEC               	goto	l82
   896  074D                     u440:	
   897  074D                     l1036:	
   898                           
   899                           ;SW.c: 140:                 SW_DATA[sw].state = SW_PRE_PRESSED;
   900  074D  3003               	movlw	3
   901  074E  00F4               	movwf	??_SW_UpdateState
   902  074F  0874               	movf	??_SW_UpdateState,w
   903  0750  00F0               	movwf	___bmul@multiplicand
   904  0751  0877               	movf	SW_UpdateState@sw,w
   905  0752  120A  118A  2567  120A  118A  	fcall	___bmul
   906  0757  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
   907  0758  0084               	movwf	4
   908  0759  1383               	bcf	3,7	;select IRP bank0
   909  075A  0180               	clrf	0
   910  075B  0A80               	incf	0,f
   911  075C  2FEC               	goto	l82
   912  075D                     l1038:	
   913                           
   914                           ;SW.c: 143:             if(SW_DATA[sw].samples[0] == (0) && SW_DATA[sw].samples[1] == (0
      +                          ))
   915  075D  3003               	movlw	3
   916  075E  00F4               	movwf	??_SW_UpdateState
   917  075F  0874               	movf	??_SW_UpdateState,w
   918  0760  00F0               	movwf	___bmul@multiplicand
   919  0761  0877               	movf	SW_UpdateState@sw,w
   920  0762  120A  118A  2567  120A  118A  	fcall	___bmul
   921  0767  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
   922  0768  0084               	movwf	4
   923  0769  1383               	bcf	3,7	;select IRP bank0
   924  076A  0800               	movf	0,w
   925  076B  1D03               	btfss	3,2
   926  076C  2F6E               	goto	u451
   927  076D  2F6F               	goto	u450
   928  076E                     u451:	
   929  076E  2FEC               	goto	l82
   930  076F                     u450:	
   931  076F                     l1040:	
   932  076F  3003               	movlw	3
   933  0770  00F4               	movwf	??_SW_UpdateState
   934  0771  0874               	movf	??_SW_UpdateState,w
   935  0772  00F0               	movwf	___bmul@multiplicand
   936  0773  0877               	movf	SW_UpdateState@sw,w
   937  0774  120A  118A  2567  120A  118A  	fcall	___bmul
   938  0779  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
   939  077A  0084               	movwf	4
   940  077B  1383               	bcf	3,7	;select IRP bank0
   941  077C  0800               	movf	0,w
   942  077D  1D03               	btfss	3,2
   943  077E  2F80               	goto	u461
   944  077F  2F81               	goto	u460
   945  0780                     u461:	
   946  0780  2FEC               	goto	l82
   947  0781                     u460:	
   948  0781                     l1042:	
   949                           
   950                           ;SW.c: 144:                 SW_DATA[sw].state = SW_PRESSED;
   951  0781  3002               	movlw	2
   952  0782  00F4               	movwf	??_SW_UpdateState
   953  0783  3003               	movlw	3
   954  0784  00F5               	movwf	??_SW_UpdateState+1
   955  0785  0875               	movf	??_SW_UpdateState+1,w
   956  0786  00F0               	movwf	___bmul@multiplicand
   957  0787  0877               	movf	SW_UpdateState@sw,w
   958  0788  120A  118A  2567  120A  118A  	fcall	___bmul
   959  078D  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
   960  078E  0084               	movwf	4
   961  078F  0874               	movf	??_SW_UpdateState,w
   962  0790  1383               	bcf	3,7	;select IRP bank0
   963  0791  0080               	movwf	0
   964  0792  2FEC               	goto	l82
   965  0793                     l1044:	
   966                           
   967                           ;SW.c: 147:             if(SW_DATA[sw].samples[0] == (1) && SW_DATA[sw].samples[1] == (1
      +                          ))
   968  0793  3003               	movlw	3
   969  0794  00F4               	movwf	??_SW_UpdateState
   970  0795  0874               	movf	??_SW_UpdateState,w
   971  0796  00F0               	movwf	___bmul@multiplicand
   972  0797  0877               	movf	SW_UpdateState@sw,w
   973  0798  120A  118A  2567  120A  118A  	fcall	___bmul
   974  079D  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
   975  079E  0084               	movwf	4
   976  079F  1383               	bcf	3,7	;select IRP bank0
   977  07A0  0300               	decf	0,w
   978  07A1  1D03               	btfss	3,2
   979  07A2  2FA4               	goto	u471
   980  07A3  2FA5               	goto	u470
   981  07A4                     u471:	
   982  07A4  2FEC               	goto	l82
   983  07A5                     u470:	
   984  07A5                     l1046:	
   985  07A5  3003               	movlw	3
   986  07A6  00F4               	movwf	??_SW_UpdateState
   987  07A7  0874               	movf	??_SW_UpdateState,w
   988  07A8  00F0               	movwf	___bmul@multiplicand
   989  07A9  0877               	movf	SW_UpdateState@sw,w
   990  07AA  120A  118A  2567  120A  118A  	fcall	___bmul
   991  07AF  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
   992  07B0  0084               	movwf	4
   993  07B1  1383               	bcf	3,7	;select IRP bank0
   994  07B2  0300               	decf	0,w
   995  07B3  1D03               	btfss	3,2
   996  07B4  2FB6               	goto	u481
   997  07B5  2FB7               	goto	u480
   998  07B6                     u481:	
   999  07B6  2FEC               	goto	l82
  1000  07B7                     u480:	
  1001  07B7                     l1048:	
  1002                           
  1003                           ;SW.c: 148:                 SW_DATA[sw].state = SW_PRE_RELEASED;
  1004  07B7  3003               	movlw	3
  1005  07B8  00F4               	movwf	??_SW_UpdateState
  1006  07B9  3003               	movlw	3
  1007  07BA  00F5               	movwf	??_SW_UpdateState+1
  1008  07BB  0875               	movf	??_SW_UpdateState+1,w
  1009  07BC  00F0               	movwf	___bmul@multiplicand
  1010  07BD  0877               	movf	SW_UpdateState@sw,w
  1011  07BE  120A  118A  2567  120A  118A  	fcall	___bmul
  1012  07C3  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1013  07C4  0084               	movwf	4
  1014  07C5  0874               	movf	??_SW_UpdateState,w
  1015  07C6  1383               	bcf	3,7	;select IRP bank0
  1016  07C7  0080               	movwf	0
  1017  07C8  2FEC               	goto	l82
  1018  07C9                     l1052:	
  1019  07C9  3003               	movlw	3
  1020  07CA  00F4               	movwf	??_SW_UpdateState
  1021  07CB  0874               	movf	??_SW_UpdateState,w
  1022  07CC  00F0               	movwf	___bmul@multiplicand
  1023  07CD  0877               	movf	SW_UpdateState@sw,w
  1024  07CE  120A  118A  2567  120A  118A  	fcall	___bmul
  1025  07D3  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1026  07D4  0084               	movwf	4
  1027  07D5  1383               	bcf	3,7	;select IRP bank0
  1028  07D6  0800               	movf	0,w
  1029  07D7  00F5               	movwf	??_SW_UpdateState+1
  1030  07D8  01F6               	clrf	??_SW_UpdateState+2
  1031                           
  1032                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1033                           ; Switch size 1, requested type "simple"
  1034                           ; Number of cases is 1, Range of values is 0 to 0
  1035                           ; switch strategies available:
  1036                           ; Name         Instructions Cycles
  1037                           ; simple_byte            4     3 (average)
  1038                           ; direct_byte           11     8 (fixed)
  1039                           ; jumptable            260     6 (fixed)
  1040                           ;	Chosen strategy is simple_byte
  1041  07D9  0876               	movf	??_SW_UpdateState+2,w
  1042  07DA  3A00               	xorlw	0	; case 0
  1043  07DB  1903               	skipnz
  1044  07DC  2FDE               	goto	l1206
  1045  07DD  2FEC               	goto	l82
  1046  07DE                     l1206:	
  1047                           
  1048                           ; Switch size 1, requested type "simple"
  1049                           ; Number of cases is 4, Range of values is 0 to 3
  1050                           ; switch strategies available:
  1051                           ; Name         Instructions Cycles
  1052                           ; simple_byte           13     7 (average)
  1053                           ; direct_byte           20     8 (fixed)
  1054                           ; jumptable            260     6 (fixed)
  1055                           ;	Chosen strategy is simple_byte
  1056  07DE  0875               	movf	??_SW_UpdateState+1,w
  1057  07DF  3A00               	xorlw	0	; case 0
  1058  07E0  1903               	skipnz
  1059  07E1  2F29               	goto	l1032
  1060  07E2  3A01               	xorlw	1	; case 1
  1061  07E3  1903               	skipnz
  1062  07E4  2F5D               	goto	l1038
  1063  07E5  3A03               	xorlw	3	; case 2
  1064  07E6  1903               	skipnz
  1065  07E7  2F93               	goto	l1044
  1066  07E8  3A01               	xorlw	1	; case 3
  1067  07E9  1903               	skipnz
  1068  07EA  2EF6               	goto	l1026
  1069  07EB  2FEC               	goto	l82
  1070  07EC                     l82:	
  1071  07EC  0008               	return
  1072  07ED                     __end_of_SW_UpdateState:	
  1073                           
  1074                           	psect	text3
  1075  0609                     __ptext3:	
  1076 ;; *************** function _SW_Init *****************
  1077 ;; Defined at:
  1078 ;;		line 54 in file "SW.c"
  1079 ;; Parameters:    Size  Location     Type
  1080 ;;		None
  1081 ;; Auto vars:     Size  Location     Type
  1082 ;;		None
  1083 ;; Return value:  Size  Location     Type
  1084 ;;                  1    wreg      void 
  1085 ;; Registers used:
  1086 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1087 ;; Tracked objects:
  1088 ;;		On entry : 0/0
  1089 ;;		On exit  : 0/0
  1090 ;;		Unchanged: 0/0
  1091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1092 ;;      Params:         0       0       0       0       0
  1093 ;;      Locals:         0       0       0       0       0
  1094 ;;      Temps:          1       0       0       0       0
  1095 ;;      Totals:         1       0       0       0       0
  1096 ;;Total ram usage:        1 bytes
  1097 ;; Hardware stack levels used:    1
  1098 ;; Hardware stack levels required when called:    1
  1099 ;; This function calls:
  1100 ;;		_GPIO_Init_Pin
  1101 ;; This function is called by:
  1102 ;;		_main
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           
  1107                           ;psect for function _SW_Init
  1108  0609                     _SW_Init:	
  1109  0609                     l1058:	
  1110                           ;incstack = 0
  1111                           ; Regs used in _SW_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1112                           
  1113                           
  1114                           ;SW.c: 58:     GPIO_Init_Pin(&(TRISB),(0),(1));
  1115  0609  3086               	movlw	134
  1116  060A  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1117  060B  3000               	movlw	0
  1118  060C  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1119  060D  01F2               	clrf	GPIO_Init_Pin@pin_number
  1120  060E  01F3               	clrf	GPIO_Init_Pin@dir
  1121  060F  0AF3               	incf	GPIO_Init_Pin@dir,f
  1122  0610  120A  118A  2692  120A  118A  	fcall	_GPIO_Init_Pin
  1123  0615                     l1060:	
  1124                           
  1125                           ;SW.c: 59:     SW_DATA[SW_PLUS].state = SW_RELEASED;
  1126  0615  1283               	bcf	3,5	;RP0=0, select bank0
  1127  0616  1303               	bcf	3,6	;RP1=0, select bank0
  1128  0617  01A2               	clrf	_SW_DATA+2
  1129  0618                     l1062:	
  1130                           
  1131                           ;SW.c: 60:     SW_DATA[SW_PLUS].samples[0] = (1);
  1132  0618  01A0               	clrf	_SW_DATA
  1133  0619  0AA0               	incf	_SW_DATA,f
  1134  061A                     l1064:	
  1135                           
  1136                           ;SW.c: 61:     SW_DATA[SW_PLUS].samples[1] = (1);
  1137  061A  01A1               	clrf	_SW_DATA+1
  1138  061B  0AA1               	incf	_SW_DATA+1,f
  1139  061C                     l1066:	
  1140                           
  1141                           ;SW.c: 63:     GPIO_Init_Pin(&(TRISB),(1),(1));
  1142  061C  3086               	movlw	134
  1143  061D  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1144  061E  3000               	movlw	0
  1145  061F  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1146  0620  01F2               	clrf	GPIO_Init_Pin@pin_number
  1147  0621  0AF2               	incf	GPIO_Init_Pin@pin_number,f
  1148  0622  01F3               	clrf	GPIO_Init_Pin@dir
  1149  0623  0AF3               	incf	GPIO_Init_Pin@dir,f
  1150  0624  120A  118A  2692  120A  118A  	fcall	_GPIO_Init_Pin
  1151                           
  1152                           ;SW.c: 64:     SW_DATA[SW_MINUS].state = SW_RELEASED;
  1153  0629  1283               	bcf	3,5	;RP0=0, select bank0
  1154  062A  1303               	bcf	3,6	;RP1=0, select bank0
  1155  062B  01A5               	clrf	_SW_DATA+5
  1156  062C                     l1068:	
  1157                           
  1158                           ;SW.c: 65:     SW_DATA[SW_MINUS].samples[0] = (1);
  1159  062C  01A3               	clrf	_SW_DATA+3
  1160  062D  0AA3               	incf	_SW_DATA+3,f
  1161  062E                     l1070:	
  1162                           
  1163                           ;SW.c: 66:     SW_DATA[SW_MINUS].samples[1] = (1);
  1164  062E  01A4               	clrf	_SW_DATA+4
  1165  062F  0AA4               	incf	_SW_DATA+4,f
  1166  0630                     l1072:	
  1167                           
  1168                           ;SW.c: 68:     GPIO_Init_Pin(&(TRISB),(2),(1));
  1169  0630  3086               	movlw	134
  1170  0631  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1171  0632  3000               	movlw	0
  1172  0633  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1173  0634  3002               	movlw	2
  1174  0635  00F8               	movwf	??_SW_Init
  1175  0636  0878               	movf	??_SW_Init,w
  1176  0637  00F2               	movwf	GPIO_Init_Pin@pin_number
  1177  0638  01F3               	clrf	GPIO_Init_Pin@dir
  1178  0639  0AF3               	incf	GPIO_Init_Pin@dir,f
  1179  063A  120A  118A  2692  120A  118A  	fcall	_GPIO_Init_Pin
  1180  063F                     l1074:	
  1181                           
  1182                           ;SW.c: 69:     SW_DATA[SW_PRESSURE].state = SW_RELEASED;
  1183  063F  1283               	bcf	3,5	;RP0=0, select bank0
  1184  0640  1303               	bcf	3,6	;RP1=0, select bank0
  1185  0641  01A8               	clrf	_SW_DATA+8
  1186  0642                     l1076:	
  1187                           
  1188                           ;SW.c: 70:     SW_DATA[SW_PRESSURE].samples[0] = (1);
  1189  0642  01A6               	clrf	_SW_DATA+6
  1190  0643  0AA6               	incf	_SW_DATA+6,f
  1191  0644                     l1078:	
  1192                           
  1193                           ;SW.c: 71:     SW_DATA[SW_PRESSURE].samples[1] = (1);
  1194  0644  01A7               	clrf	_SW_DATA+7
  1195  0645  0AA7               	incf	_SW_DATA+7,f
  1196  0646                     l59:	
  1197  0646  0008               	return
  1198  0647                     __end_of_SW_Init:	
  1199                           
  1200                           	psect	text4
  1201  0553                     __ptext4:	
  1202 ;; *************** function _SW_GetState *****************
  1203 ;; Defined at:
  1204 ;;		line 74 in file "SW.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;  sw              1    wreg     enum E859
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;  sw              1    6[COMMON] enum E859
  1209 ;;  ret             1    7[COMMON] unsigned char 
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  1    wreg      unsigned char 
  1212 ;; Registers used:
  1213 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1219 ;;      Params:         0       0       0       0       0
  1220 ;;      Locals:         2       0       0       0       0
  1221 ;;      Temps:          2       0       0       0       0
  1222 ;;      Totals:         4       0       0       0       0
  1223 ;;Total ram usage:        4 bytes
  1224 ;; Hardware stack levels used:    1
  1225 ;; Hardware stack levels required when called:    1
  1226 ;; This function calls:
  1227 ;;		___bmul
  1228 ;; This function is called by:
  1229 ;;		_main
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233                           
  1234                           ;psect for function _SW_GetState
  1235  0553                     _SW_GetState:	
  1236                           
  1237                           ;incstack = 0
  1238                           ; Regs used in _SW_GetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1239                           ;SW_GetState@sw stored from wreg
  1240  0553  00F6               	movwf	SW_GetState@sw
  1241  0554                     l1120:	
  1242  0554                     l1122:	
  1243                           
  1244                           ;SW.c: 79:     ret = SW_DATA[sw].state;
  1245  0554  3003               	movlw	3
  1246  0555  00F4               	movwf	??_SW_GetState
  1247  0556  0874               	movf	??_SW_GetState,w
  1248  0557  00F0               	movwf	___bmul@multiplicand
  1249  0558  0876               	movf	SW_GetState@sw,w
  1250  0559  120A  118A  2567  120A  118A  	fcall	___bmul
  1251  055E  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1252  055F  0084               	movwf	4
  1253  0560  1383               	bcf	3,7	;select IRP bank0
  1254  0561  0800               	movf	0,w
  1255  0562  00F5               	movwf	??_SW_GetState+1
  1256  0563  0875               	movf	??_SW_GetState+1,w
  1257  0564  00F7               	movwf	SW_GetState@ret
  1258  0565                     l1124:	
  1259                           
  1260                           ;SW.c: 81:     return ret;
  1261  0565  0877               	movf	SW_GetState@ret,w
  1262  0566                     l62:	
  1263  0566  0008               	return
  1264  0567                     __end_of_SW_GetState:	
  1265                           
  1266                           	psect	text5
  1267  0567                     __ptext5:	
  1268 ;; *************** function ___bmul *****************
  1269 ;; Defined at:
  1270 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;  multiplier      1    wreg     unsigned char 
  1273 ;;  multiplicand    1    0[COMMON] unsigned char 
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  multiplier      1    3[COMMON] unsigned char 
  1276 ;;  product         1    2[COMMON] unsigned char 
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      unsigned char 
  1279 ;; Registers used:
  1280 ;;		wreg, status,2, status,0
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1286 ;;      Params:         1       0       0       0       0
  1287 ;;      Locals:         2       0       0       0       0
  1288 ;;      Temps:          1       0       0       0       0
  1289 ;;      Totals:         4       0       0       0       0
  1290 ;;Total ram usage:        4 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; This function calls:
  1293 ;;		Nothing
  1294 ;; This function is called by:
  1295 ;;		_SW_GetState
  1296 ;;		_SW_UpdateState
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function ___bmul
  1302  0567                     ___bmul:	
  1303                           
  1304                           ;incstack = 0
  1305                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1306                           ;___bmul@multiplier stored from wreg
  1307  0567  00F3               	movwf	___bmul@multiplier
  1308  0568                     l978:	
  1309  0568  01F2               	clrf	___bmul@product
  1310  0569                     l980:	
  1311  0569  1C73               	btfss	___bmul@multiplier,0
  1312  056A  2D6C               	goto	u311
  1313  056B  2D6D               	goto	u310
  1314  056C                     u311:	
  1315  056C  2D71               	goto	l984
  1316  056D                     u310:	
  1317  056D                     l982:	
  1318  056D  0870               	movf	___bmul@multiplicand,w
  1319  056E  00F1               	movwf	??___bmul
  1320  056F  0871               	movf	??___bmul,w
  1321  0570  07F2               	addwf	___bmul@product,f
  1322  0571                     l984:	
  1323  0571  1003               	clrc
  1324  0572  0DF0               	rlf	___bmul@multiplicand,f
  1325  0573                     l986:	
  1326  0573  1003               	clrc
  1327  0574  0CF3               	rrf	___bmul@multiplier,f
  1328  0575  0873               	movf	___bmul@multiplier,w
  1329  0576  1D03               	btfss	3,2
  1330  0577  2D79               	goto	u321
  1331  0578  2D7A               	goto	u320
  1332  0579                     u321:	
  1333  0579  2D69               	goto	l980
  1334  057A                     u320:	
  1335  057A                     l988:	
  1336  057A  0872               	movf	___bmul@product,w
  1337  057B                     l232:	
  1338  057B  0008               	return
  1339  057C                     __end_of___bmul:	
  1340                           
  1341                           	psect	text6
  1342  059B                     __ptext6:	
  1343 ;; *************** function _LED_Init *****************
  1344 ;; Defined at:
  1345 ;;		line 14 in file "Led.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;  led             1    wreg     enum E859
  1348 ;;  state           1    8[COMMON] enum E862
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;  led             1   12[COMMON] enum E859
  1351 ;;  ret             1   11[COMMON] unsigned char 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      unsigned char 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1361 ;;      Params:         1       0       0       0       0
  1362 ;;      Locals:         2       0       0       0       0
  1363 ;;      Temps:          2       0       0       0       0
  1364 ;;      Totals:         5       0       0       0       0
  1365 ;;Total ram usage:        5 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    1
  1368 ;; This function calls:
  1369 ;;		_GPIO_Init_Pin
  1370 ;;		_LED_SetState
  1371 ;; This function is called by:
  1372 ;;		_main
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           
  1377                           ;psect for function _LED_Init
  1378  059B                     _LED_Init:	
  1379                           
  1380                           ;incstack = 0
  1381                           ; Regs used in _LED_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1382                           ;LED_Init@led stored from wreg
  1383  059B  00FC               	movwf	LED_Init@led
  1384  059C                     l1080:	
  1385                           
  1386                           ;Led.c: 21:     switch(led)
  1387  059C  2DB1               	goto	l1086
  1388  059D                     l1082:	
  1389                           
  1390                           ;Led.c: 24:             ret = GPIO_Init_Pin(&(TRISB),(3),(0));
  1391  059D  3086               	movlw	134
  1392  059E  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1393  059F  3000               	movlw	0
  1394  05A0  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1395  05A1  3003               	movlw	3
  1396  05A2  00F9               	movwf	??_LED_Init
  1397  05A3  0879               	movf	??_LED_Init,w
  1398  05A4  00F2               	movwf	GPIO_Init_Pin@pin_number
  1399  05A5  01F3               	clrf	GPIO_Init_Pin@dir
  1400  05A6  120A  118A  2692  120A  118A  	fcall	_GPIO_Init_Pin
  1401  05AB  00FA               	movwf	??_LED_Init+1
  1402  05AC  087A               	movf	??_LED_Init+1,w
  1403  05AD  00FB               	movwf	LED_Init@ret
  1404                           
  1405                           ;Led.c: 25:             break;
  1406  05AE  2DBE               	goto	l1088
  1407  05AF                     l1084:	
  1408  05AF  01FB               	clrf	LED_Init@ret
  1409                           
  1410                           ;Led.c: 27:     }
  1411  05B0  2DBE               	goto	l1088
  1412  05B1                     l1086:	
  1413  05B1  087C               	movf	LED_Init@led,w
  1414  05B2  00F9               	movwf	??_LED_Init
  1415  05B3  01FA               	clrf	??_LED_Init+1
  1416                           
  1417                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1418                           ; Switch size 1, requested type "simple"
  1419                           ; Number of cases is 1, Range of values is 0 to 0
  1420                           ; switch strategies available:
  1421                           ; Name         Instructions Cycles
  1422                           ; simple_byte            4     3 (average)
  1423                           ; direct_byte           11     8 (fixed)
  1424                           ; jumptable            260     6 (fixed)
  1425                           ;	Chosen strategy is simple_byte
  1426  05B4  087A               	movf	??_LED_Init+1,w
  1427  05B5  3A00               	xorlw	0	; case 0
  1428  05B6  1903               	skipnz
  1429  05B7  2DB9               	goto	l1208
  1430  05B8  2DAF               	goto	l1084
  1431  05B9                     l1208:	
  1432                           
  1433                           ; Switch size 1, requested type "simple"
  1434                           ; Number of cases is 1, Range of values is 0 to 0
  1435                           ; switch strategies available:
  1436                           ; Name         Instructions Cycles
  1437                           ; simple_byte            4     3 (average)
  1438                           ; direct_byte           11     8 (fixed)
  1439                           ; jumptable            260     6 (fixed)
  1440                           ;	Chosen strategy is simple_byte
  1441  05B9  0879               	movf	??_LED_Init,w
  1442  05BA  3A00               	xorlw	0	; case 0
  1443  05BB  1903               	skipnz
  1444  05BC  2D9D               	goto	l1082
  1445  05BD  2DAF               	goto	l1084
  1446  05BE                     l1088:	
  1447                           
  1448                           ;Led.c: 28:     if(ret != 0)
  1449  05BE  087B               	movf	LED_Init@ret,w
  1450  05BF  1903               	btfsc	3,2
  1451  05C0  2DC2               	goto	u491
  1452  05C1  2DC3               	goto	u490
  1453  05C2                     u491:	
  1454  05C2  2DCD               	goto	l98
  1455  05C3                     u490:	
  1456  05C3                     l1090:	
  1457                           
  1458                           ;Led.c: 29:     {;Led.c: 30:         LED_SetState(led,state);
  1459  05C3  0878               	movf	LED_Init@state,w
  1460  05C4  00F9               	movwf	??_LED_Init
  1461  05C5  0879               	movf	??_LED_Init,w
  1462  05C6  00F0               	movwf	LED_SetState@state
  1463  05C7  087C               	movf	LED_Init@led,w
  1464  05C8  120A  118A  257C  120A  118A  	fcall	_LED_SetState
  1465  05CD                     l98:	
  1466  05CD  0008               	return
  1467  05CE                     __end_of_LED_Init:	
  1468                           
  1469                           	psect	text7
  1470  057C                     __ptext7:	
  1471 ;; *************** function _LED_SetState *****************
  1472 ;; Defined at:
  1473 ;;		line 50 in file "Led.c"
  1474 ;; Parameters:    Size  Location     Type
  1475 ;;  led             1    wreg     enum E859
  1476 ;;  state           1    0[COMMON] enum E862
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;  led             1    3[COMMON] enum E859
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1488 ;;      Params:         1       0       0       0       0
  1489 ;;      Locals:         1       0       0       0       0
  1490 ;;      Temps:          2       0       0       0       0
  1491 ;;      Totals:         4       0       0       0       0
  1492 ;;Total ram usage:        4 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; This function calls:
  1495 ;;		Nothing
  1496 ;; This function is called by:
  1497 ;;		_main
  1498 ;;		_LED_Init
  1499 ;;		_LED_Toggle
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           
  1504                           ;psect for function _LED_SetState
  1505  057C                     _LED_SetState:	
  1506                           
  1507                           ;incstack = 0
  1508                           ; Regs used in _LED_SetState: [wreg-fsr0h+status,2+status,0]
  1509                           ;LED_SetState@led stored from wreg
  1510  057C  00F3               	movwf	LED_SetState@led
  1511  057D                     l992:	
  1512                           
  1513                           ;Led.c: 50: void LED_SetState(LED_t led, LEDState_t state);Led.c: 51: {;Led.c: 53:     s
      +                          witch(led)
  1514  057D  2D8D               	goto	l998
  1515  057E                     l994:	
  1516                           
  1517                           ;Led.c: 56:             (((PORTB))=((PORTB) & ~(1<<(3)))|(state<<(3)));
  1518  057E  0870               	movf	LED_SetState@state,w
  1519  057F  00F1               	movwf	??_LED_SetState
  1520  0580  3003               	movlw	3
  1521  0581                     u335:	
  1522  0581  1003               	clrc
  1523  0582  0DF1               	rlf	??_LED_SetState,f
  1524  0583  3EFF               	addlw	-1
  1525  0584  1D03               	skipz
  1526  0585  2D81               	goto	u335
  1527  0586  1283               	bcf	3,5	;RP0=0, select bank0
  1528  0587  1303               	bcf	3,6	;RP1=0, select bank0
  1529  0588  0806               	movf	6,w	;volatile
  1530  0589  39F7               	andlw	247
  1531  058A  0471               	iorwf	??_LED_SetState,w
  1532  058B  0086               	movwf	6	;volatile
  1533                           
  1534                           ;Led.c: 57:             break;
  1535  058C  2D9A               	goto	l112
  1536  058D                     l998:	
  1537  058D  0873               	movf	LED_SetState@led,w
  1538  058E  00F1               	movwf	??_LED_SetState
  1539  058F  01F2               	clrf	??_LED_SetState+1
  1540                           
  1541                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1542                           ; Switch size 1, requested type "simple"
  1543                           ; Number of cases is 1, Range of values is 0 to 0
  1544                           ; switch strategies available:
  1545                           ; Name         Instructions Cycles
  1546                           ; simple_byte            4     3 (average)
  1547                           ; direct_byte           11     8 (fixed)
  1548                           ; jumptable            260     6 (fixed)
  1549                           ;	Chosen strategy is simple_byte
  1550  0590  0872               	movf	??_LED_SetState+1,w
  1551  0591  3A00               	xorlw	0	; case 0
  1552  0592  1903               	skipnz
  1553  0593  2D95               	goto	l1210
  1554  0594  2D9A               	goto	l112
  1555  0595                     l1210:	
  1556                           
  1557                           ; Switch size 1, requested type "simple"
  1558                           ; Number of cases is 1, Range of values is 0 to 0
  1559                           ; switch strategies available:
  1560                           ; Name         Instructions Cycles
  1561                           ; simple_byte            4     3 (average)
  1562                           ; direct_byte           11     8 (fixed)
  1563                           ; jumptable            260     6 (fixed)
  1564                           ;	Chosen strategy is simple_byte
  1565  0595  0871               	movf	??_LED_SetState,w
  1566  0596  3A00               	xorlw	0	; case 0
  1567  0597  1903               	skipnz
  1568  0598  2D7E               	goto	l994
  1569  0599  2D9A               	goto	l112
  1570  059A                     l112:	
  1571  059A  0008               	return
  1572  059B                     __end_of_LED_SetState:	
  1573                           
  1574                           	psect	text8
  1575  0692                     __ptext8:	
  1576 ;; *************** function _GPIO_Init_Pin *****************
  1577 ;; Defined at:
  1578 ;;		line 34 in file "GPIO.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;  DirRegAddres    2    0[COMMON] PTR unsigned char 
  1581 ;;		 -> TRISB(1), 
  1582 ;;  pin_number      1    2[COMMON] unsigned char 
  1583 ;;  dir             1    3[COMMON] unsigned char 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  ret             1    7[COMMON] unsigned char 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;                  1    wreg      unsigned char 
  1588 ;; Registers used:
  1589 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1595 ;;      Params:         4       0       0       0       0
  1596 ;;      Locals:         1       0       0       0       0
  1597 ;;      Temps:          3       0       0       0       0
  1598 ;;      Totals:         8       0       0       0       0
  1599 ;;Total ram usage:        8 bytes
  1600 ;; Hardware stack levels used:    1
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_SW_Init
  1605 ;;		_LED_Init
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           
  1610                           ;psect for function _GPIO_Init_Pin
  1611  0692                     _GPIO_Init_Pin:	
  1612  0692                     l1004:	
  1613                           ;incstack = 0
  1614                           ; Regs used in _GPIO_Init_Pin: [wreg-fsr0h+status,2+status,0]
  1615                           
  1616                           
  1617                           ;GPIO.c: 34: uint8 GPIO_Init_Pin(uint8 *DirRegAddress ,uint8 pin_number,uint8 dir );GPIO
      +                          .c: 35: {;GPIO.c: 36:     uint8 ret = 1;
  1618  0692  01F7               	clrf	GPIO_Init_Pin@ret
  1619  0693  0AF7               	incf	GPIO_Init_Pin@ret,f
  1620  0694                     l1006:	
  1621                           
  1622                           ;GPIO.c: 38:     if(*DirRegAddress != (TRISA) && *DirRegAddress != (TRISB) &&
  1623  0694  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1624  0695  0084               	movwf	4
  1625  0696  1783               	bsf	3,7
  1626  0697  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1627  0698  1383               	bcf	3,7
  1628  0699  0800               	movf	0,w
  1629  069A  1683               	bsf	3,5	;RP0=1, select bank1
  1630  069B  1303               	bcf	3,6	;RP1=0, select bank1
  1631  069C  0605               	xorwf	5,w	;volatile
  1632  069D  1903               	skipnz
  1633  069E  2EA0               	goto	u341
  1634  069F  2EA1               	goto	u340
  1635  06A0                     u341:	
  1636  06A0  2ECF               	goto	l1018
  1637  06A1                     u340:	
  1638  06A1                     l1008:	
  1639  06A1  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1640  06A2  0084               	movwf	4
  1641  06A3  1783               	bsf	3,7
  1642  06A4  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1643  06A5  1383               	bcf	3,7
  1644  06A6  0800               	movf	0,w
  1645  06A7  0606               	xorwf	6,w	;volatile
  1646  06A8  1903               	skipnz
  1647  06A9  2EAB               	goto	u351
  1648  06AA  2EAC               	goto	u350
  1649  06AB                     u351:	
  1650  06AB  2ECF               	goto	l1018
  1651  06AC                     u350:	
  1652  06AC                     l1010:	
  1653  06AC  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1654  06AD  0084               	movwf	4
  1655  06AE  1783               	bsf	3,7
  1656  06AF  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1657  06B0  1383               	bcf	3,7
  1658  06B1  0800               	movf	0,w
  1659  06B2  0607               	xorwf	7,w	;volatile
  1660  06B3  1903               	skipnz
  1661  06B4  2EB6               	goto	u361
  1662  06B5  2EB7               	goto	u360
  1663  06B6                     u361:	
  1664  06B6  2ECF               	goto	l1018
  1665  06B7                     u360:	
  1666  06B7                     l1012:	
  1667  06B7  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1668  06B8  0084               	movwf	4
  1669  06B9  1783               	bsf	3,7
  1670  06BA  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1671  06BB  1383               	bcf	3,7
  1672  06BC  0800               	movf	0,w
  1673  06BD  0608               	xorwf	8,w	;volatile
  1674  06BE  1903               	skipnz
  1675  06BF  2EC1               	goto	u371
  1676  06C0  2EC2               	goto	u370
  1677  06C1                     u371:	
  1678  06C1  2ECF               	goto	l1018
  1679  06C2                     u370:	
  1680  06C2                     l1014:	
  1681  06C2  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1682  06C3  0084               	movwf	4
  1683  06C4  1783               	bsf	3,7
  1684  06C5  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1685  06C6  1383               	bcf	3,7
  1686  06C7  0800               	movf	0,w
  1687  06C8  0609               	xorwf	9,w	;volatile
  1688  06C9  1903               	skipnz
  1689  06CA  2ECC               	goto	u381
  1690  06CB  2ECD               	goto	u380
  1691  06CC                     u381:	
  1692  06CC  2ECF               	goto	l1018
  1693  06CD                     u380:	
  1694  06CD                     l1016:	
  1695                           
  1696                           ;GPIO.c: 41:     {;GPIO.c: 43:        ret = 0;
  1697  06CD  01F7               	clrf	GPIO_Init_Pin@ret
  1698                           
  1699                           ;GPIO.c: 44:     }
  1700  06CE  2EF2               	goto	l1020
  1701  06CF                     l1018:	
  1702                           
  1703                           ;GPIO.c: 46:     {;GPIO.c: 47:         ((*DirRegAddress)=(*DirRegAddress & ~(1<<pin_numb
      +                          er))|(dir<<pin_number));
  1704  06CF  0873               	movf	GPIO_Init_Pin@dir,w
  1705  06D0  00F4               	movwf	??_GPIO_Init_Pin
  1706  06D1  0A72               	incf	GPIO_Init_Pin@pin_number,w
  1707  06D2  2ED5               	goto	u394
  1708  06D3                     u395:	
  1709  06D3  1003               	clrc
  1710  06D4  0DF4               	rlf	??_GPIO_Init_Pin,f
  1711  06D5                     u394:	
  1712  06D5  3EFF               	addlw	-1
  1713  06D6  1D03               	skipz
  1714  06D7  2ED3               	goto	u395
  1715  06D8  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1716  06D9  0084               	movwf	4
  1717  06DA  1783               	bsf	3,7
  1718  06DB  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1719  06DC  1383               	bcf	3,7
  1720  06DD  3001               	movlw	1
  1721  06DE  00F5               	movwf	??_GPIO_Init_Pin+1
  1722  06DF  0A72               	incf	GPIO_Init_Pin@pin_number,w
  1723  06E0  2EE3               	goto	u404
  1724  06E1                     u405:	
  1725  06E1  1003               	clrc
  1726  06E2  0DF5               	rlf	??_GPIO_Init_Pin+1,f
  1727  06E3                     u404:	
  1728  06E3  3EFF               	addlw	-1
  1729  06E4  1D03               	skipz
  1730  06E5  2EE1               	goto	u405
  1731  06E6  0875               	movf	??_GPIO_Init_Pin+1,w
  1732  06E7  3AFF               	xorlw	255
  1733  06E8  0500               	andwf	0,w
  1734  06E9  0474               	iorwf	??_GPIO_Init_Pin,w
  1735  06EA  00F6               	movwf	??_GPIO_Init_Pin+2
  1736  06EB  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  1737  06EC  0084               	movwf	4
  1738  06ED  1783               	bsf	3,7
  1739  06EE  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  1740  06EF  1383               	bcf	3,7
  1741  06F0  0876               	movf	??_GPIO_Init_Pin+2,w
  1742  06F1  0080               	movwf	0
  1743  06F2                     l1020:	
  1744                           
  1745                           ;GPIO.c: 49:     return ret;
  1746  06F2  0877               	movf	GPIO_Init_Pin@ret,w
  1747  06F3                     l46:	
  1748  06F3  0008               	return
  1749  06F4                     __end_of_GPIO_Init_Pin:	
  1750  007E                     btemp	set	126	;btemp
  1751  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      2      11
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    GPIO_Init_Pin@DirRegAddress	PTR unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR1[1]), 


Critical Paths under _main in COMMON

    _main->_LED_Init
    _SW_Update->_SW_UpdateState
    _SW_UpdateState->___bmul
    _SW_Init->_GPIO_Init_Pin
    _SW_GetState->___bmul
    _LED_Init->_GPIO_Init_Pin

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4577
                                              0 BANK0      2     2      0
                           _LED_Init
                       _LED_SetState
                        _SW_GetState
                            _SW_Init
                          _SW_Update
 ---------------------------------------------------------------------------------
 (1) _SW_Update                                            2     2      0     742
                                              8 COMMON     2     2      0
                     _SW_UpdateState
 ---------------------------------------------------------------------------------
 (2) _SW_UpdateState                                       4     4      0     742
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _SW_Init                                              1     1      0    1156
                                              8 COMMON     1     1      0
                      _GPIO_Init_Pin
 ---------------------------------------------------------------------------------
 (1) _SW_GetState                                          4     4      0     502
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     456
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _LED_Init                                             5     4      1    1753
                                              8 COMMON     5     4      1
                      _GPIO_Init_Pin
                       _LED_SetState
 ---------------------------------------------------------------------------------
 (1) _LED_SetState                                         4     3      1     424
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _GPIO_Init_Pin                                        8     4      4    1156
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LED_Init
     _GPIO_Init_Pin
     _LED_SetState
   _LED_SetState
   _SW_GetState
     ___bmul
   _SW_Init
     _GPIO_Init_Pin
   _SW_Update
     _SW_UpdateState
       ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      2       B       5       13.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      19      12        0.0%
ABS                  0      0      19       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jan 15 01:50:12 2020

            ___bmul@product 0072                 __CFG_CP$OFF 0000         __end_of_SW_GetState 0567  
                        l46 06F3                          l62 0566                          l82 07EC  
                        l59 0646                          l68 0691                          l98 05CD  
                       l112 059A                         l232 057B                         l980 0569  
                       l982 056D                         l992 057D                         l984 0571  
                       l994 057E                         l986 0573                         l978 0568  
                       l988 057A                         l998 058D                         u310 056D  
                       u311 056C                         u320 057A                         u321 0579  
                       u410 0708                         u411 0707                         u404 06E3  
                       u340 06A1                         u420 071A                         u500 0651  
                       u405 06E1                         u341 06A0                         u421 0719  
                       u501 0650                         u350 06AC                         u430 073B  
                       u351 06AB                         u335 0581                         u431 073A  
                       u360 06B7                         u440 074D                         u520 05F5  
                       u361 06B6                         u441 074C                         u521 05F4  
                       u370 06C2                         u450 076F                __CFG_CPD$OFF 0000  
                       u371 06C1                         u451 076E                         u515 0681  
                       u380 06CD                         u460 0781                         u381 06CC  
                       u461 0780                         u470 07A5                         u471 07A4  
                       u480 07B7                         u481 07B6                         u394 06D5  
                       u490 05C3                         u395 06D3                         u491 05C2  
                       u547 05E1                         fsr0 0004                         indf 0000  
              __CFG_FOSC$HS 0000                __CFG_LVP$OFF 0000                        l1010 06AC  
                      l1020 06F2                        l1012 06B7                        l1004 0692  
                      l1014 06C2                        l1006 0694                        l1030 071A  
                      l1110 066A                        l1102 0652                        l1016 06CD  
                      l1008 06A1                        l1120 0554                        l1040 076F  
                      l1032 0729                        l1024 06F5                        l1112 0672  
                      l1104 0653                        l1018 06CF                        l1210 0595  
                      l1122 0554                        l1042 0781                        l1034 073B  
                      l1026 06F6                        l1114 0678                        l1106 065E  
                      l1130 05DB                        l1124 0565                        l1060 0615  
                      l1044 0793                        l1036 074D                        l1028 0708  
                      l1052 07C9                        l1116 067E                        l1108 0664  
                      l1132 05E5                        l1070 062E                        l1062 0618  
                      l1206 07DE                        l1046 07A5                        l1038 075D  
                      l1118 068B                        l1134 05EA                        l1208 05B9  
                      l1080 059C                        l1072 0630                        l1064 061A  
                      l1048 07B7                        l1136 05F5                        l1128 05CE  
                      l1090 05C3                        l1082 059D                        l1074 063F  
                      l1066 061C                        l1058 0609                        l1138 05FD  
                      l1084 05AF                        l1076 0642                        l1068 062C  
                      l1086 05B1                        l1078 0644                        l1088 05BE  
                      l1098 0647                __CFG_WRT$OFF 0000                        _main 05CE  
                      btemp 007E                        start 0000             __end_of_SW_Init 0647  
         ___bmul@multiplier 0073               _GPIO_Init_Pin 0692               ?_LED_SetState 0070  
          __end_of_LED_Init 05CE                       ?_main 0070               __CFG_WDTE$OFF 0000  
                     _PORTB 0006                       _TRISA 0085                       _TRISB 0086  
                     _TRISC 0087                       _TRISD 0088                       _TRISE 0089  
               LED_Init@led 007C                 LED_Init@ret 007B              __CFG_BOREN$OFF 0000  
                     status 0003                       wtemp0 007E     __size_of_SW_UpdateState 00F9  
               _SW_GetState 0553              ?_GPIO_Init_Pin 0070             __initialization 07ED  
              __end_of_main 0609              ??_LED_SetState 0071                      ??_main 0029  
        __size_of_SW_Update 004B  GPIO_Init_Pin@DirRegAddress 0070                   ??_SW_Init 0078  
            __CFG_PWRTE$OFF 0000                      ___bmul 0567    SW_Update@SW_Time_Counter 007D  
              __pdataCOMMON 007D           LED_SetState@state 0070     __end_of__initialization 07FC  
                 ?_LED_Init 0078             ??_GPIO_Init_Pin 0074            GPIO_Init_Pin@dir 0073  
         __end_of_SW_Update 0692            GPIO_Init_Pin@ret 0077         ___bmul@multiplicand 0070  
            __pcstackCOMMON 0070               SW_GetState@sw 0076        __end_of_LED_SetState 059B  
                __pbssBANK0 0020              _SW_UpdateState 06F4                  ??_LED_Init 0079  
                __pmaintext 05CE                     ?___bmul 0070      __end_of_SW_UpdateState 07ED  
                   _SW_DATA 0020                     _SW_Init 0609                ?_SW_GetState 0070  
             LED_Init@state 0078             __size_of___bmul 0015                     __ptext1 0647  
                   __ptext2 06F4                     __ptext3 0609                     __ptext4 0553  
                   __ptext5 0567                     __ptext6 059B                     __ptext7 057C  
                   __ptext8 0692        end_of_initialization 07FC             ?_SW_UpdateState 0070  
     __size_of_LED_SetState 001F     GPIO_Init_Pin@pin_number 0072           __size_of_LED_Init 0033  
                 _SW_Update 0647              __end_of___bmul 057C                _LED_SetState 057C  
             __pidataCOMMON 0552         start_initialization 07ED       __end_of_GPIO_Init_Pin 06F4  
            SW_GetState@ret 0077                    ??___bmul 0071        __size_of_SW_GetState 0014  
                ?_SW_Update 0070                   ___latbits 0002               __pcstackBANK0 0029  
                  ?_SW_Init 0070            ??_SW_UpdateState 0074            SW_UpdateState@sw 0077  
                  _LED_Init 059B                 ??_SW_Update 0078            __size_of_SW_Init 003E  
           LED_SetState@led 0073               __size_of_main 003B               ??_SW_GetState 0074  
    __size_of_GPIO_Init_Pin 0062  
