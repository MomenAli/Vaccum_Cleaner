

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jan 15 22:16:18 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 2.10
    37                           ; Generated 31/07/2019 GMT
    38                           ; 
    39                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F877A Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0088                     	;# 
   110  0089                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  010F                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  0091                     	;# 
   175  0092                     	;# 
   176  0093                     	;# 
   177  0094                     	;# 
   178  0098                     	;# 
   179  0099                     	;# 
   180  009C                     	;# 
   181  009D                     	;# 
   182  009E                     	;# 
   183  009F                     	;# 
   184  010C                     	;# 
   185  010D                     	;# 
   186  010E                     	;# 
   187  010F                     	;# 
   188  018C                     	;# 
   189  018D                     	;# 
   190  0000                     	;# 
   191  0001                     	;# 
   192  0002                     	;# 
   193  0003                     	;# 
   194  0004                     	;# 
   195  0005                     	;# 
   196  0006                     	;# 
   197  0007                     	;# 
   198  0008                     	;# 
   199  0009                     	;# 
   200  000A                     	;# 
   201  000B                     	;# 
   202  000C                     	;# 
   203  000D                     	;# 
   204  000E                     	;# 
   205  000E                     	;# 
   206  000F                     	;# 
   207  0010                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0013                     	;# 
   211  0014                     	;# 
   212  0015                     	;# 
   213  0015                     	;# 
   214  0016                     	;# 
   215  0017                     	;# 
   216  0018                     	;# 
   217  0019                     	;# 
   218  001A                     	;# 
   219  001B                     	;# 
   220  001B                     	;# 
   221  001C                     	;# 
   222  001D                     	;# 
   223  001E                     	;# 
   224  001F                     	;# 
   225  0081                     	;# 
   226  0085                     	;# 
   227  0086                     	;# 
   228  0087                     	;# 
   229  0088                     	;# 
   230  0089                     	;# 
   231  008C                     	;# 
   232  008D                     	;# 
   233  008E                     	;# 
   234  0091                     	;# 
   235  0092                     	;# 
   236  0093                     	;# 
   237  0094                     	;# 
   238  0098                     	;# 
   239  0099                     	;# 
   240  009C                     	;# 
   241  009D                     	;# 
   242  009E                     	;# 
   243  009F                     	;# 
   244  010C                     	;# 
   245  010D                     	;# 
   246  010E                     	;# 
   247  010F                     	;# 
   248  018C                     	;# 
   249  018D                     	;# 
   250  0000                     	;# 
   251  0001                     	;# 
   252  0002                     	;# 
   253  0003                     	;# 
   254  0004                     	;# 
   255  0005                     	;# 
   256  0006                     	;# 
   257  0007                     	;# 
   258  0008                     	;# 
   259  0009                     	;# 
   260  000A                     	;# 
   261  000B                     	;# 
   262  000C                     	;# 
   263  000D                     	;# 
   264  000E                     	;# 
   265  000E                     	;# 
   266  000F                     	;# 
   267  0010                     	;# 
   268  0011                     	;# 
   269  0012                     	;# 
   270  0013                     	;# 
   271  0014                     	;# 
   272  0015                     	;# 
   273  0015                     	;# 
   274  0016                     	;# 
   275  0017                     	;# 
   276  0018                     	;# 
   277  0019                     	;# 
   278  001A                     	;# 
   279  001B                     	;# 
   280  001B                     	;# 
   281  001C                     	;# 
   282  001D                     	;# 
   283  001E                     	;# 
   284  001F                     	;# 
   285  0081                     	;# 
   286  0085                     	;# 
   287  0086                     	;# 
   288  0087                     	;# 
   289  0088                     	;# 
   290  0089                     	;# 
   291  008C                     	;# 
   292  008D                     	;# 
   293  008E                     	;# 
   294  0091                     	;# 
   295  0092                     	;# 
   296  0093                     	;# 
   297  0094                     	;# 
   298  0098                     	;# 
   299  0099                     	;# 
   300  009C                     	;# 
   301  009D                     	;# 
   302  009E                     	;# 
   303  009F                     	;# 
   304  010C                     	;# 
   305  010D                     	;# 
   306  010E                     	;# 
   307  010F                     	;# 
   308  018C                     	;# 
   309  018D                     	;# 
   310  0000                     	;# 
   311  0001                     	;# 
   312  0002                     	;# 
   313  0003                     	;# 
   314  0004                     	;# 
   315  0005                     	;# 
   316  0006                     	;# 
   317  0007                     	;# 
   318  0008                     	;# 
   319  0009                     	;# 
   320  000A                     	;# 
   321  000B                     	;# 
   322  000C                     	;# 
   323  000D                     	;# 
   324  000E                     	;# 
   325  000E                     	;# 
   326  000F                     	;# 
   327  0010                     	;# 
   328  0011                     	;# 
   329  0012                     	;# 
   330  0013                     	;# 
   331  0014                     	;# 
   332  0015                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  001D                     	;# 
   343  001E                     	;# 
   344  001F                     	;# 
   345  0081                     	;# 
   346  0085                     	;# 
   347  0086                     	;# 
   348  0087                     	;# 
   349  0088                     	;# 
   350  0089                     	;# 
   351  008C                     	;# 
   352  008D                     	;# 
   353  008E                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0094                     	;# 
   358  0098                     	;# 
   359  0099                     	;# 
   360  009C                     	;# 
   361  009D                     	;# 
   362  009E                     	;# 
   363  009F                     	;# 
   364  010C                     	;# 
   365  010D                     	;# 
   366  010E                     	;# 
   367  010F                     	;# 
   368  018C                     	;# 
   369  018D                     	;# 
   370  0000                     	;# 
   371  0001                     	;# 
   372  0002                     	;# 
   373  0003                     	;# 
   374  0004                     	;# 
   375  0005                     	;# 
   376  0006                     	;# 
   377  0007                     	;# 
   378  0008                     	;# 
   379  0009                     	;# 
   380  000A                     	;# 
   381  000B                     	;# 
   382  000C                     	;# 
   383  000D                     	;# 
   384  000E                     	;# 
   385  000E                     	;# 
   386  000F                     	;# 
   387  0010                     	;# 
   388  0011                     	;# 
   389  0012                     	;# 
   390  0013                     	;# 
   391  0014                     	;# 
   392  0015                     	;# 
   393  0015                     	;# 
   394  0016                     	;# 
   395  0017                     	;# 
   396  0018                     	;# 
   397  0019                     	;# 
   398  001A                     	;# 
   399  001B                     	;# 
   400  001B                     	;# 
   401  001C                     	;# 
   402  001D                     	;# 
   403  001E                     	;# 
   404  001F                     	;# 
   405  0081                     	;# 
   406  0085                     	;# 
   407  0086                     	;# 
   408  0087                     	;# 
   409  0088                     	;# 
   410  0089                     	;# 
   411  008C                     	;# 
   412  008D                     	;# 
   413  008E                     	;# 
   414  0091                     	;# 
   415  0092                     	;# 
   416  0093                     	;# 
   417  0094                     	;# 
   418  0098                     	;# 
   419  0099                     	;# 
   420  009C                     	;# 
   421  009D                     	;# 
   422  009E                     	;# 
   423  009F                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  010F                     	;# 
   428  018C                     	;# 
   429  018D                     	;# 
   430  0000                     	;# 
   431  0001                     	;# 
   432  0002                     	;# 
   433  0003                     	;# 
   434  0004                     	;# 
   435  0005                     	;# 
   436  0006                     	;# 
   437  0007                     	;# 
   438  0008                     	;# 
   439  0009                     	;# 
   440  000A                     	;# 
   441  000B                     	;# 
   442  000C                     	;# 
   443  000D                     	;# 
   444  000E                     	;# 
   445  000E                     	;# 
   446  000F                     	;# 
   447  0010                     	;# 
   448  0011                     	;# 
   449  0012                     	;# 
   450  0013                     	;# 
   451  0014                     	;# 
   452  0015                     	;# 
   453  0015                     	;# 
   454  0016                     	;# 
   455  0017                     	;# 
   456  0018                     	;# 
   457  0019                     	;# 
   458  001A                     	;# 
   459  001B                     	;# 
   460  001B                     	;# 
   461  001C                     	;# 
   462  001D                     	;# 
   463  001E                     	;# 
   464  001F                     	;# 
   465  0081                     	;# 
   466  0085                     	;# 
   467  0086                     	;# 
   468  0087                     	;# 
   469  0088                     	;# 
   470  0089                     	;# 
   471  008C                     	;# 
   472  008D                     	;# 
   473  008E                     	;# 
   474  0091                     	;# 
   475  0092                     	;# 
   476  0093                     	;# 
   477  0094                     	;# 
   478  0098                     	;# 
   479  0099                     	;# 
   480  009C                     	;# 
   481  009D                     	;# 
   482  009E                     	;# 
   483  009F                     	;# 
   484  010C                     	;# 
   485  010D                     	;# 
   486  010E                     	;# 
   487  010F                     	;# 
   488  018C                     	;# 
   489  018D                     	;# 
   490  0000                     	;# 
   491  0001                     	;# 
   492  0002                     	;# 
   493  0003                     	;# 
   494  0004                     	;# 
   495  0005                     	;# 
   496  0006                     	;# 
   497  0007                     	;# 
   498  0008                     	;# 
   499  0009                     	;# 
   500  000A                     	;# 
   501  000B                     	;# 
   502  000C                     	;# 
   503  000D                     	;# 
   504  000E                     	;# 
   505  000E                     	;# 
   506  000F                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0013                     	;# 
   511  0014                     	;# 
   512  0015                     	;# 
   513  0015                     	;# 
   514  0016                     	;# 
   515  0017                     	;# 
   516  0018                     	;# 
   517  0019                     	;# 
   518  001A                     	;# 
   519  001B                     	;# 
   520  001B                     	;# 
   521  001C                     	;# 
   522  001D                     	;# 
   523  001E                     	;# 
   524  001F                     	;# 
   525  0081                     	;# 
   526  0085                     	;# 
   527  0086                     	;# 
   528  0087                     	;# 
   529  0088                     	;# 
   530  0089                     	;# 
   531  008C                     	;# 
   532  008D                     	;# 
   533  008E                     	;# 
   534  0091                     	;# 
   535  0092                     	;# 
   536  0093                     	;# 
   537  0094                     	;# 
   538  0098                     	;# 
   539  0099                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  009F                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  010F                     	;# 
   548  018C                     	;# 
   549  018D                     	;# 
   550                           
   551                           	psect	idataBANK0
   552  026D                     __pidataBANK0:	
   553                           
   554                           ;initializer for _SSD_LOT_ARR
   555  026D  3408               	retlw	8
   556  026E  3448               	retlw	72
   557  026F  3449               	retlw	73
   558  0270  3400               	retlw	0
   559                           
   560                           ;initializer for Disp_Update@DISP_Time_Counter
   561  0271  340A               	retlw	10
   562                           
   563                           ;initializer for SW_Update@SW_Time_Counter
   564  0272  340F               	retlw	15
   565                           
   566                           	psect	nvBANK0
   567  003B                     __pnvBANK0:	
   568  003B                     _motor_speed:	
   569  003B                     	ds	1
   570  0008                     _PORTD	set	8
   571  0006                     _PORTB	set	6
   572  0089                     _TRISE	set	137
   573  0087                     _TRISC	set	135
   574  0085                     _TRISA	set	133
   575  0088                     _TRISD	set	136
   576  0086                     _TRISB	set	134
   577                           
   578                           ; #config settings
   579  0000                     
   580                           	psect	cinit
   581  07CF                     start_initialization:	
   582  07CF                     __initialization:	
   583                           
   584                           ; Initialize objects allocated to BANK0
   585  07CF  120A  118A  226D  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   586  07D4  00B2               	movwf	__pdataBANK0& (0+127)
   587  07D5  120A  118A  226E  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   588  07DA  00B3               	movwf	(__pdataBANK0+1)& (0+127)
   589  07DB  120A  118A  226F  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   590  07E0  00B4               	movwf	(__pdataBANK0+2)& (0+127)
   591  07E1  120A  118A  2270  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   592  07E6  00B5               	movwf	(__pdataBANK0+3)& (0+127)
   593  07E7  120A  118A  2271  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   594  07EC  00B6               	movwf	(__pdataBANK0+4)& (0+127)
   595  07ED  120A  118A  2272  120A  118A  	fcall	__pidataBANK0+5	;fetch initializer
   596  07F2  00B7               	movwf	(__pdataBANK0+5)& (0+127)
   597                           
   598                           ; Clear objects allocated to BANK0
   599  07F3  1383               	bcf	3,7	;select IRP bank0
   600  07F4  3020               	movlw	low __pbssBANK0
   601  07F5  0084               	movwf	4
   602  07F6  3032               	movlw	low (__pbssBANK0+18)
   603  07F7  120A  118A  2273  120A  118A  	fcall	clear_ram0
   604  07FC                     end_of_initialization:	
   605                           ;End of C runtime variable initialization code
   606                           
   607  07FC                     __end_of__initialization:	
   608  07FC  0183               	clrf	3
   609  07FD  120A  118A  2B9C   	ljmp	_main	;jump to C main() function
   610                           
   611                           	psect	bssBANK0
   612  0020                     __pbssBANK0:	
   613  0020                     _SW_DATA:	
   614  0020                     	ds	9
   615  0029                     _Buffer:	
   616  0029                     	ds	4
   617  002D                     _pressure_sw_counter:	
   618  002D                     	ds	2
   619  002F                     VC_Update@VC_TICK_COUNTER:	
   620  002F                     	ds	1
   621  0030                     SSD_Update@SSD_Time_Counter:	
   622  0030                     	ds	1
   623  0031                     _currentSSD:	
   624  0031                     	ds	1
   625                           
   626                           	psect	dataBANK0
   627  0032                     __pdataBANK0:	
   628  0032                     _SSD_LOT_ARR:	
   629  0032                     	ds	4
   630  0036                     Disp_Update@DISP_Time_Counter:	
   631  0036                     	ds	1
   632  0037                     SW_Update@SW_Time_Counter:	
   633  0037                     	ds	1
   634                           
   635                           	psect	clrtext
   636  0273                     clear_ram0:	
   637                           ;	Called with FSR containing the base address, and
   638                           ;	W with the last address+1
   639                           
   640  0273  0064               	clrwdt	;clear the watchdog before getting into this loop
   641  0274                     clrloop0:	
   642  0274  0180               	clrf	0	;clear RAM location pointed to by FSR
   643  0275  0A84               	incf	4,f	;increment pointer
   644  0276  0604               	xorwf	4,w	;XOR with final address
   645  0277  1903               	btfsc	3,2	;have we reached the end yet?
   646  0278  3400               	retlw	0	;all done for this memory range, return
   647  0279  0604               	xorwf	4,w	;XOR again to restore value
   648  027A  2A74               	goto	clrloop0	;do the next byte
   649                           
   650                           	psect	cstackCOMMON
   651  0070                     __pcstackCOMMON:	
   652  0070                     ?_VC_Init:	
   653  0070                     ?_Disp_Init:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_SW_Init:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_SW_Update:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_VC_Update:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_Disp_Update:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_SSD_Update:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_SW_UpdateState:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_LED_SetState:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_SSD_Set_Symbol:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_SSD_Disable:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ??_SSD_Disable:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_SSD_Data_write:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ??_SSD_Data_write:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     ?_SSD_Enable:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ??_SSD_Enable:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ?_Switch_Event_Handler:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     ?_main:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?_GPIO_Init_Port:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     ?_GPIO_Init_Pin:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0070                     ?_SW_GetState:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0070                     ?_VC_GetSpeed:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0070                     ??_VC_GetSpeed:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0070                     ?___bmul:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0070                     LED_SetState@state:	
   723                           ; 1 bytes @ 0x0
   724                           
   725  0070                     SSD_Set_Symbol@index:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0070                     ___bmul@multiplicand:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0070                     GPIO_Init_Port@DirRegAddress:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0070                     GPIO_Init_Pin@DirRegAddress:	
   735                           ; 2 bytes @ 0x0
   736                           
   737                           
   738                           ; 2 bytes @ 0x0
   739  0070                     	ds	1
   740  0071                     ??_LED_SetState:	
   741  0071                     ??_SSD_Set_Symbol:	
   742                           ; 1 bytes @ 0x1
   743                           
   744  0071                     ??___bmul:	
   745                           ; 1 bytes @ 0x1
   746                           
   747                           
   748                           ; 1 bytes @ 0x1
   749  0071                     	ds	1
   750  0072                     GPIO_Init_Port@dir:	
   751  0072                     GPIO_Init_Pin@pin_number:	
   752                           ; 1 bytes @ 0x2
   753                           
   754  0072                     SSD_Set_Symbol@symbol:	
   755                           ; 1 bytes @ 0x2
   756                           
   757  0072                     SSD_Disable@s:	
   758                           ; 1 bytes @ 0x2
   759                           
   760  0072                     SSD_Enable@s:	
   761                           ; 1 bytes @ 0x2
   762                           
   763  0072                     ___bmul@product:	
   764                           ; 1 bytes @ 0x2
   765                           
   766                           
   767                           ; 1 bytes @ 0x2
   768  0072                     	ds	1
   769  0073                     ??_Disp_Update:	
   770  0073                     ??_SSD_Update:	
   771                           ; 1 bytes @ 0x3
   772                           
   773  0073                     ??_GPIO_Init_Port:	
   774                           ; 1 bytes @ 0x3
   775                           
   776  0073                     GPIO_Init_Pin@dir:	
   777                           ; 1 bytes @ 0x3
   778                           
   779  0073                     LED_SetState@led:	
   780                           ; 1 bytes @ 0x3
   781                           
   782  0073                     ___bmul@multiplier:	
   783                           ; 1 bytes @ 0x3
   784                           
   785                           
   786                           ; 1 bytes @ 0x3
   787  0073                     	ds	1
   788  0074                     ??_SW_UpdateState:	
   789  0074                     ??_GPIO_Init_Pin:	
   790                           ; 1 bytes @ 0x4
   791                           
   792  0074                     ??_SW_GetState:	
   793                           ; 1 bytes @ 0x4
   794                           
   795                           
   796                           ; 1 bytes @ 0x4
   797  0074                     	ds	1
   798  0075                     _GPIO_Init_Port$75:	
   799                           
   800                           ; 2 bytes @ 0x5
   801  0075                     	ds	1
   802  0076                     SW_GetState@sw:	
   803                           
   804                           ; 1 bytes @ 0x6
   805  0076                     	ds	1
   806  0077                     GPIO_Init_Pin@ret:	
   807  0077                     SW_GetState@ret:	
   808                           ; 1 bytes @ 0x7
   809                           
   810  0077                     SW_UpdateState@sw:	
   811                           ; 1 bytes @ 0x7
   812                           
   813                           
   814                           ; 1 bytes @ 0x7
   815  0077                     	ds	1
   816  0078                     ??_SW_Init:	
   817  0078                     ??_SW_Update:	
   818                           ; 1 bytes @ 0x8
   819                           
   820  0078                     ??_Switch_Event_Handler:	
   821                           ; 1 bytes @ 0x8
   822                           
   823  0078                     ?_LED_Init:	
   824                           ; 1 bytes @ 0x8
   825                           
   826  0078                     ?_SSD_Init:	
   827                           ; 1 bytes @ 0x8
   828                           
   829  0078                     LED_Init@state:	
   830                           ; 1 bytes @ 0x8
   831                           
   832  0078                     SSD_Init@ssd:	
   833                           ; 1 bytes @ 0x8
   834                           
   835                           
   836                           ; 1 bytes @ 0x8
   837  0078                     	ds	1
   838  0079                     ??_LED_Init:	
   839  0079                     ??_SSD_Init:	
   840                           ; 1 bytes @ 0x9
   841                           
   842                           
   843                           ; 1 bytes @ 0x9
   844  0079                     	ds	1
   845  007A                     ??_VC_Update:	
   846                           
   847                           ; 1 bytes @ 0xA
   848  007A                     	ds	1
   849  007B                     LED_Init@ret:	
   850  007B                     SSD_Init@sym:	
   851                           ; 1 bytes @ 0xB
   852                           
   853                           
   854                           ; 1 bytes @ 0xB
   855  007B                     	ds	1
   856  007C                     ??_Disp_Init:	
   857  007C                     LED_Init@led:	
   858                           ; 1 bytes @ 0xC
   859                           
   860                           
   861                           ; 1 bytes @ 0xC
   862  007C                     	ds	1
   863  007D                     ??_VC_Init:	
   864                           
   865                           ; 1 bytes @ 0xD
   866  007D                     	ds	1
   867                           
   868                           	psect	cstackBANK0
   869  0038                     __pcstackBANK0:	
   870  0038                     VC_Init@speed:	
   871                           
   872                           ; 1 bytes @ 0x0
   873  0038                     	ds	1
   874  0039                     ??_main:	
   875                           
   876                           ; 1 bytes @ 0x1
   877  0039                     	ds	2
   878                           
   879                           	psect	maintext
   880  039C                     __pmaintext:	
   881 ;;
   882 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   883 ;;
   884 ;; *************** function _main *****************
   885 ;; Defined at:
   886 ;;		line 19 in file "VaccumCleaner.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;		None
   889 ;; Auto vars:     Size  Location     Type
   890 ;;		None
   891 ;; Return value:  Size  Location     Type
   892 ;;                  1    wreg      void 
   893 ;; Registers used:
   894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   895 ;; Tracked objects:
   896 ;;		On entry : B00/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   900 ;;      Params:         0       0       0       0       0
   901 ;;      Locals:         0       0       0       0       0
   902 ;;      Temps:          0       2       0       0       0
   903 ;;      Totals:         0       2       0       0       0
   904 ;;Total ram usage:        2 bytes
   905 ;; Hardware stack levels required when called:    4
   906 ;; This function calls:
   907 ;;		_Disp_Init
   908 ;;		_Disp_Update
   909 ;;		_SSD_Update
   910 ;;		_SW_Init
   911 ;;		_SW_Update
   912 ;;		_VC_Init
   913 ;;		_VC_Update
   914 ;; This function is called by:
   915 ;;		Startup code after reset
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           
   920                           ;psect for function _main
   921  039C                     _main:	
   922  039C                     l1796:	
   923                           ;incstack = 0
   924                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   925                           
   926                           
   927                           ;VaccumCleaner.c: 21:     VC_Init(MID_SPEED);
   928  039C  305A               	movlw	90
   929  039D  120A  118A  2291  120A  118A  	fcall	_VC_Init
   930                           
   931                           ;VaccumCleaner.c: 22:     Disp_Init();
   932  03A2  120A  118A  22E1  120A  118A  	fcall	_Disp_Init
   933                           
   934                           ;VaccumCleaner.c: 23:     SW_Init();
   935  03A7  120A  118A  2401  120A  118A  	fcall	_SW_Init
   936  03AC                     l1798:	
   937                           
   938                           ;VaccumCleaner.c: 25:     {;VaccumCleaner.c: 26:         _delay((unsigned long)((5)*(800
      +                          0000/4000.0)));
   939  03AC  300D               	movlw	13
   940  03AD  1283               	bcf	3,5	;RP0=0, select bank0
   941  03AE  1303               	bcf	3,6	;RP1=0, select bank0
   942  03AF  00BA               	movwf	??_main+1
   943  03B0  30FB               	movlw	251
   944  03B1  00B9               	movwf	??_main
   945  03B2                     u807:	
   946  03B2  0BB9               	decfsz	??_main,f
   947  03B3  2BB2               	goto	u807
   948  03B4  0BBA               	decfsz	??_main+1,f
   949  03B5  2BB2               	goto	u807
   950  03B6                     l1800:	
   951                           
   952                           ;VaccumCleaner.c: 27:         SW_Update();
   953  03B6  120A  118A  243F  120A  118A  	fcall	_SW_Update
   954  03BB                     l1802:	
   955                           
   956                           ;VaccumCleaner.c: 28:         VC_Update();
   957  03BB  120A  118A  22B8  120A  118A  	fcall	_VC_Update
   958  03C0                     l1804:	
   959                           
   960                           ;VaccumCleaner.c: 29:         Disp_Update();
   961  03C0  120A  118A  25B1  120A  118A  	fcall	_Disp_Update
   962  03C5                     l1806:	
   963                           
   964                           ;VaccumCleaner.c: 30:         SSD_Update();
   965  03C5  120A  118A  236D  120A  118A  	fcall	_SSD_Update
   966  03CA  2BAC               	goto	l1798
   967  03CB  120A  118A  2800   	ljmp	start
   968  03CE                     __end_of_main:	
   969                           
   970                           	psect	text1
   971  02B8                     __ptext1:	
   972 ;; *************** function _VC_Update *****************
   973 ;; Defined at:
   974 ;;		line 49 in file "Vacuum.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;		None
   977 ;; Auto vars:     Size  Location     Type
   978 ;;		None
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      void 
   981 ;; Registers used:
   982 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   988 ;;      Params:         0       0       0       0       0
   989 ;;      Locals:         0       0       0       0       0
   990 ;;      Temps:          1       0       0       0       0
   991 ;;      Totals:         1       0       0       0       0
   992 ;;Total ram usage:        1 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    3
   995 ;; This function calls:
   996 ;;		_Switch_Event_Handler
   997 ;; This function is called by:
   998 ;;		_main
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           
  1003                           ;psect for function _VC_Update
  1004  02B8                     _VC_Update:	
  1005  02B8                     l1750:	
  1006                           ;incstack = 0
  1007                           ; Regs used in _VC_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1008                           
  1009                           
  1010                           ;Vacuum.c: 51:     static uint8 VC_TICK_COUNTER = 0;;Vacuum.c: 52:     VC_TICK_COUNTER +
      +                          = (5);
  1011  02B8  3005               	movlw	5
  1012  02B9  00FA               	movwf	??_VC_Update
  1013  02BA  087A               	movf	??_VC_Update,w
  1014  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  1015  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  1016  02BD  07AF               	addwf	VC_Update@VC_TICK_COUNTER,f
  1017                           
  1018                           ;Vacuum.c: 54:     if(VC_TICK_COUNTER != (20))
  1019  02BE  3014               	movlw	20
  1020  02BF  062F               	xorwf	VC_Update@VC_TICK_COUNTER,w
  1021  02C0  1903               	btfsc	3,2
  1022  02C1  2AC3               	goto	u751
  1023  02C2  2AC4               	goto	u750
  1024  02C3                     u751:	
  1025  02C3  2AC5               	goto	l1754
  1026  02C4                     u750:	
  1027  02C4  2ACB               	goto	l211
  1028  02C5                     l1754:	
  1029                           
  1030                           ;Vacuum.c: 56:     VC_TICK_COUNTER = 0;
  1031  02C5  01AF               	clrf	VC_Update@VC_TICK_COUNTER
  1032  02C6                     l1756:	
  1033                           
  1034                           ;Vacuum.c: 67:     Switch_Event_Handler();
  1035  02C6  120A  118A  2626  120A  118A  	fcall	_Switch_Event_Handler
  1036  02CB                     l211:	
  1037  02CB  0008               	return
  1038  02CC                     __end_of_VC_Update:	
  1039                           
  1040                           	psect	text2
  1041  0626                     __ptext2:	
  1042 ;; *************** function _Switch_Event_Handler *****************
  1043 ;; Defined at:
  1044 ;;		line 74 in file "Vacuum.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;		None
  1047 ;; Auto vars:     Size  Location     Type
  1048 ;;		None
  1049 ;; Return value:  Size  Location     Type
  1050 ;;                  1    wreg      void 
  1051 ;; Registers used:
  1052 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1053 ;; Tracked objects:
  1054 ;;		On entry : 0/0
  1055 ;;		On exit  : 0/0
  1056 ;;		Unchanged: 0/0
  1057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1058 ;;      Params:         0       0       0       0       0
  1059 ;;      Locals:         0       0       0       0       0
  1060 ;;      Temps:          2       0       0       0       0
  1061 ;;      Totals:         2       0       0       0       0
  1062 ;;Total ram usage:        2 bytes
  1063 ;; Hardware stack levels used:    1
  1064 ;; Hardware stack levels required when called:    2
  1065 ;; This function calls:
  1066 ;;		_LED_SetState
  1067 ;;		_SW_GetState
  1068 ;; This function is called by:
  1069 ;;		_VC_Update
  1070 ;; This function uses a non-reentrant model
  1071 ;;
  1072                           
  1073                           
  1074                           ;psect for function _Switch_Event_Handler
  1075  0626                     _Switch_Event_Handler:	
  1076  0626                     l1632:	
  1077                           ;incstack = 0
  1078                           ; Regs used in _Switch_Event_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1079                           
  1080                           
  1081                           ;Vacuum.c: 80:     if(SW_GetState(SW_PLUS) == SW_PRE_PRESSED && motor_speed != HIGH_SPEE
      +                          D)
  1082  0626  3000               	movlw	0
  1083  0627  120A  118A  22A4  120A  118A  	fcall	_SW_GetState
  1084  062C  3A01               	xorlw	1
  1085  062D  1D03               	skipz
  1086  062E  2E30               	goto	u661
  1087  062F  2E31               	goto	u660
  1088  0630                     u661:	
  1089  0630  2E54               	goto	l1646
  1090  0631                     u660:	
  1091  0631                     l1634:	
  1092  0631  300A               	movlw	10
  1093  0632  1283               	bcf	3,5	;RP0=0, select bank0
  1094  0633  1303               	bcf	3,6	;RP1=0, select bank0
  1095  0634  063B               	xorwf	_motor_speed,w
  1096  0635  1903               	btfsc	3,2
  1097  0636  2E38               	goto	u671
  1098  0637  2E39               	goto	u670
  1099  0638                     u671:	
  1100  0638  2E54               	goto	l1646
  1101  0639                     u670:	
  1102  0639  2E44               	goto	l1644
  1103  063A                     l1638:	
  1104                           
  1105                           ;Vacuum.c: 86:                 motor_speed = MID_SPEED;
  1106  063A  305A               	movlw	90
  1107  063B  00F8               	movwf	??_Switch_Event_Handler
  1108  063C  0878               	movf	??_Switch_Event_Handler,w
  1109  063D  00BB               	movwf	_motor_speed
  1110                           
  1111                           ;Vacuum.c: 87:                 break;
  1112  063E  2E54               	goto	l1646
  1113  063F                     l1640:	
  1114                           
  1115                           ;Vacuum.c: 89:                 motor_speed = HIGH_SPEED;
  1116  063F  300A               	movlw	10
  1117  0640  00F8               	movwf	??_Switch_Event_Handler
  1118  0641  0878               	movf	??_Switch_Event_Handler,w
  1119  0642  00BB               	movwf	_motor_speed
  1120                           
  1121                           ;Vacuum.c: 90:                 break;
  1122  0643  2E54               	goto	l1646
  1123  0644                     l1644:	
  1124  0644  083B               	movf	_motor_speed,w
  1125  0645  00F8               	movwf	??_Switch_Event_Handler
  1126  0646  01F9               	clrf	??_Switch_Event_Handler+1
  1127                           
  1128                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1129                           ; Switch size 1, requested type "simple"
  1130                           ; Number of cases is 1, Range of values is 0 to 0
  1131                           ; switch strategies available:
  1132                           ; Name         Instructions Cycles
  1133                           ; simple_byte            4     3 (average)
  1134                           ; direct_byte           11     8 (fixed)
  1135                           ; jumptable            260     6 (fixed)
  1136                           ;	Chosen strategy is simple_byte
  1137  0647  0879               	movf	??_Switch_Event_Handler+1,w
  1138  0648  3A00               	xorlw	0	; case 0
  1139  0649  1903               	skipnz
  1140  064A  2E4C               	goto	l2014
  1141  064B  2E54               	goto	l1646
  1142  064C                     l2014:	
  1143                           
  1144                           ; Switch size 1, requested type "simple"
  1145                           ; Number of cases is 2, Range of values is 90 to 140
  1146                           ; switch strategies available:
  1147                           ; Name         Instructions Cycles
  1148                           ; simple_byte            7     4 (average)
  1149                           ; direct_byte          164    11 (fixed)
  1150                           ; jumptable            263     9 (fixed)
  1151                           ;	Chosen strategy is simple_byte
  1152  064C  0878               	movf	??_Switch_Event_Handler,w
  1153  064D  3A5A               	xorlw	90	; case 90
  1154  064E  1903               	skipnz
  1155  064F  2E3F               	goto	l1640
  1156  0650  3AD6               	xorlw	214	; case 140
  1157  0651  1903               	skipnz
  1158  0652  2E3A               	goto	l1638
  1159  0653  2E54               	goto	l1646
  1160  0654                     l1646:	
  1161                           
  1162                           ;Vacuum.c: 101:     if((SW_GetState(SW_MINUS) == SW_PRE_PRESSED) && (motor_speed != LOW_
      +                          SPEED))
  1163  0654  3001               	movlw	1
  1164  0655  120A  118A  22A4  120A  118A  	fcall	_SW_GetState
  1165  065A  3A01               	xorlw	1
  1166  065B  1D03               	skipz
  1167  065C  2E5E               	goto	u681
  1168  065D  2E5F               	goto	u680
  1169  065E                     u681:	
  1170  065E  2E82               	goto	l1660
  1171  065F                     u680:	
  1172  065F                     l1648:	
  1173  065F  308C               	movlw	140
  1174  0660  1283               	bcf	3,5	;RP0=0, select bank0
  1175  0661  1303               	bcf	3,6	;RP1=0, select bank0
  1176  0662  063B               	xorwf	_motor_speed,w
  1177  0663  1903               	btfsc	3,2
  1178  0664  2E66               	goto	u691
  1179  0665  2E67               	goto	u690
  1180  0666                     u691:	
  1181  0666  2E82               	goto	l1660
  1182  0667                     u690:	
  1183  0667  2E72               	goto	l1658
  1184  0668                     l1652:	
  1185                           
  1186                           ;Vacuum.c: 108:                 motor_speed = LOW_SPEED;
  1187  0668  308C               	movlw	140
  1188  0669  00F8               	movwf	??_Switch_Event_Handler
  1189  066A  0878               	movf	??_Switch_Event_Handler,w
  1190  066B  00BB               	movwf	_motor_speed
  1191                           
  1192                           ;Vacuum.c: 109:                 break;
  1193  066C  2E82               	goto	l1660
  1194  066D                     l1654:	
  1195                           
  1196                           ;Vacuum.c: 111:                 motor_speed = MID_SPEED;
  1197  066D  305A               	movlw	90
  1198  066E  00F8               	movwf	??_Switch_Event_Handler
  1199  066F  0878               	movf	??_Switch_Event_Handler,w
  1200  0670  00BB               	movwf	_motor_speed
  1201                           
  1202                           ;Vacuum.c: 112:                 break;
  1203  0671  2E82               	goto	l1660
  1204  0672                     l1658:	
  1205  0672  083B               	movf	_motor_speed,w
  1206  0673  00F8               	movwf	??_Switch_Event_Handler
  1207  0674  01F9               	clrf	??_Switch_Event_Handler+1
  1208                           
  1209                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1210                           ; Switch size 1, requested type "simple"
  1211                           ; Number of cases is 1, Range of values is 0 to 0
  1212                           ; switch strategies available:
  1213                           ; Name         Instructions Cycles
  1214                           ; simple_byte            4     3 (average)
  1215                           ; direct_byte           11     8 (fixed)
  1216                           ; jumptable            260     6 (fixed)
  1217                           ;	Chosen strategy is simple_byte
  1218  0675  0879               	movf	??_Switch_Event_Handler+1,w
  1219  0676  3A00               	xorlw	0	; case 0
  1220  0677  1903               	skipnz
  1221  0678  2E7A               	goto	l2016
  1222  0679  2E82               	goto	l1660
  1223  067A                     l2016:	
  1224                           
  1225                           ; Switch size 1, requested type "simple"
  1226                           ; Number of cases is 2, Range of values is 10 to 90
  1227                           ; switch strategies available:
  1228                           ; Name         Instructions Cycles
  1229                           ; simple_byte            7     4 (average)
  1230                           ; direct_byte          254    11 (fixed)
  1231                           ; jumptable            263     9 (fixed)
  1232                           ;	Chosen strategy is simple_byte
  1233  067A  0878               	movf	??_Switch_Event_Handler,w
  1234  067B  3A0A               	xorlw	10	; case 10
  1235  067C  1903               	skipnz
  1236  067D  2E6D               	goto	l1654
  1237  067E  3A50               	xorlw	80	; case 90
  1238  067F  1903               	skipnz
  1239  0680  2E68               	goto	l1652
  1240  0681  2E82               	goto	l1660
  1241  0682                     l1660:	
  1242                           
  1243                           ;Vacuum.c: 122:     if(SW_GetState(SW_PRESSURE) == SW_PRESSED && (motor_speed != LOW_SPE
      +                          ED))
  1244  0682  3002               	movlw	2
  1245  0683  120A  118A  22A4  120A  118A  	fcall	_SW_GetState
  1246  0688  3A02               	xorlw	2
  1247  0689  1D03               	skipz
  1248  068A  2E8C               	goto	u701
  1249  068B  2E8D               	goto	u700
  1250  068C                     u701:	
  1251  068C  2ECA               	goto	l1682
  1252  068D                     u700:	
  1253  068D                     l1662:	
  1254  068D  308C               	movlw	140
  1255  068E  1283               	bcf	3,5	;RP0=0, select bank0
  1256  068F  1303               	bcf	3,6	;RP1=0, select bank0
  1257  0690  063B               	xorwf	_motor_speed,w
  1258  0691  1903               	btfsc	3,2
  1259  0692  2E94               	goto	u711
  1260  0693  2E95               	goto	u710
  1261  0694                     u711:	
  1262  0694  2ECA               	goto	l1682
  1263  0695                     u710:	
  1264  0695                     l1664:	
  1265                           
  1266                           ;Vacuum.c: 123:     {;Vacuum.c: 125:         pressure_sw_counter += (20);
  1267  0695  3014               	movlw	20
  1268  0696  07AD               	addwf	_pressure_sw_counter,f
  1269  0697  1803               	skipnc
  1270  0698  0AAE               	incf	_pressure_sw_counter+1,f
  1271  0699  3000               	movlw	0
  1272  069A  07AE               	addwf	_pressure_sw_counter+1,f
  1273  069B                     l1666:	
  1274                           
  1275                           ;Vacuum.c: 129:         if( pressure_sw_counter == (30000) )
  1276  069B  3030               	movlw	48
  1277  069C  062D               	xorwf	_pressure_sw_counter,w
  1278  069D  3075               	movlw	117
  1279  069E  1903               	skipnz
  1280  069F  062E               	xorwf	_pressure_sw_counter+1,w
  1281  06A0  1D03               	btfss	3,2
  1282  06A1  2EA3               	goto	u721
  1283  06A2  2EA4               	goto	u720
  1284  06A3                     u721:	
  1285  06A3  2EC1               	goto	l1680
  1286  06A4                     u720:	
  1287  06A4  2EAF               	goto	l1676
  1288  06A5                     l1670:	
  1289                           
  1290                           ;Vacuum.c: 136:                     motor_speed = LOW_SPEED;
  1291  06A5  308C               	movlw	140
  1292  06A6  00F8               	movwf	??_Switch_Event_Handler
  1293  06A7  0878               	movf	??_Switch_Event_Handler,w
  1294  06A8  00BB               	movwf	_motor_speed
  1295                           
  1296                           ;Vacuum.c: 137:                     break;
  1297  06A9  2EBF               	goto	l1678
  1298  06AA                     l1672:	
  1299                           
  1300                           ;Vacuum.c: 139:                     motor_speed = MID_SPEED;
  1301  06AA  305A               	movlw	90
  1302  06AB  00F8               	movwf	??_Switch_Event_Handler
  1303  06AC  0878               	movf	??_Switch_Event_Handler,w
  1304  06AD  00BB               	movwf	_motor_speed
  1305                           
  1306                           ;Vacuum.c: 140:                     break;
  1307  06AE  2EBF               	goto	l1678
  1308  06AF                     l1676:	
  1309  06AF  083B               	movf	_motor_speed,w
  1310  06B0  00F8               	movwf	??_Switch_Event_Handler
  1311  06B1  01F9               	clrf	??_Switch_Event_Handler+1
  1312                           
  1313                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1314                           ; Switch size 1, requested type "simple"
  1315                           ; Number of cases is 1, Range of values is 0 to 0
  1316                           ; switch strategies available:
  1317                           ; Name         Instructions Cycles
  1318                           ; simple_byte            4     3 (average)
  1319                           ; direct_byte           11     8 (fixed)
  1320                           ; jumptable            260     6 (fixed)
  1321                           ;	Chosen strategy is simple_byte
  1322  06B2  0879               	movf	??_Switch_Event_Handler+1,w
  1323  06B3  3A00               	xorlw	0	; case 0
  1324  06B4  1903               	skipnz
  1325  06B5  2EB7               	goto	l2018
  1326  06B6  2EBF               	goto	l1678
  1327  06B7                     l2018:	
  1328                           
  1329                           ; Switch size 1, requested type "simple"
  1330                           ; Number of cases is 2, Range of values is 10 to 90
  1331                           ; switch strategies available:
  1332                           ; Name         Instructions Cycles
  1333                           ; simple_byte            7     4 (average)
  1334                           ; direct_byte          254    11 (fixed)
  1335                           ; jumptable            263     9 (fixed)
  1336                           ;	Chosen strategy is simple_byte
  1337  06B7  0878               	movf	??_Switch_Event_Handler,w
  1338  06B8  3A0A               	xorlw	10	; case 10
  1339  06B9  1903               	skipnz
  1340  06BA  2EAA               	goto	l1672
  1341  06BB  3A50               	xorlw	80	; case 90
  1342  06BC  1903               	skipnz
  1343  06BD  2EA5               	goto	l1670
  1344  06BE  2EBF               	goto	l1678
  1345  06BF                     l1678:	
  1346                           
  1347                           ;Vacuum.c: 146:             pressure_sw_counter = 0;
  1348  06BF  01AD               	clrf	_pressure_sw_counter
  1349  06C0  01AE               	clrf	_pressure_sw_counter+1
  1350  06C1                     l1680:	
  1351                           
  1352                           ;Vacuum.c: 149:         LED_SetState(LED_ALARM,LED_ON);
  1353  06C1  01F0               	clrf	LED_SetState@state
  1354  06C2  0AF0               	incf	LED_SetState@state,f
  1355  06C3  3000               	movlw	0
  1356  06C4  120A  118A  22FB  120A  118A  	fcall	_LED_SetState
  1357                           
  1358                           ;Vacuum.c: 150:     }
  1359  06C9  2ED5               	goto	l234
  1360  06CA                     l1682:	
  1361                           
  1362                           ;Vacuum.c: 152:     {;Vacuum.c: 154:         pressure_sw_counter = 0;
  1363  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  1364  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  1365  06CC  01AD               	clrf	_pressure_sw_counter
  1366  06CD  01AE               	clrf	_pressure_sw_counter+1
  1367  06CE                     l1684:	
  1368                           
  1369                           ;Vacuum.c: 156:         LED_SetState(LED_ALARM,LED_OFF);
  1370  06CE  01F0               	clrf	LED_SetState@state
  1371  06CF  3000               	movlw	0
  1372  06D0  120A  118A  22FB  120A  118A  	fcall	_LED_SetState
  1373  06D5                     l234:	
  1374  06D5  0008               	return
  1375  06D6                     __end_of_Switch_Event_Handler:	
  1376                           
  1377                           	psect	text3
  1378  02A4                     __ptext3:	
  1379 ;; *************** function _SW_GetState *****************
  1380 ;; Defined at:
  1381 ;;		line 74 in file "SW.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  sw              1    wreg     enum E859
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  sw              1    6[COMMON] enum E859
  1386 ;;  ret             1    7[COMMON] unsigned char 
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1    wreg      unsigned char 
  1389 ;; Registers used:
  1390 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1396 ;;      Params:         0       0       0       0       0
  1397 ;;      Locals:         2       0       0       0       0
  1398 ;;      Temps:          2       0       0       0       0
  1399 ;;      Totals:         4       0       0       0       0
  1400 ;;Total ram usage:        4 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; Hardware stack levels required when called:    1
  1403 ;; This function calls:
  1404 ;;		___bmul
  1405 ;; This function is called by:
  1406 ;;		_Switch_Event_Handler
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           
  1411                           ;psect for function _SW_GetState
  1412  02A4                     _SW_GetState:	
  1413                           
  1414                           ;incstack = 0
  1415                           ; Regs used in _SW_GetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1416                           ;SW_GetState@sw stored from wreg
  1417  02A4  00F6               	movwf	SW_GetState@sw
  1418  02A5                     l1496:	
  1419  02A5                     l1498:	
  1420                           
  1421                           ;SW.c: 79:     ret = SW_DATA[sw].state;
  1422  02A5  3003               	movlw	3
  1423  02A6  00F4               	movwf	??_SW_GetState
  1424  02A7  0874               	movf	??_SW_GetState,w
  1425  02A8  00F0               	movwf	___bmul@multiplicand
  1426  02A9  0876               	movf	SW_GetState@sw,w
  1427  02AA  120A  118A  22CC  120A  118A  	fcall	___bmul
  1428  02AF  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1429  02B0  0084               	movwf	4
  1430  02B1  1383               	bcf	3,7	;select IRP bank0
  1431  02B2  0800               	movf	0,w
  1432  02B3  00F5               	movwf	??_SW_GetState+1
  1433  02B4  0875               	movf	??_SW_GetState+1,w
  1434  02B5  00F7               	movwf	SW_GetState@ret
  1435  02B6                     l1500:	
  1436                           
  1437                           ;SW.c: 81:     return ret;
  1438  02B6  0877               	movf	SW_GetState@ret,w
  1439  02B7                     l64:	
  1440  02B7  0008               	return
  1441  02B8                     __end_of_SW_GetState:	
  1442                           
  1443                           	psect	text4
  1444  0291                     __ptext4:	
  1445 ;; *************** function _VC_Init *****************
  1446 ;; Defined at:
  1447 ;;		line 32 in file "Vacuum.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;  speed           1    wreg     enum E850
  1450 ;; Auto vars:     Size  Location     Type
  1451 ;;  speed           1    0[BANK0 ] enum E850
  1452 ;; Return value:  Size  Location     Type
  1453 ;;                  1    wreg      void 
  1454 ;; Registers used:
  1455 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1456 ;; Tracked objects:
  1457 ;;		On entry : 0/0
  1458 ;;		On exit  : 0/0
  1459 ;;		Unchanged: 0/0
  1460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1461 ;;      Params:         0       0       0       0       0
  1462 ;;      Locals:         0       1       0       0       0
  1463 ;;      Temps:          1       0       0       0       0
  1464 ;;      Totals:         1       1       0       0       0
  1465 ;;Total ram usage:        2 bytes
  1466 ;; Hardware stack levels used:    1
  1467 ;; Hardware stack levels required when called:    2
  1468 ;; This function calls:
  1469 ;;		_LED_Init
  1470 ;; This function is called by:
  1471 ;;		_main
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           
  1476                           ;psect for function _VC_Init
  1477  0291                     _VC_Init:	
  1478                           
  1479                           ;incstack = 0
  1480                           ; Regs used in _VC_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1481                           ;VC_Init@speed stored from wreg
  1482  0291  1283               	bcf	3,5	;RP0=0, select bank0
  1483  0292  1303               	bcf	3,6	;RP1=0, select bank0
  1484  0293  00B8               	movwf	VC_Init@speed
  1485  0294                     l1698:	
  1486                           
  1487                           ;Vacuum.c: 32: void VC_Init(MOTOR_SPEET_t speed);Vacuum.c: 33: {;Vacuum.c: 35:     motor
      +                          _speed = speed;
  1488  0294  0838               	movf	VC_Init@speed,w
  1489  0295  00FD               	movwf	??_VC_Init
  1490  0296  087D               	movf	??_VC_Init,w
  1491  0297  00BB               	movwf	_motor_speed
  1492  0298                     l1700:	
  1493                           
  1494                           ;Vacuum.c: 40:     LED_Init(LED_ALARM,LED_OFF);
  1495  0298  01F8               	clrf	LED_Init@state
  1496  0299  3000               	movlw	0
  1497  029A  120A  118A  23CE  120A  118A  	fcall	_LED_Init
  1498  029F                     l1702:	
  1499                           
  1500                           ;Vacuum.c: 42:     pressure_sw_counter = 0;
  1501  029F  1283               	bcf	3,5	;RP0=0, select bank0
  1502  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  1503  02A1  01AD               	clrf	_pressure_sw_counter
  1504  02A2  01AE               	clrf	_pressure_sw_counter+1
  1505  02A3                     l202:	
  1506  02A3  0008               	return
  1507  02A4                     __end_of_VC_Init:	
  1508                           
  1509                           	psect	text5
  1510  03CE                     __ptext5:	
  1511 ;; *************** function _LED_Init *****************
  1512 ;; Defined at:
  1513 ;;		line 14 in file "Led.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  led             1    wreg     enum E859
  1516 ;;  state           1    8[COMMON] enum E862
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  led             1   12[COMMON] enum E859
  1519 ;;  ret             1   11[COMMON] unsigned char 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      unsigned char 
  1522 ;; Registers used:
  1523 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1529 ;;      Params:         1       0       0       0       0
  1530 ;;      Locals:         2       0       0       0       0
  1531 ;;      Temps:          2       0       0       0       0
  1532 ;;      Totals:         5       0       0       0       0
  1533 ;;Total ram usage:        5 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    1
  1536 ;; This function calls:
  1537 ;;		_GPIO_Init_Pin
  1538 ;;		_LED_SetState
  1539 ;; This function is called by:
  1540 ;;		_VC_Init
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           
  1545                           ;psect for function _LED_Init
  1546  03CE                     _LED_Init:	
  1547                           
  1548                           ;incstack = 0
  1549                           ; Regs used in _LED_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1550                           ;LED_Init@led stored from wreg
  1551  03CE  00FC               	movwf	LED_Init@led
  1552  03CF                     l1552:	
  1553                           
  1554                           ;Led.c: 21:     switch(led)
  1555  03CF  2BE4               	goto	l1558
  1556  03D0                     l1554:	
  1557                           
  1558                           ;Led.c: 24:             ret = GPIO_Init_Pin(&(TRISB),(3),(0));
  1559  03D0  3086               	movlw	134
  1560  03D1  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1561  03D2  3000               	movlw	0
  1562  03D3  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1563  03D4  3003               	movlw	3
  1564  03D5  00F9               	movwf	??_LED_Init
  1565  03D6  0879               	movf	??_LED_Init,w
  1566  03D7  00F2               	movwf	GPIO_Init_Pin@pin_number
  1567  03D8  01F3               	clrf	GPIO_Init_Pin@dir
  1568  03D9  120A  118A  24DA  120A  118A  	fcall	_GPIO_Init_Pin
  1569  03DE  00FA               	movwf	??_LED_Init+1
  1570  03DF  087A               	movf	??_LED_Init+1,w
  1571  03E0  00FB               	movwf	LED_Init@ret
  1572                           
  1573                           ;Led.c: 25:             break;
  1574  03E1  2BF1               	goto	l1560
  1575  03E2                     l1556:	
  1576  03E2  01FB               	clrf	LED_Init@ret
  1577                           
  1578                           ;Led.c: 27:     }
  1579  03E3  2BF1               	goto	l1560
  1580  03E4                     l1558:	
  1581  03E4  087C               	movf	LED_Init@led,w
  1582  03E5  00F9               	movwf	??_LED_Init
  1583  03E6  01FA               	clrf	??_LED_Init+1
  1584                           
  1585                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1586                           ; Switch size 1, requested type "simple"
  1587                           ; Number of cases is 1, Range of values is 0 to 0
  1588                           ; switch strategies available:
  1589                           ; Name         Instructions Cycles
  1590                           ; simple_byte            4     3 (average)
  1591                           ; direct_byte           11     8 (fixed)
  1592                           ; jumptable            260     6 (fixed)
  1593                           ;	Chosen strategy is simple_byte
  1594  03E7  087A               	movf	??_LED_Init+1,w
  1595  03E8  3A00               	xorlw	0	; case 0
  1596  03E9  1903               	skipnz
  1597  03EA  2BEC               	goto	l2020
  1598  03EB  2BE2               	goto	l1556
  1599  03EC                     l2020:	
  1600                           
  1601                           ; Switch size 1, requested type "simple"
  1602                           ; Number of cases is 1, Range of values is 0 to 0
  1603                           ; switch strategies available:
  1604                           ; Name         Instructions Cycles
  1605                           ; simple_byte            4     3 (average)
  1606                           ; direct_byte           11     8 (fixed)
  1607                           ; jumptable            260     6 (fixed)
  1608                           ;	Chosen strategy is simple_byte
  1609  03EC  0879               	movf	??_LED_Init,w
  1610  03ED  3A00               	xorlw	0	; case 0
  1611  03EE  1903               	skipnz
  1612  03EF  2BD0               	goto	l1554
  1613  03F0  2BE2               	goto	l1556
  1614  03F1                     l1560:	
  1615                           
  1616                           ;Led.c: 28:     if(ret != 0)
  1617  03F1  087B               	movf	LED_Init@ret,w
  1618  03F2  1903               	btfsc	3,2
  1619  03F3  2BF5               	goto	u651
  1620  03F4  2BF6               	goto	u650
  1621  03F5                     u651:	
  1622  03F5  2C00               	goto	l100
  1623  03F6                     u650:	
  1624  03F6                     l1562:	
  1625                           
  1626                           ;Led.c: 29:     {;Led.c: 30:         LED_SetState(led,state);
  1627  03F6  0878               	movf	LED_Init@state,w
  1628  03F7  00F9               	movwf	??_LED_Init
  1629  03F8  0879               	movf	??_LED_Init,w
  1630  03F9  00F0               	movwf	LED_SetState@state
  1631  03FA  087C               	movf	LED_Init@led,w
  1632  03FB  120A  118A  22FB  120A  118A  	fcall	_LED_SetState
  1633  0400                     l100:	
  1634  0400  0008               	return
  1635  0401                     __end_of_LED_Init:	
  1636                           
  1637                           	psect	text6
  1638  02FB                     __ptext6:	
  1639 ;; *************** function _LED_SetState *****************
  1640 ;; Defined at:
  1641 ;;		line 50 in file "Led.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;  led             1    wreg     enum E859
  1644 ;;  state           1    0[COMMON] enum E862
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  led             1    3[COMMON] enum E859
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1656 ;;      Params:         1       0       0       0       0
  1657 ;;      Locals:         1       0       0       0       0
  1658 ;;      Temps:          2       0       0       0       0
  1659 ;;      Totals:         4       0       0       0       0
  1660 ;;Total ram usage:        4 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; This function calls:
  1663 ;;		Nothing
  1664 ;; This function is called by:
  1665 ;;		_LED_Init
  1666 ;;		_Switch_Event_Handler
  1667 ;;		_LED_Toggle
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           
  1672                           ;psect for function _LED_SetState
  1673  02FB                     _LED_SetState:	
  1674                           
  1675                           ;incstack = 0
  1676                           ; Regs used in _LED_SetState: [wreg-fsr0h+status,2+status,0]
  1677                           ;LED_SetState@led stored from wreg
  1678  02FB  00F3               	movwf	LED_SetState@led
  1679  02FC                     l1504:	
  1680                           
  1681                           ;Led.c: 50: void LED_SetState(LED_t led, LEDState_t state);Led.c: 51: {;Led.c: 53:     s
      +                          witch(led)
  1682  02FC  2B0C               	goto	l1510
  1683  02FD                     l1506:	
  1684                           
  1685                           ;Led.c: 56:             (((PORTB))=((PORTB) & ~(1<<(3)))|(state<<(3)));
  1686  02FD  0870               	movf	LED_SetState@state,w
  1687  02FE  00F1               	movwf	??_LED_SetState
  1688  02FF  3003               	movlw	3
  1689  0300                     u565:	
  1690  0300  1003               	clrc
  1691  0301  0DF1               	rlf	??_LED_SetState,f
  1692  0302  3EFF               	addlw	-1
  1693  0303  1D03               	skipz
  1694  0304  2B00               	goto	u565
  1695  0305  1283               	bcf	3,5	;RP0=0, select bank0
  1696  0306  1303               	bcf	3,6	;RP1=0, select bank0
  1697  0307  0806               	movf	6,w	;volatile
  1698  0308  39F7               	andlw	247
  1699  0309  0471               	iorwf	??_LED_SetState,w
  1700  030A  0086               	movwf	6	;volatile
  1701                           
  1702                           ;Led.c: 57:             break;
  1703  030B  2B19               	goto	l114
  1704  030C                     l1510:	
  1705  030C  0873               	movf	LED_SetState@led,w
  1706  030D  00F1               	movwf	??_LED_SetState
  1707  030E  01F2               	clrf	??_LED_SetState+1
  1708                           
  1709                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1710                           ; Switch size 1, requested type "simple"
  1711                           ; Number of cases is 1, Range of values is 0 to 0
  1712                           ; switch strategies available:
  1713                           ; Name         Instructions Cycles
  1714                           ; simple_byte            4     3 (average)
  1715                           ; direct_byte           11     8 (fixed)
  1716                           ; jumptable            260     6 (fixed)
  1717                           ;	Chosen strategy is simple_byte
  1718  030F  0872               	movf	??_LED_SetState+1,w
  1719  0310  3A00               	xorlw	0	; case 0
  1720  0311  1903               	skipnz
  1721  0312  2B14               	goto	l2022
  1722  0313  2B19               	goto	l114
  1723  0314                     l2022:	
  1724                           
  1725                           ; Switch size 1, requested type "simple"
  1726                           ; Number of cases is 1, Range of values is 0 to 0
  1727                           ; switch strategies available:
  1728                           ; Name         Instructions Cycles
  1729                           ; simple_byte            4     3 (average)
  1730                           ; direct_byte           11     8 (fixed)
  1731                           ; jumptable            260     6 (fixed)
  1732                           ;	Chosen strategy is simple_byte
  1733  0314  0871               	movf	??_LED_SetState,w
  1734  0315  3A00               	xorlw	0	; case 0
  1735  0316  1903               	skipnz
  1736  0317  2AFD               	goto	l1506
  1737  0318  2B19               	goto	l114
  1738  0319                     l114:	
  1739  0319  0008               	return
  1740  031A                     __end_of_LED_SetState:	
  1741                           
  1742                           	psect	text7
  1743  043F                     __ptext7:	
  1744 ;; *************** function _SW_Update *****************
  1745 ;; Defined at:
  1746 ;;		line 83 in file "SW.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;		None
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      void 
  1753 ;; Registers used:
  1754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1760 ;;      Params:         0       0       0       0       0
  1761 ;;      Locals:         0       0       0       0       0
  1762 ;;      Temps:          2       0       0       0       0
  1763 ;;      Totals:         2       0       0       0       0
  1764 ;;Total ram usage:        2 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    2
  1767 ;; This function calls:
  1768 ;;		_SW_UpdateState
  1769 ;; This function is called by:
  1770 ;;		_main
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           
  1775                           ;psect for function _SW_Update
  1776  043F                     _SW_Update:	
  1777  043F                     l1728:	
  1778                           ;incstack = 0
  1779                           ; Regs used in _SW_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1780                           
  1781                           
  1782                           ;SW.c: 88:     static uint8 SW_Time_Counter = 15;;SW.c: 89:     SW_Time_Counter += (5);
  1783  043F  3005               	movlw	5
  1784  0440  00F8               	movwf	??_SW_Update
  1785  0441  0878               	movf	??_SW_Update,w
  1786  0442  1283               	bcf	3,5	;RP0=0, select bank0
  1787  0443  1303               	bcf	3,6	;RP1=0, select bank0
  1788  0444  07B7               	addwf	SW_Update@SW_Time_Counter,f
  1789                           
  1790                           ;SW.c: 91:     if(SW_Time_Counter != (20))
  1791  0445  3014               	movlw	20
  1792  0446  0637               	xorwf	SW_Update@SW_Time_Counter,w
  1793  0447  1903               	btfsc	3,2
  1794  0448  2C4A               	goto	u731
  1795  0449  2C4B               	goto	u730
  1796  044A                     u731:	
  1797  044A  2C4C               	goto	l1732
  1798  044B                     u730:	
  1799  044B  2C89               	goto	l70
  1800  044C                     l1732:	
  1801                           
  1802                           ;SW.c: 95:     SW_Time_Counter = 0;
  1803  044C  01B7               	clrf	SW_Update@SW_Time_Counter
  1804  044D                     l1734:	
  1805                           
  1806                           ;SW.c: 97:     SW_DATA[SW_PLUS].samples[0] = SW_DATA[SW_PLUS].samples[1];
  1807  044D  0821               	movf	_SW_DATA+1,w
  1808  044E  00F8               	movwf	??_SW_Update
  1809  044F  0878               	movf	??_SW_Update,w
  1810  0450  00A0               	movwf	_SW_DATA
  1811                           
  1812                           ;SW.c: 98:     SW_DATA[SW_PLUS].samples[1] = (((PORTB) >> (0))& 1);
  1813  0451  0806               	movf	6,w	;volatile
  1814  0452  3901               	andlw	1
  1815  0453  00F8               	movwf	??_SW_Update
  1816  0454  0878               	movf	??_SW_Update,w
  1817  0455  00A1               	movwf	_SW_DATA+1
  1818  0456                     l1736:	
  1819                           
  1820                           ;SW.c: 100:     SW_UpdateState(SW_PLUS);
  1821  0456  3000               	movlw	0
  1822  0457  120A  118A  26D6  120A  118A  	fcall	_SW_UpdateState
  1823  045C                     l1738:	
  1824                           
  1825                           ;SW.c: 102:     SW_DATA[SW_MINUS].samples[0] = SW_DATA[SW_MINUS].samples[1];
  1826  045C  1283               	bcf	3,5	;RP0=0, select bank0
  1827  045D  1303               	bcf	3,6	;RP1=0, select bank0
  1828  045E  0824               	movf	_SW_DATA+4,w
  1829  045F  00F8               	movwf	??_SW_Update
  1830  0460  0878               	movf	??_SW_Update,w
  1831  0461  00A3               	movwf	_SW_DATA+3
  1832  0462                     l1740:	
  1833                           
  1834                           ;SW.c: 103:     SW_DATA[SW_MINUS].samples[1] = (((PORTB) >> (1))& 1);
  1835  0462  0806               	movf	6,w	;volatile
  1836  0463  00F8               	movwf	??_SW_Update
  1837  0464  1003               	clrc
  1838  0465  0C78               	rrf	??_SW_Update,w
  1839  0466  3901               	andlw	1
  1840  0467  00F9               	movwf	??_SW_Update+1
  1841  0468  0879               	movf	??_SW_Update+1,w
  1842  0469  00A4               	movwf	_SW_DATA+4
  1843  046A                     l1742:	
  1844                           
  1845                           ;SW.c: 105:     SW_UpdateState(SW_MINUS);
  1846  046A  3001               	movlw	1
  1847  046B  120A  118A  26D6  120A  118A  	fcall	_SW_UpdateState
  1848  0470                     l1744:	
  1849                           
  1850                           ;SW.c: 108:     SW_DATA[SW_PRESSURE].samples[0] = SW_DATA[SW_PRESSURE].samples[1];
  1851  0470  1283               	bcf	3,5	;RP0=0, select bank0
  1852  0471  1303               	bcf	3,6	;RP1=0, select bank0
  1853  0472  0827               	movf	_SW_DATA+7,w
  1854  0473  00F8               	movwf	??_SW_Update
  1855  0474  0878               	movf	??_SW_Update,w
  1856  0475  00A6               	movwf	_SW_DATA+6
  1857  0476                     l1746:	
  1858                           
  1859                           ;SW.c: 109:     SW_DATA[SW_PRESSURE].samples[1] = (((PORTB) >> (2))& 1);
  1860  0476  0806               	movf	6,w	;volatile
  1861  0477  00F8               	movwf	??_SW_Update
  1862  0478  3002               	movlw	2
  1863  0479                     u745:	
  1864  0479  1003               	clrc
  1865  047A  0CF8               	rrf	??_SW_Update,f
  1866  047B  3EFF               	addlw	-1
  1867  047C  1D03               	skipz
  1868  047D  2C79               	goto	u745
  1869  047E  0878               	movf	??_SW_Update,w
  1870  047F  3901               	andlw	1
  1871  0480  00F9               	movwf	??_SW_Update+1
  1872  0481  0879               	movf	??_SW_Update+1,w
  1873  0482  00A7               	movwf	_SW_DATA+7
  1874  0483                     l1748:	
  1875                           
  1876                           ;SW.c: 111:     SW_UpdateState(SW_PRESSURE);
  1877  0483  3002               	movlw	2
  1878  0484  120A  118A  26D6  120A  118A  	fcall	_SW_UpdateState
  1879  0489                     l70:	
  1880  0489  0008               	return
  1881  048A                     __end_of_SW_Update:	
  1882                           
  1883                           	psect	text8
  1884  06D6                     __ptext8:	
  1885 ;; *************** function _SW_UpdateState *****************
  1886 ;; Defined at:
  1887 ;;		line 114 in file "SW.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  sw              1    wreg     enum E859
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;  sw              1    7[COMMON] enum E859
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1901 ;;      Params:         0       0       0       0       0
  1902 ;;      Locals:         1       0       0       0       0
  1903 ;;      Temps:          3       0       0       0       0
  1904 ;;      Totals:         4       0       0       0       0
  1905 ;;Total ram usage:        4 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    1
  1908 ;; This function calls:
  1909 ;;		___bmul
  1910 ;; This function is called by:
  1911 ;;		_SW_Update
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           
  1916                           ;psect for function _SW_UpdateState
  1917  06D6                     _SW_UpdateState:	
  1918                           
  1919                           ;incstack = 0
  1920                           ; Regs used in _SW_UpdateState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1921                           ;SW_UpdateState@sw stored from wreg
  1922  06D6  00F7               	movwf	SW_UpdateState@sw
  1923  06D7                     l1518:	
  1924                           
  1925                           ;SW.c: 114: void SW_UpdateState(SW_t sw);SW.c: 115: {;SW.c: 131:     switch(SW_DATA[sw].
      +                          state)
  1926  06D7  2FAB               	goto	l1546
  1927  06D8                     l1520:	
  1928                           
  1929                           ;SW.c: 135:             if(SW_DATA[sw].samples[0] == (1) && SW_DATA[sw].samples[1] == (1
      +                          ))
  1930  06D8  3003               	movlw	3
  1931  06D9  00F4               	movwf	??_SW_UpdateState
  1932  06DA  0874               	movf	??_SW_UpdateState,w
  1933  06DB  00F0               	movwf	___bmul@multiplicand
  1934  06DC  0877               	movf	SW_UpdateState@sw,w
  1935  06DD  120A  118A  22CC  120A  118A  	fcall	___bmul
  1936  06E2  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  1937  06E3  0084               	movwf	4
  1938  06E4  1383               	bcf	3,7	;select IRP bank0
  1939  06E5  0300               	decf	0,w
  1940  06E6  1D03               	btfss	3,2
  1941  06E7  2EE9               	goto	u571
  1942  06E8  2EEA               	goto	u570
  1943  06E9                     u571:	
  1944  06E9  2FCE               	goto	l84
  1945  06EA                     u570:	
  1946  06EA                     l1522:	
  1947  06EA  3003               	movlw	3
  1948  06EB  00F4               	movwf	??_SW_UpdateState
  1949  06EC  0874               	movf	??_SW_UpdateState,w
  1950  06ED  00F0               	movwf	___bmul@multiplicand
  1951  06EE  0877               	movf	SW_UpdateState@sw,w
  1952  06EF  120A  118A  22CC  120A  118A  	fcall	___bmul
  1953  06F4  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  1954  06F5  0084               	movwf	4
  1955  06F6  1383               	bcf	3,7	;select IRP bank0
  1956  06F7  0300               	decf	0,w
  1957  06F8  1D03               	btfss	3,2
  1958  06F9  2EFB               	goto	u581
  1959  06FA  2EFC               	goto	u580
  1960  06FB                     u581:	
  1961  06FB  2FCE               	goto	l84
  1962  06FC                     u580:	
  1963  06FC                     l1524:	
  1964                           
  1965                           ;SW.c: 136:                 SW_DATA[sw].state = SW_RELEASED;
  1966  06FC  3003               	movlw	3
  1967  06FD  00F4               	movwf	??_SW_UpdateState
  1968  06FE  0874               	movf	??_SW_UpdateState,w
  1969  06FF  00F0               	movwf	___bmul@multiplicand
  1970  0700  0877               	movf	SW_UpdateState@sw,w
  1971  0701  120A  118A  22CC  120A  118A  	fcall	___bmul
  1972  0706  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1973  0707  0084               	movwf	4
  1974  0708  1383               	bcf	3,7	;select IRP bank0
  1975  0709  0180               	clrf	0
  1976  070A  2FCE               	goto	l84
  1977  070B                     l1526:	
  1978                           
  1979                           ;SW.c: 139:             if(SW_DATA[sw].samples[0] == (0) && SW_DATA[sw].samples[1] == (0
      +                          ))
  1980  070B  3003               	movlw	3
  1981  070C  00F4               	movwf	??_SW_UpdateState
  1982  070D  0874               	movf	??_SW_UpdateState,w
  1983  070E  00F0               	movwf	___bmul@multiplicand
  1984  070F  0877               	movf	SW_UpdateState@sw,w
  1985  0710  120A  118A  22CC  120A  118A  	fcall	___bmul
  1986  0715  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  1987  0716  0084               	movwf	4
  1988  0717  1383               	bcf	3,7	;select IRP bank0
  1989  0718  0800               	movf	0,w
  1990  0719  1D03               	btfss	3,2
  1991  071A  2F1C               	goto	u591
  1992  071B  2F1D               	goto	u590
  1993  071C                     u591:	
  1994  071C  2FCE               	goto	l84
  1995  071D                     u590:	
  1996  071D                     l1528:	
  1997  071D  3003               	movlw	3
  1998  071E  00F4               	movwf	??_SW_UpdateState
  1999  071F  0874               	movf	??_SW_UpdateState,w
  2000  0720  00F0               	movwf	___bmul@multiplicand
  2001  0721  0877               	movf	SW_UpdateState@sw,w
  2002  0722  120A  118A  22CC  120A  118A  	fcall	___bmul
  2003  0727  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  2004  0728  0084               	movwf	4
  2005  0729  1383               	bcf	3,7	;select IRP bank0
  2006  072A  0800               	movf	0,w
  2007  072B  1D03               	btfss	3,2
  2008  072C  2F2E               	goto	u601
  2009  072D  2F2F               	goto	u600
  2010  072E                     u601:	
  2011  072E  2FCE               	goto	l84
  2012  072F                     u600:	
  2013  072F                     l1530:	
  2014                           
  2015                           ;SW.c: 140:                 SW_DATA[sw].state = SW_PRE_PRESSED;
  2016  072F  3003               	movlw	3
  2017  0730  00F4               	movwf	??_SW_UpdateState
  2018  0731  0874               	movf	??_SW_UpdateState,w
  2019  0732  00F0               	movwf	___bmul@multiplicand
  2020  0733  0877               	movf	SW_UpdateState@sw,w
  2021  0734  120A  118A  22CC  120A  118A  	fcall	___bmul
  2022  0739  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2023  073A  0084               	movwf	4
  2024  073B  1383               	bcf	3,7	;select IRP bank0
  2025  073C  0180               	clrf	0
  2026  073D  0A80               	incf	0,f
  2027  073E  2FCE               	goto	l84
  2028  073F                     l1532:	
  2029                           
  2030                           ;SW.c: 143:             if(SW_DATA[sw].samples[0] == (0) && SW_DATA[sw].samples[1] == (0
      +                          ))
  2031  073F  3003               	movlw	3
  2032  0740  00F4               	movwf	??_SW_UpdateState
  2033  0741  0874               	movf	??_SW_UpdateState,w
  2034  0742  00F0               	movwf	___bmul@multiplicand
  2035  0743  0877               	movf	SW_UpdateState@sw,w
  2036  0744  120A  118A  22CC  120A  118A  	fcall	___bmul
  2037  0749  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  2038  074A  0084               	movwf	4
  2039  074B  1383               	bcf	3,7	;select IRP bank0
  2040  074C  0800               	movf	0,w
  2041  074D  1D03               	btfss	3,2
  2042  074E  2F50               	goto	u611
  2043  074F  2F51               	goto	u610
  2044  0750                     u611:	
  2045  0750  2FCE               	goto	l84
  2046  0751                     u610:	
  2047  0751                     l1534:	
  2048  0751  3003               	movlw	3
  2049  0752  00F4               	movwf	??_SW_UpdateState
  2050  0753  0874               	movf	??_SW_UpdateState,w
  2051  0754  00F0               	movwf	___bmul@multiplicand
  2052  0755  0877               	movf	SW_UpdateState@sw,w
  2053  0756  120A  118A  22CC  120A  118A  	fcall	___bmul
  2054  075B  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  2055  075C  0084               	movwf	4
  2056  075D  1383               	bcf	3,7	;select IRP bank0
  2057  075E  0800               	movf	0,w
  2058  075F  1D03               	btfss	3,2
  2059  0760  2F62               	goto	u621
  2060  0761  2F63               	goto	u620
  2061  0762                     u621:	
  2062  0762  2FCE               	goto	l84
  2063  0763                     u620:	
  2064  0763                     l1536:	
  2065                           
  2066                           ;SW.c: 144:                 SW_DATA[sw].state = SW_PRESSED;
  2067  0763  3002               	movlw	2
  2068  0764  00F4               	movwf	??_SW_UpdateState
  2069  0765  3003               	movlw	3
  2070  0766  00F5               	movwf	??_SW_UpdateState+1
  2071  0767  0875               	movf	??_SW_UpdateState+1,w
  2072  0768  00F0               	movwf	___bmul@multiplicand
  2073  0769  0877               	movf	SW_UpdateState@sw,w
  2074  076A  120A  118A  22CC  120A  118A  	fcall	___bmul
  2075  076F  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2076  0770  0084               	movwf	4
  2077  0771  0874               	movf	??_SW_UpdateState,w
  2078  0772  1383               	bcf	3,7	;select IRP bank0
  2079  0773  0080               	movwf	0
  2080  0774  2FCE               	goto	l84
  2081  0775                     l1538:	
  2082                           
  2083                           ;SW.c: 147:             if(SW_DATA[sw].samples[0] == (1) && SW_DATA[sw].samples[1] == (1
      +                          ))
  2084  0775  3003               	movlw	3
  2085  0776  00F4               	movwf	??_SW_UpdateState
  2086  0777  0874               	movf	??_SW_UpdateState,w
  2087  0778  00F0               	movwf	___bmul@multiplicand
  2088  0779  0877               	movf	SW_UpdateState@sw,w
  2089  077A  120A  118A  22CC  120A  118A  	fcall	___bmul
  2090  077F  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  2091  0780  0084               	movwf	4
  2092  0781  1383               	bcf	3,7	;select IRP bank0
  2093  0782  0300               	decf	0,w
  2094  0783  1D03               	btfss	3,2
  2095  0784  2F86               	goto	u631
  2096  0785  2F87               	goto	u630
  2097  0786                     u631:	
  2098  0786  2FCE               	goto	l84
  2099  0787                     u630:	
  2100  0787                     l1540:	
  2101  0787  3003               	movlw	3
  2102  0788  00F4               	movwf	??_SW_UpdateState
  2103  0789  0874               	movf	??_SW_UpdateState,w
  2104  078A  00F0               	movwf	___bmul@multiplicand
  2105  078B  0877               	movf	SW_UpdateState@sw,w
  2106  078C  120A  118A  22CC  120A  118A  	fcall	___bmul
  2107  0791  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  2108  0792  0084               	movwf	4
  2109  0793  1383               	bcf	3,7	;select IRP bank0
  2110  0794  0300               	decf	0,w
  2111  0795  1D03               	btfss	3,2
  2112  0796  2F98               	goto	u641
  2113  0797  2F99               	goto	u640
  2114  0798                     u641:	
  2115  0798  2FCE               	goto	l84
  2116  0799                     u640:	
  2117  0799                     l1542:	
  2118                           
  2119                           ;SW.c: 148:                 SW_DATA[sw].state = SW_PRE_RELEASED;
  2120  0799  3003               	movlw	3
  2121  079A  00F4               	movwf	??_SW_UpdateState
  2122  079B  3003               	movlw	3
  2123  079C  00F5               	movwf	??_SW_UpdateState+1
  2124  079D  0875               	movf	??_SW_UpdateState+1,w
  2125  079E  00F0               	movwf	___bmul@multiplicand
  2126  079F  0877               	movf	SW_UpdateState@sw,w
  2127  07A0  120A  118A  22CC  120A  118A  	fcall	___bmul
  2128  07A5  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2129  07A6  0084               	movwf	4
  2130  07A7  0874               	movf	??_SW_UpdateState,w
  2131  07A8  1383               	bcf	3,7	;select IRP bank0
  2132  07A9  0080               	movwf	0
  2133  07AA  2FCE               	goto	l84
  2134  07AB                     l1546:	
  2135  07AB  3003               	movlw	3
  2136  07AC  00F4               	movwf	??_SW_UpdateState
  2137  07AD  0874               	movf	??_SW_UpdateState,w
  2138  07AE  00F0               	movwf	___bmul@multiplicand
  2139  07AF  0877               	movf	SW_UpdateState@sw,w
  2140  07B0  120A  118A  22CC  120A  118A  	fcall	___bmul
  2141  07B5  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2142  07B6  0084               	movwf	4
  2143  07B7  1383               	bcf	3,7	;select IRP bank0
  2144  07B8  0800               	movf	0,w
  2145  07B9  00F5               	movwf	??_SW_UpdateState+1
  2146  07BA  01F6               	clrf	??_SW_UpdateState+2
  2147                           
  2148                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2149                           ; Switch size 1, requested type "simple"
  2150                           ; Number of cases is 1, Range of values is 0 to 0
  2151                           ; switch strategies available:
  2152                           ; Name         Instructions Cycles
  2153                           ; simple_byte            4     3 (average)
  2154                           ; direct_byte           11     8 (fixed)
  2155                           ; jumptable            260     6 (fixed)
  2156                           ;	Chosen strategy is simple_byte
  2157  07BB  0876               	movf	??_SW_UpdateState+2,w
  2158  07BC  3A00               	xorlw	0	; case 0
  2159  07BD  1903               	skipnz
  2160  07BE  2FC0               	goto	l2024
  2161  07BF  2FCE               	goto	l84
  2162  07C0                     l2024:	
  2163                           
  2164                           ; Switch size 1, requested type "simple"
  2165                           ; Number of cases is 4, Range of values is 0 to 3
  2166                           ; switch strategies available:
  2167                           ; Name         Instructions Cycles
  2168                           ; simple_byte           13     7 (average)
  2169                           ; direct_byte           20     8 (fixed)
  2170                           ; jumptable            260     6 (fixed)
  2171                           ;	Chosen strategy is simple_byte
  2172  07C0  0875               	movf	??_SW_UpdateState+1,w
  2173  07C1  3A00               	xorlw	0	; case 0
  2174  07C2  1903               	skipnz
  2175  07C3  2F0B               	goto	l1526
  2176  07C4  3A01               	xorlw	1	; case 1
  2177  07C5  1903               	skipnz
  2178  07C6  2F3F               	goto	l1532
  2179  07C7  3A03               	xorlw	3	; case 2
  2180  07C8  1903               	skipnz
  2181  07C9  2F75               	goto	l1538
  2182  07CA  3A01               	xorlw	1	; case 3
  2183  07CB  1903               	skipnz
  2184  07CC  2ED8               	goto	l1520
  2185  07CD  2FCE               	goto	l84
  2186  07CE                     l84:	
  2187  07CE  0008               	return
  2188  07CF                     __end_of_SW_UpdateState:	
  2189                           
  2190                           	psect	text9
  2191  02CC                     __ptext9:	
  2192 ;; *************** function ___bmul *****************
  2193 ;; Defined at:
  2194 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  multiplier      1    wreg     unsigned char 
  2197 ;;  multiplicand    1    0[COMMON] unsigned char 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  multiplier      1    3[COMMON] unsigned char 
  2200 ;;  product         1    2[COMMON] unsigned char 
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      unsigned char 
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2210 ;;      Params:         1       0       0       0       0
  2211 ;;      Locals:         2       0       0       0       0
  2212 ;;      Temps:          1       0       0       0       0
  2213 ;;      Totals:         4       0       0       0       0
  2214 ;;Total ram usage:        4 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; This function calls:
  2217 ;;		Nothing
  2218 ;; This function is called by:
  2219 ;;		_SW_GetState
  2220 ;;		_SW_UpdateState
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           
  2225                           ;psect for function ___bmul
  2226  02CC                     ___bmul:	
  2227                           
  2228                           ;incstack = 0
  2229                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2230                           ;___bmul@multiplier stored from wreg
  2231  02CC  00F3               	movwf	___bmul@multiplier
  2232  02CD                     l1438:	
  2233  02CD  01F2               	clrf	___bmul@product
  2234  02CE                     l1440:	
  2235  02CE  1C73               	btfss	___bmul@multiplier,0
  2236  02CF  2AD1               	goto	u411
  2237  02D0  2AD2               	goto	u410
  2238  02D1                     u411:	
  2239  02D1  2AD6               	goto	l1444
  2240  02D2                     u410:	
  2241  02D2                     l1442:	
  2242  02D2  0870               	movf	___bmul@multiplicand,w
  2243  02D3  00F1               	movwf	??___bmul
  2244  02D4  0871               	movf	??___bmul,w
  2245  02D5  07F2               	addwf	___bmul@product,f
  2246  02D6                     l1444:	
  2247  02D6  1003               	clrc
  2248  02D7  0DF0               	rlf	___bmul@multiplicand,f
  2249  02D8                     l1446:	
  2250  02D8  1003               	clrc
  2251  02D9  0CF3               	rrf	___bmul@multiplier,f
  2252  02DA  0873               	movf	___bmul@multiplier,w
  2253  02DB  1D03               	btfss	3,2
  2254  02DC  2ADE               	goto	u421
  2255  02DD  2ADF               	goto	u420
  2256  02DE                     u421:	
  2257  02DE  2ACE               	goto	l1440
  2258  02DF                     u420:	
  2259  02DF                     l1448:	
  2260  02DF  0872               	movf	___bmul@product,w
  2261  02E0                     l366:	
  2262  02E0  0008               	return
  2263  02E1                     __end_of___bmul:	
  2264                           
  2265                           	psect	text10
  2266  0401                     __ptext10:	
  2267 ;; *************** function _SW_Init *****************
  2268 ;; Defined at:
  2269 ;;		line 54 in file "SW.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;		None
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;		None
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  1    wreg      void 
  2276 ;; Registers used:
  2277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2283 ;;      Params:         0       0       0       0       0
  2284 ;;      Locals:         0       0       0       0       0
  2285 ;;      Temps:          1       0       0       0       0
  2286 ;;      Totals:         1       0       0       0       0
  2287 ;;Total ram usage:        1 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; Hardware stack levels required when called:    1
  2290 ;; This function calls:
  2291 ;;		_GPIO_Init_Pin
  2292 ;; This function is called by:
  2293 ;;		_main
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           
  2298                           ;psect for function _SW_Init
  2299  0401                     _SW_Init:	
  2300  0401                     l1706:	
  2301                           ;incstack = 0
  2302                           ; Regs used in _SW_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2303                           
  2304                           
  2305                           ;SW.c: 58:     GPIO_Init_Pin(&(TRISB),(0),(1));
  2306  0401  3086               	movlw	134
  2307  0402  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  2308  0403  3000               	movlw	0
  2309  0404  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  2310  0405  01F2               	clrf	GPIO_Init_Pin@pin_number
  2311  0406  01F3               	clrf	GPIO_Init_Pin@dir
  2312  0407  0AF3               	incf	GPIO_Init_Pin@dir,f
  2313  0408  120A  118A  24DA  120A  118A  	fcall	_GPIO_Init_Pin
  2314  040D                     l1708:	
  2315                           
  2316                           ;SW.c: 59:     SW_DATA[SW_PLUS].state = SW_RELEASED;
  2317  040D  1283               	bcf	3,5	;RP0=0, select bank0
  2318  040E  1303               	bcf	3,6	;RP1=0, select bank0
  2319  040F  01A2               	clrf	_SW_DATA+2
  2320  0410                     l1710:	
  2321                           
  2322                           ;SW.c: 60:     SW_DATA[SW_PLUS].samples[0] = (1);
  2323  0410  01A0               	clrf	_SW_DATA
  2324  0411  0AA0               	incf	_SW_DATA,f
  2325  0412                     l1712:	
  2326                           
  2327                           ;SW.c: 61:     SW_DATA[SW_PLUS].samples[1] = (1);
  2328  0412  01A1               	clrf	_SW_DATA+1
  2329  0413  0AA1               	incf	_SW_DATA+1,f
  2330  0414                     l1714:	
  2331                           
  2332                           ;SW.c: 63:     GPIO_Init_Pin(&(TRISB),(1),(1));
  2333  0414  3086               	movlw	134
  2334  0415  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  2335  0416  3000               	movlw	0
  2336  0417  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  2337  0418  01F2               	clrf	GPIO_Init_Pin@pin_number
  2338  0419  0AF2               	incf	GPIO_Init_Pin@pin_number,f
  2339  041A  01F3               	clrf	GPIO_Init_Pin@dir
  2340  041B  0AF3               	incf	GPIO_Init_Pin@dir,f
  2341  041C  120A  118A  24DA  120A  118A  	fcall	_GPIO_Init_Pin
  2342                           
  2343                           ;SW.c: 64:     SW_DATA[SW_MINUS].state = SW_RELEASED;
  2344  0421  1283               	bcf	3,5	;RP0=0, select bank0
  2345  0422  1303               	bcf	3,6	;RP1=0, select bank0
  2346  0423  01A5               	clrf	_SW_DATA+5
  2347  0424                     l1716:	
  2348                           
  2349                           ;SW.c: 65:     SW_DATA[SW_MINUS].samples[0] = (1);
  2350  0424  01A3               	clrf	_SW_DATA+3
  2351  0425  0AA3               	incf	_SW_DATA+3,f
  2352  0426                     l1718:	
  2353                           
  2354                           ;SW.c: 66:     SW_DATA[SW_MINUS].samples[1] = (1);
  2355  0426  01A4               	clrf	_SW_DATA+4
  2356  0427  0AA4               	incf	_SW_DATA+4,f
  2357  0428                     l1720:	
  2358                           
  2359                           ;SW.c: 68:     GPIO_Init_Pin(&(TRISB),(2),(1));
  2360  0428  3086               	movlw	134
  2361  0429  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  2362  042A  3000               	movlw	0
  2363  042B  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  2364  042C  3002               	movlw	2
  2365  042D  00F8               	movwf	??_SW_Init
  2366  042E  0878               	movf	??_SW_Init,w
  2367  042F  00F2               	movwf	GPIO_Init_Pin@pin_number
  2368  0430  01F3               	clrf	GPIO_Init_Pin@dir
  2369  0431  0AF3               	incf	GPIO_Init_Pin@dir,f
  2370  0432  120A  118A  24DA  120A  118A  	fcall	_GPIO_Init_Pin
  2371  0437                     l1722:	
  2372                           
  2373                           ;SW.c: 69:     SW_DATA[SW_PRESSURE].state = SW_RELEASED;
  2374  0437  1283               	bcf	3,5	;RP0=0, select bank0
  2375  0438  1303               	bcf	3,6	;RP1=0, select bank0
  2376  0439  01A8               	clrf	_SW_DATA+8
  2377  043A                     l1724:	
  2378                           
  2379                           ;SW.c: 70:     SW_DATA[SW_PRESSURE].samples[0] = (1);
  2380  043A  01A6               	clrf	_SW_DATA+6
  2381  043B  0AA6               	incf	_SW_DATA+6,f
  2382  043C                     l1726:	
  2383                           
  2384                           ;SW.c: 71:     SW_DATA[SW_PRESSURE].samples[1] = (1);
  2385  043C  01A7               	clrf	_SW_DATA+7
  2386  043D  0AA7               	incf	_SW_DATA+7,f
  2387  043E                     l61:	
  2388  043E  0008               	return
  2389  043F                     __end_of_SW_Init:	
  2390                           
  2391                           	psect	text11
  2392  036D                     __ptext11:	
  2393 ;; *************** function _SSD_Update *****************
  2394 ;; Defined at:
  2395 ;;		line 83 in file "SSD.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2409 ;;      Params:         0       0       0       0       0
  2410 ;;      Locals:         0       0       0       0       0
  2411 ;;      Temps:          1       0       0       0       0
  2412 ;;      Totals:         1       0       0       0       0
  2413 ;;Total ram usage:        1 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    1
  2416 ;; This function calls:
  2417 ;;		_SSD_Data_write
  2418 ;;		_SSD_Disable
  2419 ;;		_SSD_Enable
  2420 ;; This function is called by:
  2421 ;;		_main
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           
  2426                           ;psect for function _SSD_Update
  2427  036D                     _SSD_Update:	
  2428  036D                     l1778:	
  2429                           ;incstack = 0
  2430                           ; Regs used in _SSD_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2431                           
  2432                           
  2433                           ;SSD.c: 88:     static uint8 SSD_Time_Counter = 0;;SSD.c: 89:     SSD_Time_Counter += (5
      +                          );
  2434  036D  3005               	movlw	5
  2435  036E  00F3               	movwf	??_SSD_Update
  2436  036F  0873               	movf	??_SSD_Update,w
  2437  0370  1283               	bcf	3,5	;RP0=0, select bank0
  2438  0371  1303               	bcf	3,6	;RP1=0, select bank0
  2439  0372  07B0               	addwf	SSD_Update@SSD_Time_Counter,f
  2440                           
  2441                           ;SSD.c: 91:     if(SSD_Time_Counter != (10))
  2442  0373  300A               	movlw	10
  2443  0374  0630               	xorwf	SSD_Update@SSD_Time_Counter,w
  2444  0375  1903               	btfsc	3,2
  2445  0376  2B78               	goto	u771
  2446  0377  2B79               	goto	u770
  2447  0378                     u771:	
  2448  0378  2B7A               	goto	l1782
  2449  0379                     u770:	
  2450  0379  2B9B               	goto	l165
  2451  037A                     l1782:	
  2452                           
  2453                           ;SSD.c: 95:     SSD_Time_Counter = 0;
  2454  037A  01B0               	clrf	SSD_Update@SSD_Time_Counter
  2455  037B                     l1784:	
  2456                           
  2457                           ;SSD.c: 98:     SSD_Disable(currentSSD);
  2458  037B  0831               	movf	_currentSSD,w
  2459  037C  120A  118A  231A  120A  118A  	fcall	_SSD_Disable
  2460  0381                     l1786:	
  2461                           
  2462                           ;SSD.c: 100:     currentSSD++;
  2463  0381  3001               	movlw	1
  2464  0382  00F3               	movwf	??_SSD_Update
  2465  0383  0873               	movf	??_SSD_Update,w
  2466  0384  1283               	bcf	3,5	;RP0=0, select bank0
  2467  0385  1303               	bcf	3,6	;RP1=0, select bank0
  2468  0386  07B1               	addwf	_currentSSD,f
  2469  0387                     l1788:	
  2470                           
  2471                           ;SSD.c: 101:     if(currentSSD > SSD_THIRD)currentSSD = 0;
  2472  0387  3003               	movlw	3
  2473  0388  0231               	subwf	_currentSSD,w
  2474  0389  1C03               	skipc
  2475  038A  2B8C               	goto	u781
  2476  038B  2B8D               	goto	u780
  2477  038C                     u781:	
  2478  038C  2B8E               	goto	l1792
  2479  038D                     u780:	
  2480  038D                     l1790:	
  2481  038D  01B1               	clrf	_currentSSD
  2482  038E                     l1792:	
  2483                           
  2484                           ;SSD.c: 103:     SSD_Data_write();
  2485  038E  120A  118A  2285  120A  118A  	fcall	_SSD_Data_write
  2486  0393                     l1794:	
  2487                           
  2488                           ;SSD.c: 105:     SSD_Enable(currentSSD);
  2489  0393  1283               	bcf	3,5	;RP0=0, select bank0
  2490  0394  1303               	bcf	3,6	;RP1=0, select bank0
  2491  0395  0831               	movf	_currentSSD,w
  2492  0396  120A  118A  2342  120A  118A  	fcall	_SSD_Enable
  2493  039B                     l165:	
  2494  039B  0008               	return
  2495  039C                     __end_of_SSD_Update:	
  2496                           
  2497                           	psect	text12
  2498  0342                     __ptext12:	
  2499 ;; *************** function _SSD_Enable *****************
  2500 ;; Defined at:
  2501 ;;		line 126 in file "SSD.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  s               1    wreg     enum E865
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  s               1    2[COMMON] enum E865
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      void 
  2508 ;; Registers used:
  2509 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2515 ;;      Params:         0       0       0       0       0
  2516 ;;      Locals:         1       0       0       0       0
  2517 ;;      Temps:          2       0       0       0       0
  2518 ;;      Totals:         3       0       0       0       0
  2519 ;;Total ram usage:        3 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_SSD_Update
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           
  2529                           ;psect for function _SSD_Enable
  2530  0342                     _SSD_Enable:	
  2531                           
  2532                           ;incstack = 0
  2533                           ; Regs used in _SSD_Enable: [wreg-fsr0h+status,2+status,0]
  2534                           ;SSD_Enable@s stored from wreg
  2535  0342  00F2               	movwf	SSD_Enable@s
  2536  0343                     l1614:	
  2537                           
  2538                           ;SSD.c: 126: void SSD_Enable(SSD_t s);SSD.c: 127: {;SSD.c: 128:     switch(s)
  2539  0343  2B59               	goto	l1622
  2540  0344                     l1616:	
  2541                           
  2542                           ;SSD.c: 131:             (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_ON<<(7)));
  2543  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2544  0345  1303               	bcf	3,6	;RP1=0, select bank0
  2545  0346  0806               	movf	6,w	;volatile
  2546  0347  397F               	andlw	127
  2547  0348  3880               	iorlw	128
  2548  0349  0086               	movwf	6	;volatile
  2549                           
  2550                           ;SSD.c: 132:             break;
  2551  034A  2B6C               	goto	l184
  2552  034B                     l1618:	
  2553                           
  2554                           ;SSD.c: 134:             (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_ON<<(6)));
  2555  034B  1283               	bcf	3,5	;RP0=0, select bank0
  2556  034C  1303               	bcf	3,6	;RP1=0, select bank0
  2557  034D  0806               	movf	6,w	;volatile
  2558  034E  39BF               	andlw	191
  2559  034F  3840               	iorlw	64
  2560  0350  0086               	movwf	6	;volatile
  2561                           
  2562                           ;SSD.c: 135:             break;
  2563  0351  2B6C               	goto	l184
  2564  0352                     l1620:	
  2565                           
  2566                           ;SSD.c: 137:             (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_ON<<(5)));
  2567  0352  1283               	bcf	3,5	;RP0=0, select bank0
  2568  0353  1303               	bcf	3,6	;RP1=0, select bank0
  2569  0354  0806               	movf	6,w	;volatile
  2570  0355  39DF               	andlw	223
  2571  0356  3820               	iorlw	32
  2572  0357  0086               	movwf	6	;volatile
  2573                           
  2574                           ;SSD.c: 138:             break;
  2575  0358  2B6C               	goto	l184
  2576  0359                     l1622:	
  2577  0359  0872               	movf	SSD_Enable@s,w
  2578  035A  00F0               	movwf	??_SSD_Enable
  2579  035B  01F1               	clrf	??_SSD_Enable+1
  2580                           
  2581                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2582                           ; Switch size 1, requested type "simple"
  2583                           ; Number of cases is 1, Range of values is 0 to 0
  2584                           ; switch strategies available:
  2585                           ; Name         Instructions Cycles
  2586                           ; simple_byte            4     3 (average)
  2587                           ; direct_byte           11     8 (fixed)
  2588                           ; jumptable            260     6 (fixed)
  2589                           ;	Chosen strategy is simple_byte
  2590  035C  0871               	movf	??_SSD_Enable+1,w
  2591  035D  3A00               	xorlw	0	; case 0
  2592  035E  1903               	skipnz
  2593  035F  2B61               	goto	l2026
  2594  0360  2B6C               	goto	l184
  2595  0361                     l2026:	
  2596                           
  2597                           ; Switch size 1, requested type "simple"
  2598                           ; Number of cases is 3, Range of values is 0 to 2
  2599                           ; switch strategies available:
  2600                           ; Name         Instructions Cycles
  2601                           ; simple_byte           10     6 (average)
  2602                           ; direct_byte           17     8 (fixed)
  2603                           ; jumptable            260     6 (fixed)
  2604                           ;	Chosen strategy is simple_byte
  2605  0361  0870               	movf	??_SSD_Enable,w
  2606  0362  3A00               	xorlw	0	; case 0
  2607  0363  1903               	skipnz
  2608  0364  2B44               	goto	l1616
  2609  0365  3A01               	xorlw	1	; case 1
  2610  0366  1903               	skipnz
  2611  0367  2B4B               	goto	l1618
  2612  0368  3A03               	xorlw	3	; case 2
  2613  0369  1903               	skipnz
  2614  036A  2B52               	goto	l1620
  2615  036B  2B6C               	goto	l184
  2616  036C                     l184:	
  2617  036C  0008               	return
  2618  036D                     __end_of_SSD_Enable:	
  2619                           
  2620                           	psect	text13
  2621  031A                     __ptext13:	
  2622 ;; *************** function _SSD_Disable *****************
  2623 ;; Defined at:
  2624 ;;		line 108 in file "SSD.c"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;  s               1    wreg     enum E865
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;  s               1    2[COMMON] enum E865
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  1    wreg      void 
  2631 ;; Registers used:
  2632 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2638 ;;      Params:         0       0       0       0       0
  2639 ;;      Locals:         1       0       0       0       0
  2640 ;;      Temps:          2       0       0       0       0
  2641 ;;      Totals:         3       0       0       0       0
  2642 ;;Total ram usage:        3 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; This function calls:
  2645 ;;		Nothing
  2646 ;; This function is called by:
  2647 ;;		_SSD_Update
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           
  2652                           ;psect for function _SSD_Disable
  2653  031A                     _SSD_Disable:	
  2654                           
  2655                           ;incstack = 0
  2656                           ; Regs used in _SSD_Disable: [wreg-fsr0h+status,2+status,0]
  2657                           ;SSD_Disable@s stored from wreg
  2658  031A  00F2               	movwf	SSD_Disable@s
  2659  031B                     l1598:	
  2660                           
  2661                           ;SSD.c: 108: void SSD_Disable(SSD_t s);SSD.c: 109: {;SSD.c: 110:     switch(s)
  2662  031B  2B2E               	goto	l1606
  2663  031C                     l1600:	
  2664                           
  2665                           ;SSD.c: 113:             (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_OFF<<(7)));
  2666  031C  1283               	bcf	3,5	;RP0=0, select bank0
  2667  031D  1303               	bcf	3,6	;RP1=0, select bank0
  2668  031E  0806               	movf	6,w	;volatile
  2669  031F  397F               	andlw	127
  2670  0320  0086               	movwf	6	;volatile
  2671                           
  2672                           ;SSD.c: 114:             break;
  2673  0321  2B41               	goto	l175
  2674  0322                     l1602:	
  2675                           
  2676                           ;SSD.c: 116:             (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_OFF<<(6)));
  2677  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2678  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2679  0324  0806               	movf	6,w	;volatile
  2680  0325  39BF               	andlw	191
  2681  0326  0086               	movwf	6	;volatile
  2682                           
  2683                           ;SSD.c: 117:             break;
  2684  0327  2B41               	goto	l175
  2685  0328                     l1604:	
  2686                           
  2687                           ;SSD.c: 119:             (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_OFF<<(5)));
  2688  0328  1283               	bcf	3,5	;RP0=0, select bank0
  2689  0329  1303               	bcf	3,6	;RP1=0, select bank0
  2690  032A  0806               	movf	6,w	;volatile
  2691  032B  39DF               	andlw	223
  2692  032C  0086               	movwf	6	;volatile
  2693                           
  2694                           ;SSD.c: 120:             break;
  2695  032D  2B41               	goto	l175
  2696  032E                     l1606:	
  2697  032E  0872               	movf	SSD_Disable@s,w
  2698  032F  00F0               	movwf	??_SSD_Disable
  2699  0330  01F1               	clrf	??_SSD_Disable+1
  2700                           
  2701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2702                           ; Switch size 1, requested type "simple"
  2703                           ; Number of cases is 1, Range of values is 0 to 0
  2704                           ; switch strategies available:
  2705                           ; Name         Instructions Cycles
  2706                           ; simple_byte            4     3 (average)
  2707                           ; direct_byte           11     8 (fixed)
  2708                           ; jumptable            260     6 (fixed)
  2709                           ;	Chosen strategy is simple_byte
  2710  0331  0871               	movf	??_SSD_Disable+1,w
  2711  0332  3A00               	xorlw	0	; case 0
  2712  0333  1903               	skipnz
  2713  0334  2B36               	goto	l2028
  2714  0335  2B41               	goto	l175
  2715  0336                     l2028:	
  2716                           
  2717                           ; Switch size 1, requested type "simple"
  2718                           ; Number of cases is 3, Range of values is 0 to 2
  2719                           ; switch strategies available:
  2720                           ; Name         Instructions Cycles
  2721                           ; simple_byte           10     6 (average)
  2722                           ; direct_byte           17     8 (fixed)
  2723                           ; jumptable            260     6 (fixed)
  2724                           ;	Chosen strategy is simple_byte
  2725  0336  0870               	movf	??_SSD_Disable,w
  2726  0337  3A00               	xorlw	0	; case 0
  2727  0338  1903               	skipnz
  2728  0339  2B1C               	goto	l1600
  2729  033A  3A01               	xorlw	1	; case 1
  2730  033B  1903               	skipnz
  2731  033C  2B22               	goto	l1602
  2732  033D  3A03               	xorlw	3	; case 2
  2733  033E  1903               	skipnz
  2734  033F  2B28               	goto	l1604
  2735  0340  2B41               	goto	l175
  2736  0341                     l175:	
  2737  0341  0008               	return
  2738  0342                     __end_of_SSD_Disable:	
  2739                           
  2740                           	psect	text14
  2741  0285                     __ptext14:	
  2742 ;; *************** function _SSD_Data_write *****************
  2743 ;; Defined at:
  2744 ;;		line 146 in file "SSD.c"
  2745 ;; Parameters:    Size  Location     Type
  2746 ;;		None
  2747 ;; Auto vars:     Size  Location     Type
  2748 ;;		None
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      void 
  2751 ;; Registers used:
  2752 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2758 ;;      Params:         0       0       0       0       0
  2759 ;;      Locals:         0       0       0       0       0
  2760 ;;      Temps:          0       0       0       0       0
  2761 ;;      Totals:         0       0       0       0       0
  2762 ;;Total ram usage:        0 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; This function calls:
  2765 ;;		Nothing
  2766 ;; This function is called by:
  2767 ;;		_SSD_Update
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           
  2772                           ;psect for function _SSD_Data_write
  2773  0285                     _SSD_Data_write:	
  2774  0285                     l1612:	
  2775                           ;incstack = 0
  2776                           ; Regs used in _SSD_Data_write: [wreg-fsr0h+status,2+status,0]
  2777                           
  2778                           
  2779                           ;SSD.c: 149:     (((PORTD))=(SSD_LOT_ARR[Buffer[currentSSD]]));
  2780  0285  1283               	bcf	3,5	;RP0=0, select bank0
  2781  0286  1303               	bcf	3,6	;RP1=0, select bank0
  2782  0287  0831               	movf	_currentSSD,w
  2783  0288  3E29               	addlw	(low (_Buffer| 0))& (0+255)
  2784  0289  0084               	movwf	4
  2785  028A  1383               	bcf	3,7	;select IRP bank0
  2786  028B  0800               	movf	0,w
  2787  028C  3E32               	addlw	(low (_SSD_LOT_ARR| 0))& (0+255)
  2788  028D  0084               	movwf	4
  2789  028E  0800               	movf	0,w
  2790  028F  0088               	movwf	8	;volatile
  2791  0290                     l187:	
  2792  0290  0008               	return
  2793  0291                     __end_of_SSD_Data_write:	
  2794                           
  2795                           	psect	text15
  2796  05B1                     __ptext15:	
  2797 ;; *************** function _Disp_Update *****************
  2798 ;; Defined at:
  2799 ;;		line 29 in file "Disp.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;		None
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;		None
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  1    wreg      void 
  2806 ;; Registers used:
  2807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2813 ;;      Params:         0       0       0       0       0
  2814 ;;      Locals:         0       0       0       0       0
  2815 ;;      Temps:          2       0       0       0       0
  2816 ;;      Totals:         2       0       0       0       0
  2817 ;;Total ram usage:        2 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    1
  2820 ;; This function calls:
  2821 ;;		_SSD_Set_Symbol
  2822 ;;		_VC_GetSpeed
  2823 ;; This function is called by:
  2824 ;;		_main
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           
  2829                           ;psect for function _Disp_Update
  2830  05B1                     _Disp_Update:	
  2831  05B1                     l1758:	
  2832                           ;incstack = 0
  2833                           ; Regs used in _Disp_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2834                           
  2835                           
  2836                           ;Disp.c: 34:     static uint8 DISP_Time_Counter = 10;;Disp.c: 35:     DISP_Time_Counter 
      +                          += (5);
  2837  05B1  3005               	movlw	5
  2838  05B2  00F3               	movwf	??_Disp_Update
  2839  05B3  0873               	movf	??_Disp_Update,w
  2840  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  2841  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  2842  05B6  07B6               	addwf	Disp_Update@DISP_Time_Counter,f
  2843                           
  2844                           ;Disp.c: 37:     if(DISP_Time_Counter != (20))
  2845  05B7  3014               	movlw	20
  2846  05B8  0636               	xorwf	Disp_Update@DISP_Time_Counter,w
  2847  05B9  1903               	btfsc	3,2
  2848  05BA  2DBC               	goto	u761
  2849  05BB  2DBD               	goto	u760
  2850  05BC                     u761:	
  2851  05BC  2DBE               	goto	l1762
  2852  05BD                     u760:	
  2853  05BD  2E25               	goto	l249
  2854  05BE                     l1762:	
  2855                           
  2856                           ;Disp.c: 41:     DISP_Time_Counter = 0;
  2857  05BE  01B6               	clrf	Disp_Update@DISP_Time_Counter
  2858                           
  2859                           ;Disp.c: 43:     switch(VC_GetSpeed())
  2860  05BF  2E0E               	goto	l1772
  2861  05C0                     l1764:	
  2862                           
  2863                           ;Disp.c: 46:             SSD_Set_Symbol(SSD_L_3,SSD_THIRD);
  2864  05C0  3002               	movlw	2
  2865  05C1  00F3               	movwf	??_Disp_Update
  2866  05C2  0873               	movf	??_Disp_Update,w
  2867  05C3  00F0               	movwf	SSD_Set_Symbol@index
  2868  05C4  3002               	movlw	2
  2869  05C5  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  2870                           
  2871                           ;Disp.c: 47:             SSD_Set_Symbol(SSD_L_2,SSD_SECOND);
  2872  05CA  01F0               	clrf	SSD_Set_Symbol@index
  2873  05CB  0AF0               	incf	SSD_Set_Symbol@index,f
  2874  05CC  3001               	movlw	1
  2875  05CD  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  2876                           
  2877                           ;Disp.c: 48:             SSD_Set_Symbol(SSD_L_1,SSD_FIRST);
  2878  05D2  01F0               	clrf	SSD_Set_Symbol@index
  2879  05D3  3000               	movlw	0
  2880  05D4  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  2881                           
  2882                           ;Disp.c: 49:             break;
  2883  05D9  2E25               	goto	l249
  2884  05DA                     l1766:	
  2885                           
  2886                           ;Disp.c: 51:             SSD_Set_Symbol(SSD_L_1,SSD_FIRST);
  2887  05DA  01F0               	clrf	SSD_Set_Symbol@index
  2888  05DB  3000               	movlw	0
  2889  05DC  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  2890                           
  2891                           ;Disp.c: 52:             SSD_Set_Symbol(SSD_L_2,SSD_SECOND);
  2892  05E1  01F0               	clrf	SSD_Set_Symbol@index
  2893  05E2  0AF0               	incf	SSD_Set_Symbol@index,f
  2894  05E3  3001               	movlw	1
  2895  05E4  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  2896                           
  2897                           ;Disp.c: 53:             SSD_Set_Symbol(SSD_NULL,SSD_THIRD);
  2898  05E9  3002               	movlw	2
  2899  05EA  00F3               	movwf	??_Disp_Update
  2900  05EB  0873               	movf	??_Disp_Update,w
  2901  05EC  00F0               	movwf	SSD_Set_Symbol@index
  2902  05ED  3003               	movlw	3
  2903  05EE  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  2904                           
  2905                           ;Disp.c: 54:             break;
  2906  05F3  2E25               	goto	l249
  2907  05F4                     l1768:	
  2908                           
  2909                           ;Disp.c: 56:             SSD_Set_Symbol(SSD_L_1,SSD_FIRST);
  2910  05F4  01F0               	clrf	SSD_Set_Symbol@index
  2911  05F5  3000               	movlw	0
  2912  05F6  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  2913                           
  2914                           ;Disp.c: 57:             SSD_Set_Symbol(SSD_NULL,SSD_SECOND);
  2915  05FB  01F0               	clrf	SSD_Set_Symbol@index
  2916  05FC  0AF0               	incf	SSD_Set_Symbol@index,f
  2917  05FD  3003               	movlw	3
  2918  05FE  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  2919                           
  2920                           ;Disp.c: 58:             SSD_Set_Symbol(SSD_NULL,SSD_THIRD);
  2921  0603  3002               	movlw	2
  2922  0604  00F3               	movwf	??_Disp_Update
  2923  0605  0873               	movf	??_Disp_Update,w
  2924  0606  00F0               	movwf	SSD_Set_Symbol@index
  2925  0607  3003               	movlw	3
  2926  0608  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  2927                           
  2928                           ;Disp.c: 59:             break;
  2929  060D  2E25               	goto	l249
  2930  060E                     l1772:	
  2931  060E  120A  118A  2269  120A  118A  	fcall	_VC_GetSpeed
  2932  0613  00F3               	movwf	??_Disp_Update
  2933  0614  01F4               	clrf	??_Disp_Update+1
  2934                           
  2935                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2936                           ; Switch size 1, requested type "simple"
  2937                           ; Number of cases is 1, Range of values is 0 to 0
  2938                           ; switch strategies available:
  2939                           ; Name         Instructions Cycles
  2940                           ; simple_byte            4     3 (average)
  2941                           ; direct_byte           11     8 (fixed)
  2942                           ; jumptable            260     6 (fixed)
  2943                           ;	Chosen strategy is simple_byte
  2944  0615  0874               	movf	??_Disp_Update+1,w
  2945  0616  3A00               	xorlw	0	; case 0
  2946  0617  1903               	skipnz
  2947  0618  2E1A               	goto	l2030
  2948  0619  2E25               	goto	l249
  2949  061A                     l2030:	
  2950                           
  2951                           ; Switch size 1, requested type "simple"
  2952                           ; Number of cases is 3, Range of values is 10 to 140
  2953                           ; switch strategies available:
  2954                           ; Name         Instructions Cycles
  2955                           ; simple_byte           10     6 (average)
  2956                           ; jumptable            263     9 (fixed)
  2957                           ;	Chosen strategy is simple_byte
  2958  061A  0873               	movf	??_Disp_Update,w
  2959  061B  3A0A               	xorlw	10	; case 10
  2960  061C  1903               	skipnz
  2961  061D  2DC0               	goto	l1764
  2962  061E  3A50               	xorlw	80	; case 90
  2963  061F  1903               	skipnz
  2964  0620  2DDA               	goto	l1766
  2965  0621  3AD6               	xorlw	214	; case 140
  2966  0622  1903               	skipnz
  2967  0623  2DF4               	goto	l1768
  2968  0624  2E25               	goto	l249
  2969  0625                     l249:	
  2970  0625  0008               	return
  2971  0626                     __end_of_Disp_Update:	
  2972                           
  2973                           	psect	text16
  2974  0269                     __ptext16:	
  2975 ;; *************** function _VC_GetSpeed *****************
  2976 ;; Defined at:
  2977 ;;		line 44 in file "Vacuum.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;		None
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      enum E850
  2984 ;; Registers used:
  2985 ;;		wreg
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2991 ;;      Params:         0       0       0       0       0
  2992 ;;      Locals:         0       0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0
  2994 ;;      Totals:         0       0       0       0       0
  2995 ;;Total ram usage:        0 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; This function calls:
  2998 ;;		Nothing
  2999 ;; This function is called by:
  3000 ;;		_Disp_Update
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           
  3005                           ;psect for function _VC_GetSpeed
  3006  0269                     _VC_GetSpeed:	
  3007  0269                     l1628:	
  3008                           ;incstack = 0
  3009                           ; Regs used in _VC_GetSpeed: [wreg]
  3010                           
  3011                           
  3012                           ;Vacuum.c: 47:     return motor_speed;
  3013  0269  1283               	bcf	3,5	;RP0=0, select bank0
  3014  026A  1303               	bcf	3,6	;RP1=0, select bank0
  3015  026B  083B               	movf	_motor_speed,w
  3016  026C                     l205:	
  3017  026C  0008               	return
  3018  026D                     __end_of_VC_GetSpeed:	
  3019                           
  3020                           	psect	text17
  3021  02E1                     __ptext17:	
  3022 ;; *************** function _Disp_Init *****************
  3023 ;; Defined at:
  3024 ;;		line 22 in file "Disp.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;		None
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3038 ;;      Params:         0       0       0       0       0
  3039 ;;      Locals:         0       0       0       0       0
  3040 ;;      Temps:          1       0       0       0       0
  3041 ;;      Totals:         1       0       0       0       0
  3042 ;;Total ram usage:        1 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    2
  3045 ;; This function calls:
  3046 ;;		_SSD_Init
  3047 ;; This function is called by:
  3048 ;;		_main
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           
  3053                           ;psect for function _Disp_Init
  3054  02E1                     _Disp_Init:	
  3055  02E1                     l1704:	
  3056                           ;incstack = 0
  3057                           ; Regs used in _Disp_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3058                           
  3059                           
  3060                           ;Disp.c: 25:     SSD_Init(SSD_NULL,SSD_FIRST);
  3061  02E1  01F8               	clrf	SSD_Init@ssd
  3062  02E2  3003               	movlw	3
  3063  02E3  120A  118A  253C  120A  118A  	fcall	_SSD_Init
  3064                           
  3065                           ;Disp.c: 26:     SSD_Init(SSD_NULL,SSD_SECOND);
  3066  02E8  01F8               	clrf	SSD_Init@ssd
  3067  02E9  0AF8               	incf	SSD_Init@ssd,f
  3068  02EA  3003               	movlw	3
  3069  02EB  120A  118A  253C  120A  118A  	fcall	_SSD_Init
  3070                           
  3071                           ;Disp.c: 27:     SSD_Init(SSD_NULL,SSD_THIRD);
  3072  02F0  3002               	movlw	2
  3073  02F1  00FC               	movwf	??_Disp_Init
  3074  02F2  087C               	movf	??_Disp_Init,w
  3075  02F3  00F8               	movwf	SSD_Init@ssd
  3076  02F4  3003               	movlw	3
  3077  02F5  120A  118A  253C  120A  118A  	fcall	_SSD_Init
  3078  02FA                     l243:	
  3079  02FA  0008               	return
  3080  02FB                     __end_of_Disp_Init:	
  3081                           
  3082                           	psect	text18
  3083  053C                     __ptext18:	
  3084 ;; *************** function _SSD_Init *****************
  3085 ;; Defined at:
  3086 ;;		line 51 in file "SSD.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  sym             1    wreg     enum E859
  3089 ;;  ssd             1    8[COMMON] enum E865
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  sym             1   11[COMMON] enum E859
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      void 
  3094 ;; Registers used:
  3095 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3101 ;;      Params:         1       0       0       0       0
  3102 ;;      Locals:         1       0       0       0       0
  3103 ;;      Temps:          2       0       0       0       0
  3104 ;;      Totals:         4       0       0       0       0
  3105 ;;Total ram usage:        4 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    1
  3108 ;; This function calls:
  3109 ;;		_GPIO_Init_Pin
  3110 ;;		_GPIO_Init_Port
  3111 ;;		_SSD_Set_Symbol
  3112 ;; This function is called by:
  3113 ;;		_Disp_Init
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           
  3118                           ;psect for function _SSD_Init
  3119  053C                     _SSD_Init:	
  3120                           
  3121                           ;incstack = 0
  3122                           ; Regs used in _SSD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3123                           ;SSD_Init@sym stored from wreg
  3124  053C  00FB               	movwf	SSD_Init@sym
  3125  053D                     l1570:	
  3126                           
  3127                           ;SSD.c: 51: void SSD_Init(SSD_Symbol_t sym,SSD_t ssd);SSD.c: 52: {;SSD.c: 54:     GPIO_I
      +                          nit_Port(&(TRISD),(0));
  3128  053D  3088               	movlw	136
  3129  053E  00F0               	movwf	GPIO_Init_Port@DirRegAddress
  3130  053F  3000               	movlw	0
  3131  0540  00F1               	movwf	GPIO_Init_Port@DirRegAddress+1
  3132  0541  01F2               	clrf	GPIO_Init_Port@dir
  3133  0542  120A  118A  248A  120A  118A  	fcall	_GPIO_Init_Port
  3134                           
  3135                           ;SSD.c: 56:     switch(ssd)
  3136  0547  2D9D               	goto	l1592
  3137  0548                     l1572:	
  3138                           
  3139                           ;SSD.c: 60:             GPIO_Init_Pin(&(TRISB),(7),(0));
  3140  0548  3086               	movlw	134
  3141  0549  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  3142  054A  3000               	movlw	0
  3143  054B  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  3144  054C  3007               	movlw	7
  3145  054D  00F9               	movwf	??_SSD_Init
  3146  054E  0879               	movf	??_SSD_Init,w
  3147  054F  00F2               	movwf	GPIO_Init_Pin@pin_number
  3148  0550  01F3               	clrf	GPIO_Init_Pin@dir
  3149  0551  120A  118A  24DA  120A  118A  	fcall	_GPIO_Init_Pin
  3150  0556                     l1574:	
  3151                           
  3152                           ;SSD.c: 61:             (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_OFF<<(7)));
  3153  0556  1283               	bcf	3,5	;RP0=0, select bank0
  3154  0557  1303               	bcf	3,6	;RP1=0, select bank0
  3155  0558  0806               	movf	6,w	;volatile
  3156  0559  397F               	andlw	127
  3157  055A  0086               	movwf	6	;volatile
  3158  055B                     l1576:	
  3159                           
  3160                           ;SSD.c: 62:             SSD_Set_Symbol(sym,SSD_FIRST);
  3161  055B  01F0               	clrf	SSD_Set_Symbol@index
  3162  055C  087B               	movf	SSD_Init@sym,w
  3163  055D  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  3164                           
  3165                           ;SSD.c: 63:             break;
  3166  0562  2DB0               	goto	l156
  3167  0563                     l1578:	
  3168                           
  3169                           ;SSD.c: 66:             GPIO_Init_Pin(&(TRISB),(6),(0));
  3170  0563  3086               	movlw	134
  3171  0564  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  3172  0565  3000               	movlw	0
  3173  0566  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  3174  0567  3006               	movlw	6
  3175  0568  00F9               	movwf	??_SSD_Init
  3176  0569  0879               	movf	??_SSD_Init,w
  3177  056A  00F2               	movwf	GPIO_Init_Pin@pin_number
  3178  056B  01F3               	clrf	GPIO_Init_Pin@dir
  3179  056C  120A  118A  24DA  120A  118A  	fcall	_GPIO_Init_Pin
  3180  0571                     l1580:	
  3181                           
  3182                           ;SSD.c: 67:             (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_OFF<<(6)));
  3183  0571  1283               	bcf	3,5	;RP0=0, select bank0
  3184  0572  1303               	bcf	3,6	;RP1=0, select bank0
  3185  0573  0806               	movf	6,w	;volatile
  3186  0574  39BF               	andlw	191
  3187  0575  0086               	movwf	6	;volatile
  3188  0576                     l1582:	
  3189                           
  3190                           ;SSD.c: 68:             SSD_Set_Symbol(sym,SSD_SECOND);
  3191  0576  01F0               	clrf	SSD_Set_Symbol@index
  3192  0577  0AF0               	incf	SSD_Set_Symbol@index,f
  3193  0578  087B               	movf	SSD_Init@sym,w
  3194  0579  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  3195                           
  3196                           ;SSD.c: 69:             break;
  3197  057E  2DB0               	goto	l156
  3198  057F                     l1584:	
  3199                           
  3200                           ;SSD.c: 72:             GPIO_Init_Pin(&(TRISB),(5),(0));
  3201  057F  3086               	movlw	134
  3202  0580  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  3203  0581  3000               	movlw	0
  3204  0582  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  3205  0583  3005               	movlw	5
  3206  0584  00F9               	movwf	??_SSD_Init
  3207  0585  0879               	movf	??_SSD_Init,w
  3208  0586  00F2               	movwf	GPIO_Init_Pin@pin_number
  3209  0587  01F3               	clrf	GPIO_Init_Pin@dir
  3210  0588  120A  118A  24DA  120A  118A  	fcall	_GPIO_Init_Pin
  3211  058D                     l1586:	
  3212                           
  3213                           ;SSD.c: 73:             (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_OFF<<(5)));
  3214  058D  1283               	bcf	3,5	;RP0=0, select bank0
  3215  058E  1303               	bcf	3,6	;RP1=0, select bank0
  3216  058F  0806               	movf	6,w	;volatile
  3217  0590  39DF               	andlw	223
  3218  0591  0086               	movwf	6	;volatile
  3219  0592                     l1588:	
  3220                           
  3221                           ;SSD.c: 74:             SSD_Set_Symbol(sym,SSD_THIRD);
  3222  0592  3002               	movlw	2
  3223  0593  00F9               	movwf	??_SSD_Init
  3224  0594  0879               	movf	??_SSD_Init,w
  3225  0595  00F0               	movwf	SSD_Set_Symbol@index
  3226  0596  087B               	movf	SSD_Init@sym,w
  3227  0597  120A  118A  227B  120A  118A  	fcall	_SSD_Set_Symbol
  3228                           
  3229                           ;SSD.c: 75:             break;
  3230  059C  2DB0               	goto	l156
  3231  059D                     l1592:	
  3232  059D  0878               	movf	SSD_Init@ssd,w
  3233  059E  00F9               	movwf	??_SSD_Init
  3234  059F  01FA               	clrf	??_SSD_Init+1
  3235                           
  3236                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3237                           ; Switch size 1, requested type "simple"
  3238                           ; Number of cases is 1, Range of values is 0 to 0
  3239                           ; switch strategies available:
  3240                           ; Name         Instructions Cycles
  3241                           ; simple_byte            4     3 (average)
  3242                           ; direct_byte           11     8 (fixed)
  3243                           ; jumptable            260     6 (fixed)
  3244                           ;	Chosen strategy is simple_byte
  3245  05A0  087A               	movf	??_SSD_Init+1,w
  3246  05A1  3A00               	xorlw	0	; case 0
  3247  05A2  1903               	skipnz
  3248  05A3  2DA5               	goto	l2032
  3249  05A4  2DB0               	goto	l156
  3250  05A5                     l2032:	
  3251                           
  3252                           ; Switch size 1, requested type "simple"
  3253                           ; Number of cases is 3, Range of values is 0 to 2
  3254                           ; switch strategies available:
  3255                           ; Name         Instructions Cycles
  3256                           ; simple_byte           10     6 (average)
  3257                           ; direct_byte           17     8 (fixed)
  3258                           ; jumptable            260     6 (fixed)
  3259                           ;	Chosen strategy is simple_byte
  3260  05A5  0879               	movf	??_SSD_Init,w
  3261  05A6  3A00               	xorlw	0	; case 0
  3262  05A7  1903               	skipnz
  3263  05A8  2D48               	goto	l1572
  3264  05A9  3A01               	xorlw	1	; case 1
  3265  05AA  1903               	skipnz
  3266  05AB  2D63               	goto	l1578
  3267  05AC  3A03               	xorlw	3	; case 2
  3268  05AD  1903               	skipnz
  3269  05AE  2D7F               	goto	l1584
  3270  05AF  2DB0               	goto	l156
  3271  05B0                     l156:	
  3272  05B0  0008               	return
  3273  05B1                     __end_of_SSD_Init:	
  3274                           
  3275                           	psect	text19
  3276  027B                     __ptext19:	
  3277 ;; *************** function _SSD_Set_Symbol *****************
  3278 ;; Defined at:
  3279 ;;		line 78 in file "SSD.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  symbol          1    wreg     enum E859
  3282 ;;  index           1    0[COMMON] enum E865
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  symbol          1    2[COMMON] enum E859
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3294 ;;      Params:         1       0       0       0       0
  3295 ;;      Locals:         1       0       0       0       0
  3296 ;;      Temps:          1       0       0       0       0
  3297 ;;      Totals:         3       0       0       0       0
  3298 ;;Total ram usage:        3 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_SSD_Init
  3304 ;;		_Disp_Update
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           
  3309                           ;psect for function _SSD_Set_Symbol
  3310  027B                     _SSD_Set_Symbol:	
  3311                           
  3312                           ;incstack = 0
  3313                           ; Regs used in _SSD_Set_Symbol: [wreg-fsr0h+status,2+status,0]
  3314                           ;SSD_Set_Symbol@symbol stored from wreg
  3315  027B  00F2               	movwf	SSD_Set_Symbol@symbol
  3316  027C                     l1516:	
  3317                           
  3318                           ;SSD.c: 78: void SSD_Set_Symbol(SSD_Symbol_t symbol,SSD_t index);SSD.c: 79: {;SSD.c: 81:
      +                               Buffer[index] = symbol;
  3319  027C  0872               	movf	SSD_Set_Symbol@symbol,w
  3320  027D  00F1               	movwf	??_SSD_Set_Symbol
  3321  027E  0870               	movf	SSD_Set_Symbol@index,w
  3322  027F  3E29               	addlw	(low (_Buffer| 0))& (0+255)
  3323  0280  0084               	movwf	4
  3324  0281  0871               	movf	??_SSD_Set_Symbol,w
  3325  0282  1383               	bcf	3,7	;select IRP bank0
  3326  0283  0080               	movwf	0
  3327  0284                     l159:	
  3328  0284  0008               	return
  3329  0285                     __end_of_SSD_Set_Symbol:	
  3330                           
  3331                           	psect	text20
  3332  048A                     __ptext20:	
  3333 ;; *************** function _GPIO_Init_Port *****************
  3334 ;; Defined at:
  3335 ;;		line 14 in file "GPIO.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;  DirRegAddres    2    0[COMMON] PTR volatile unsigned ch
  3338 ;;		 -> TRISD(1), 
  3339 ;;  dir             1    2[COMMON] unsigned char 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  ret             1    0        unsigned char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      unsigned char 
  3344 ;; Registers used:
  3345 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3351 ;;      Params:         3       0       0       0       0
  3352 ;;      Locals:         3       0       0       0       0
  3353 ;;      Temps:          1       0       0       0       0
  3354 ;;      Totals:         7       0       0       0       0
  3355 ;;Total ram usage:        7 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; This function calls:
  3358 ;;		Nothing
  3359 ;; This function is called by:
  3360 ;;		_SSD_Init
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           
  3365                           ;psect for function _GPIO_Init_Port
  3366  048A                     _GPIO_Init_Port:	
  3367  048A                     l1452:	
  3368                           ;incstack = 0
  3369                           ; Regs used in _GPIO_Init_Port: [wreg-fsr0h+status,2+status,0]
  3370                           
  3371  048A                     l1454:	
  3372                           
  3373                           ;GPIO.c: 18:     if(*DirRegAddress != (TRISA) && *DirRegAddress != (TRISB) &&
  3374  048A  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3375  048B  0084               	movwf	4
  3376  048C  1783               	bsf	3,7
  3377  048D  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3378  048E  1383               	bcf	3,7
  3379  048F  0800               	movf	0,w
  3380  0490  1683               	bsf	3,5	;RP0=1, select bank1
  3381  0491  1303               	bcf	3,6	;RP1=0, select bank1
  3382  0492  0605               	xorwf	5,w	;volatile
  3383  0493  1903               	skipnz
  3384  0494  2C96               	goto	u431
  3385  0495  2C97               	goto	u430
  3386  0496                     u431:	
  3387  0496  2CC4               	goto	l1466
  3388  0497                     u430:	
  3389  0497                     l1456:	
  3390  0497  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3391  0498  0084               	movwf	4
  3392  0499  1783               	bsf	3,7
  3393  049A  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3394  049B  1383               	bcf	3,7
  3395  049C  0800               	movf	0,w
  3396  049D  0606               	xorwf	6,w	;volatile
  3397  049E  1903               	skipnz
  3398  049F  2CA1               	goto	u441
  3399  04A0  2CA2               	goto	u440
  3400  04A1                     u441:	
  3401  04A1  2CC4               	goto	l1466
  3402  04A2                     u440:	
  3403  04A2                     l1458:	
  3404  04A2  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3405  04A3  0084               	movwf	4
  3406  04A4  1783               	bsf	3,7
  3407  04A5  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3408  04A6  1383               	bcf	3,7
  3409  04A7  0800               	movf	0,w
  3410  04A8  0607               	xorwf	7,w	;volatile
  3411  04A9  1903               	skipnz
  3412  04AA  2CAC               	goto	u451
  3413  04AB  2CAD               	goto	u450
  3414  04AC                     u451:	
  3415  04AC  2CC4               	goto	l1466
  3416  04AD                     u450:	
  3417  04AD                     l1460:	
  3418  04AD  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3419  04AE  0084               	movwf	4
  3420  04AF  1783               	bsf	3,7
  3421  04B0  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3422  04B1  1383               	bcf	3,7
  3423  04B2  0800               	movf	0,w
  3424  04B3  0608               	xorwf	8,w	;volatile
  3425  04B4  1903               	skipnz
  3426  04B5  2CB7               	goto	u461
  3427  04B6  2CB8               	goto	u460
  3428  04B7                     u461:	
  3429  04B7  2CC4               	goto	l1466
  3430  04B8                     u460:	
  3431  04B8                     l1462:	
  3432  04B8  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3433  04B9  0084               	movwf	4
  3434  04BA  1783               	bsf	3,7
  3435  04BB  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3436  04BC  1383               	bcf	3,7
  3437  04BD  0800               	movf	0,w
  3438  04BE  0609               	xorwf	9,w	;volatile
  3439  04BF  1903               	skipnz
  3440  04C0  2CC2               	goto	u471
  3441  04C1  2CC3               	goto	u470
  3442  04C2                     u471:	
  3443  04C2  2CC4               	goto	l1466
  3444  04C3                     u470:	
  3445  04C3                     l1464:	
  3446                           
  3447                           ;GPIO.c: 24:     }
  3448  04C3  2CD9               	goto	l43
  3449  04C4                     l1466:	
  3450                           
  3451                           ;GPIO.c: 26:     {;GPIO.c: 27:         ((*DirRegAddress)=(dir)?(~0):(0));
  3452  04C4  0872               	movf	GPIO_Init_Port@dir,w
  3453  04C5  1D03               	btfss	3,2
  3454  04C6  2CC8               	goto	u481
  3455  04C7  2CC9               	goto	u480
  3456  04C8                     u481:	
  3457  04C8  2CCC               	goto	l1470
  3458  04C9                     u480:	
  3459  04C9                     l1468:	
  3460  04C9  01F5               	clrf	_GPIO_Init_Port$75
  3461  04CA  01F6               	clrf	_GPIO_Init_Port$75+1
  3462  04CB  2CD0               	goto	l1472
  3463  04CC                     l1470:	
  3464  04CC  30FF               	movlw	255
  3465  04CD  00F5               	movwf	_GPIO_Init_Port$75
  3466  04CE  30FF               	movlw	255
  3467  04CF  00F6               	movwf	_GPIO_Init_Port$75+1
  3468  04D0                     l1472:	
  3469  04D0  0875               	movf	_GPIO_Init_Port$75,w
  3470  04D1  00F3               	movwf	??_GPIO_Init_Port
  3471  04D2  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  3472  04D3  0084               	movwf	4
  3473  04D4  1783               	bsf	3,7
  3474  04D5  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  3475  04D6  1383               	bcf	3,7
  3476  04D7  0873               	movf	??_GPIO_Init_Port,w
  3477  04D8  0080               	movwf	0
  3478  04D9                     l43:	
  3479  04D9  0008               	return
  3480  04DA                     __end_of_GPIO_Init_Port:	
  3481                           
  3482                           	psect	text21
  3483  04DA                     __ptext21:	
  3484 ;; *************** function _GPIO_Init_Pin *****************
  3485 ;; Defined at:
  3486 ;;		line 34 in file "GPIO.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;  DirRegAddres    2    0[COMMON] PTR volatile unsigned ch
  3489 ;;		 -> TRISB(1), 
  3490 ;;  pin_number      1    2[COMMON] unsigned char 
  3491 ;;  dir             1    3[COMMON] unsigned char 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;  ret             1    7[COMMON] unsigned char 
  3494 ;; Return value:  Size  Location     Type
  3495 ;;                  1    wreg      unsigned char 
  3496 ;; Registers used:
  3497 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3503 ;;      Params:         4       0       0       0       0
  3504 ;;      Locals:         1       0       0       0       0
  3505 ;;      Temps:          3       0       0       0       0
  3506 ;;      Totals:         8       0       0       0       0
  3507 ;;Total ram usage:        8 bytes
  3508 ;; Hardware stack levels used:    1
  3509 ;; This function calls:
  3510 ;;		Nothing
  3511 ;; This function is called by:
  3512 ;;		_SW_Init
  3513 ;;		_LED_Init
  3514 ;;		_SSD_Init
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           
  3519                           ;psect for function _GPIO_Init_Pin
  3520  04DA                     _GPIO_Init_Pin:	
  3521  04DA                     l1476:	
  3522                           ;incstack = 0
  3523                           ; Regs used in _GPIO_Init_Pin: [wreg-fsr0h+status,2+status,0]
  3524                           
  3525                           
  3526                           ;GPIO.c: 34: uint8 GPIO_Init_Pin(volatile uint8 *DirRegAddress ,uint8 pin_number,uint8 d
      +                          ir );GPIO.c: 35: {;GPIO.c: 36:     uint8 ret = 1;
  3527  04DA  01F7               	clrf	GPIO_Init_Pin@ret
  3528  04DB  0AF7               	incf	GPIO_Init_Pin@ret,f
  3529  04DC                     l1478:	
  3530                           
  3531                           ;GPIO.c: 38:     if(*DirRegAddress != (TRISA) && *DirRegAddress != (TRISB) &&
  3532  04DC  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3533  04DD  0084               	movwf	4
  3534  04DE  1783               	bsf	3,7
  3535  04DF  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3536  04E0  1383               	bcf	3,7
  3537  04E1  0800               	movf	0,w
  3538  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  3539  04E3  1303               	bcf	3,6	;RP1=0, select bank1
  3540  04E4  0605               	xorwf	5,w	;volatile
  3541  04E5  1903               	skipnz
  3542  04E6  2CE8               	goto	u491
  3543  04E7  2CE9               	goto	u490
  3544  04E8                     u491:	
  3545  04E8  2D17               	goto	l1490
  3546  04E9                     u490:	
  3547  04E9                     l1480:	
  3548  04E9  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3549  04EA  0084               	movwf	4
  3550  04EB  1783               	bsf	3,7
  3551  04EC  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3552  04ED  1383               	bcf	3,7
  3553  04EE  0800               	movf	0,w
  3554  04EF  0606               	xorwf	6,w	;volatile
  3555  04F0  1903               	skipnz
  3556  04F1  2CF3               	goto	u501
  3557  04F2  2CF4               	goto	u500
  3558  04F3                     u501:	
  3559  04F3  2D17               	goto	l1490
  3560  04F4                     u500:	
  3561  04F4                     l1482:	
  3562  04F4  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3563  04F5  0084               	movwf	4
  3564  04F6  1783               	bsf	3,7
  3565  04F7  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3566  04F8  1383               	bcf	3,7
  3567  04F9  0800               	movf	0,w
  3568  04FA  0607               	xorwf	7,w	;volatile
  3569  04FB  1903               	skipnz
  3570  04FC  2CFE               	goto	u511
  3571  04FD  2CFF               	goto	u510
  3572  04FE                     u511:	
  3573  04FE  2D17               	goto	l1490
  3574  04FF                     u510:	
  3575  04FF                     l1484:	
  3576  04FF  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3577  0500  0084               	movwf	4
  3578  0501  1783               	bsf	3,7
  3579  0502  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3580  0503  1383               	bcf	3,7
  3581  0504  0800               	movf	0,w
  3582  0505  0608               	xorwf	8,w	;volatile
  3583  0506  1903               	skipnz
  3584  0507  2D09               	goto	u521
  3585  0508  2D0A               	goto	u520
  3586  0509                     u521:	
  3587  0509  2D17               	goto	l1490
  3588  050A                     u520:	
  3589  050A                     l1486:	
  3590  050A  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3591  050B  0084               	movwf	4
  3592  050C  1783               	bsf	3,7
  3593  050D  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3594  050E  1383               	bcf	3,7
  3595  050F  0800               	movf	0,w
  3596  0510  0609               	xorwf	9,w	;volatile
  3597  0511  1903               	skipnz
  3598  0512  2D14               	goto	u531
  3599  0513  2D15               	goto	u530
  3600  0514                     u531:	
  3601  0514  2D17               	goto	l1490
  3602  0515                     u530:	
  3603  0515                     l1488:	
  3604                           
  3605                           ;GPIO.c: 41:     {;GPIO.c: 43:        ret = 0;
  3606  0515  01F7               	clrf	GPIO_Init_Pin@ret
  3607                           
  3608                           ;GPIO.c: 44:     }
  3609  0516  2D3A               	goto	l1492
  3610  0517                     l1490:	
  3611                           
  3612                           ;GPIO.c: 46:     {;GPIO.c: 47:         ((*DirRegAddress)=(*DirRegAddress & ~(1<<pin_numb
      +                          er))|(dir<<pin_number));
  3613  0517  0873               	movf	GPIO_Init_Pin@dir,w
  3614  0518  00F4               	movwf	??_GPIO_Init_Pin
  3615  0519  0A72               	incf	GPIO_Init_Pin@pin_number,w
  3616  051A  2D1D               	goto	u544
  3617  051B                     u545:	
  3618  051B  1003               	clrc
  3619  051C  0DF4               	rlf	??_GPIO_Init_Pin,f
  3620  051D                     u544:	
  3621  051D  3EFF               	addlw	-1
  3622  051E  1D03               	skipz
  3623  051F  2D1B               	goto	u545
  3624  0520  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3625  0521  0084               	movwf	4
  3626  0522  1783               	bsf	3,7
  3627  0523  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3628  0524  1383               	bcf	3,7
  3629  0525  3001               	movlw	1
  3630  0526  00F5               	movwf	??_GPIO_Init_Pin+1
  3631  0527  0A72               	incf	GPIO_Init_Pin@pin_number,w
  3632  0528  2D2B               	goto	u554
  3633  0529                     u555:	
  3634  0529  1003               	clrc
  3635  052A  0DF5               	rlf	??_GPIO_Init_Pin+1,f
  3636  052B                     u554:	
  3637  052B  3EFF               	addlw	-1
  3638  052C  1D03               	skipz
  3639  052D  2D29               	goto	u555
  3640  052E  0875               	movf	??_GPIO_Init_Pin+1,w
  3641  052F  3AFF               	xorlw	255
  3642  0530  0500               	andwf	0,w
  3643  0531  0474               	iorwf	??_GPIO_Init_Pin,w
  3644  0532  00F6               	movwf	??_GPIO_Init_Pin+2
  3645  0533  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  3646  0534  0084               	movwf	4
  3647  0535  1783               	bsf	3,7
  3648  0536  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  3649  0537  1383               	bcf	3,7
  3650  0538  0876               	movf	??_GPIO_Init_Pin+2,w
  3651  0539  0080               	movwf	0
  3652  053A                     l1492:	
  3653                           
  3654                           ;GPIO.c: 49:     return ret;
  3655  053A  0877               	movf	GPIO_Init_Pin@ret,w
  3656  053B                     l48:	
  3657  053B  0008               	return
  3658  053C                     __end_of_GPIO_Init_Pin:	
  3659  007E                     btemp	set	126	;btemp
  3660  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         18
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      3      28
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    GPIO_Init_Pin@DirRegAddress	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR1[1]), 

    GPIO_Init_Port@DirRegAddress	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR1[1]), 


Critical Paths under _main in COMMON

    _main->_VC_Init
    _VC_Update->_Switch_Event_Handler
    _Switch_Event_Handler->_SW_GetState
    _SW_GetState->___bmul
    _VC_Init->_LED_Init
    _LED_Init->_GPIO_Init_Pin
    _SW_Update->_SW_UpdateState
    _SW_UpdateState->___bmul
    _SW_Init->_GPIO_Init_Pin
    _SSD_Update->_SSD_Disable
    _SSD_Update->_SSD_Enable
    _Disp_Update->_SSD_Set_Symbol
    _Disp_Init->_SSD_Init
    _SSD_Init->_GPIO_Init_Pin

Critical Paths under _main in BANK0

    _main->_VC_Init

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10417
                                              1 BANK0      2     2      0
                          _Disp_Init
                        _Disp_Update
                         _SSD_Update
                            _SW_Init
                          _SW_Update
                            _VC_Init
                          _VC_Update
 ---------------------------------------------------------------------------------
 (1) _VC_Update                                            1     1      0     926
                                             10 COMMON     1     1      0
               _Switch_Event_Handler
 ---------------------------------------------------------------------------------
 (2) _Switch_Event_Handler                                 2     2      0     926
                                              8 COMMON     2     2      0
                       _LED_SetState
                        _SW_GetState
 ---------------------------------------------------------------------------------
 (3) _SW_GetState                                          4     4      0     502
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _VC_Init                                              2     2      0    2459
                                             13 COMMON     1     1      0
                                              0 BANK0      1     1      0
                           _LED_Init
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             5     4      1    2437
                                              8 COMMON     5     4      1
                      _GPIO_Init_Pin
                       _LED_SetState
 ---------------------------------------------------------------------------------
 (3) _LED_SetState                                         4     3      1     424
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _SW_Update                                            2     2      0     742
                                              8 COMMON     2     2      0
                     _SW_UpdateState
 ---------------------------------------------------------------------------------
 (2) _SW_UpdateState                                       4     4      0     742
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     456
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _SW_Init                                              1     1      0    1840
                                              8 COMMON     1     1      0
                      _GPIO_Init_Pin
 ---------------------------------------------------------------------------------
 (1) _SSD_Update                                           1     1      0      44
                                              3 COMMON     1     1      0
                     _SSD_Data_write
                        _SSD_Disable
                         _SSD_Enable
 ---------------------------------------------------------------------------------
 (2) _SSD_Enable                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SSD_Disable                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SSD_Data_write                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Disp_Update                                          2     2      0     956
                                              3 COMMON     2     2      0
                     _SSD_Set_Symbol
                        _VC_GetSpeed
 ---------------------------------------------------------------------------------
 (2) _VC_GetSpeed                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Disp_Init                                            1     1      0    3450
                                             12 COMMON     1     1      0
                           _SSD_Init
 ---------------------------------------------------------------------------------
 (2) _SSD_Init                                             4     3      1    3450
                                              8 COMMON     4     3      1
                      _GPIO_Init_Pin
                     _GPIO_Init_Port
                     _SSD_Set_Symbol
 ---------------------------------------------------------------------------------
 (2) _SSD_Set_Symbol                                       3     2      1     956
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _GPIO_Init_Port                                       7     4      3     338
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (3) _GPIO_Init_Pin                                        8     4      4    1840
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Disp_Init
     _SSD_Init
       _GPIO_Init_Pin
       _GPIO_Init_Port
       _SSD_Set_Symbol
   _Disp_Update
     _SSD_Set_Symbol
     _VC_GetSpeed
   _SSD_Update
     _SSD_Data_write
     _SSD_Disable
     _SSD_Enable
   _SW_Init
     _GPIO_Init_Pin
   _SW_Update
     _SW_UpdateState
       ___bmul
   _VC_Init
     _LED_Init
       _GPIO_Init_Pin
       _LED_SetState
   _VC_Update
     _Switch_Event_Handler
       _LED_SetState
       _SW_GetState
         ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      3      1C       5       35.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2A      12        0.0%
ABS                  0      0      2A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jan 15 22:16:18 2020

       __end_of_SSD_Data_write 0291                     _SSD_Update 036D                 ___bmul@product 0072  
                  _VC_GetSpeed 0269                    __CFG_CP$OFF 0000            __end_of_SW_GetState 02B8  
                           l43 04D9                             l61 043E                             l70 0489  
                           l48 053B                             l64 02B7                             l84 07CE  
                           fsr 0004                            l100 0400                            l114 0319  
                          l202 02A3                            l211 02CB                            l205 026C  
                          l234 06D5                            l243 02FA                            l156 05B0  
                          l165 039B                            l159 0284                            l175 0341  
                          l184 036C                            l249 0625                            l187 0290  
                          l366 02E0                            u410 02D2                            u411 02D1  
                          u500 04F4                            u420 02DF                            u501 04F3  
                          u421 02DE                            u510 04FF                            u430 0497  
                          u511 04FE                            u431 0496                            u520 050A  
                          u440 04A2                            u600 072F                            u521 0509  
                          u441 04A1                            u601 072E                            u530 0515  
                          u450 04AD                            u610 0751                   __CFG_CPD$OFF 0000  
                          u531 0514                            u451 04AC                            u611 0750  
                          u460 04B8                            u620 0763                            u700 068D  
                          u461 04B7                            u621 0762                            u701 068C  
                          u470 04C3                            u630 0787                            u710 0695  
                          u471 04C2                            u631 0786                            u711 0694  
                          u544 051D                            u480 04C9                            u640 0799  
                          u720 06A4                            u545 051B                            u481 04C8  
                          u641 0798                            u721 06A3                            u554 052B  
                          u490 04E9                            u570 06EA                            u730 044B  
                          u650 03F6                            u555 0529                            u491 04E8  
                          u571 06E9                            u731 044A                            u651 03F5  
                          u580 06FC                            u660 0631                            u581 06FB  
                          u565 0300                            u661 0630                            u590 071D  
                          u670 0639                            u750 02C4                            u591 071C  
                          u671 0638                            u751 02C3                            u807 03B2  
                          u760 05BD                            u680 065F                            u761 05BC  
                          u745 0479                            u681 065E                            u770 0379  
                          u690 0667                            u771 0378                            u691 0666  
                          u780 038D                            u781 038C                            fsr0 0004  
                          indf 0000                   __CFG_FOSC$HS 0000                   __CFG_LVP$OFF 0000  
                         l2020 03EC                           l2030 061A                           l2022 0314  
                         l2014 064C                           l2032 05A5                           l2024 07C0  
                         l2016 067A                           l2026 0361                           l2018 06B7  
                         l2028 0336                           l1500 02B6                           l1510 030C  
                         l1600 031C                           l1440 02CE                           l1520 06D8  
                         l1504 02FC                           l1602 0322                           l1442 02D2  
                         l1530 072F                           l1522 06EA                           l1506 02FD  
                         l1460 04AD                           l1452 048A                           l1516 027C  
                         l1612 0285                           l1604 0328                           l1620 0352  
                         l1444 02D6                           l1540 0787                           l1532 073F  
                         l1524 06FC                           l1700 0298                           l1470 04CC  
                         l1462 04B8                           l1454 048A                           l1606 032E  
                         l1622 0359                           l1614 0343                           l1710 0410  
                         l1446 02D8                           l1438 02CD                           l1542 0799  
                         l1534 0751                           l1526 070B                           l1518 06D7  
                         l1702 029F                           l1480 04E9                           l1472 04D0  
                         l1464 04C3                           l1456 0497                           l1704 02E1  
                         l1616 0344                           l1720 0428                           l1712 0412  
                         l1448 02DF                           l1536 0763                           l1528 071D  
                         l1560 03F1                           l1552 03CF                           l1640 063F  
                         l1632 0626                           l1800 03B6                           l1482 04F4  
                         l1490 0517                           l1458 04A2                           l1466 04C4  
                         l1570 053D                           l1618 034B                           l1722 0437  
                         l1714 0414                           l1706 0401                           l1538 0775  
                         l1546 07AB                           l1562 03F6                           l1554 03D0  
                         l1634 0631                           l1802 03BB                           l1492 053A  
                         l1484 04FF                           l1476 04DA                           l1468 04C9  
                         l1580 0571                           l1572 0548                           l1628 0269  
                         l1724 043A                           l1716 0424                           l1708 040D  
                         l1740 0462                           l1732 044C                           l1556 03E2  
                         l1652 0668                           l1660 0682                           l1644 0644  
                         l1804 03C0                           l1486 050A                           l1478 04DC  
                         l1582 0576                           l1574 0556                           l1726 043C  
                         l1718 0426                           l1742 046A                           l1734 044D  
                         l1558 03E4                           l1670 06A5                           l1662 068D  
                         l1654 066D                           l1638 063A                           l1646 0654  
                         l1750 02B8                           l1806 03C5                           l1488 0515  
                         l1584 057F                           l1576 055B                           l1592 059D  
                         l1744 0470                           l1736 0456                           l1728 043F  
                         l1496 02A5                           l1672 06AA                           l1680 06C1  
                         l1664 0695                           l1648 065F                           l1586 058D  
                         l1578 0563                           l1762 05BE                           l1746 0476  
                         l1738 045C                           l1498 02A5                           l1666 069B  
                         l1682 06CA                           l1658 0672                           l1754 02C5  
                         l1588 0592                           l1764 05C0                           l1772 060E  
                         l1748 0483                           l1684 06CE                           l1676 06AF  
                         l1756 02C6                           l1766 05DA                           l1758 05B1  
                         l1598 031B                           l1790 038D                           l1782 037A  
                         l1678 06BF                           l1768 05F4                           l1792 038E  
                         l1784 037B                           l1794 0393                           l1786 0381  
                         l1778 036D                           l1698 0294                           l1788 0387  
                         l1796 039C                           l1798 03AC                   __CFG_WRT$OFF 0000  
                         _main 039C                           btemp 007E                __end_of_VC_Init 02A4  
                         start 0000            __end_of_Disp_Update 0626                __end_of_SW_Init 043F  
          _pressure_sw_counter 002D              ___bmul@multiplier 0073                  _GPIO_Init_Pin 04DA  
              ?_SSD_Data_write 0070                  ?_LED_SetState 0070                 _SSD_Set_Symbol 027B  
             __end_of_LED_Init 0401                          ?_main 0070                  __CFG_WDTE$OFF 0000  
                        _PORTB 0006                          _PORTD 0008                          _TRISA 0085  
                        _TRISB 0086                          _TRISC 0087                          _TRISD 0088  
                        _TRISE 0089                    LED_Init@led 007C                    LED_Init@ret 007B  
            _GPIO_Init_Port$75 0075               __end_of_SSD_Init 05B1                 __CFG_BOREN$OFF 0000  
                        status 0003                          wtemp0 007E                   SSD_Disable@s 0072  
      __size_of_SW_UpdateState 00F9                    _SW_GetState 02A4             __size_of_VC_Update 0014  
                  ?_SSD_Enable 0070                 ?_GPIO_Init_Pin 0070                __initialization 07CF  
                 __end_of_main 03CE         __end_of_SSD_Set_Symbol 0285                 _GPIO_Init_Port 048A  
               ??_LED_SetState 0071                    ?_SSD_Update 0070                         ??_main 0039  
           __size_of_SW_Update 004B    GPIO_Init_Port@DirRegAddress 0070             __size_of_Disp_Init 001A  
   GPIO_Init_Pin@DirRegAddress 0070                      ??_VC_Init 007D                    _Disp_Update 05B1  
                    ??_SW_Init 0078                         _Buffer 0029                 __CFG_PWRTE$OFF 0000  
       __end_of_GPIO_Init_Port 04DA                         ___bmul 02CC                ?_SSD_Set_Symbol 0070  
     SW_Update@SW_Time_Counter 0037                   VC_Init@speed 0038              __end_of_VC_Update 02CC  
          __size_of_SSD_Enable 002B              LED_SetState@state 0070            __size_of_SSD_Update 002F  
      __end_of__initialization 07FC                      ?_LED_Init 0078                ??_GPIO_Init_Pin 0074  
             GPIO_Init_Pin@dir 0073              __end_of_SW_Update 048A               GPIO_Init_Pin@ret 0077  
                 ?_SSD_Disable 0070            ___bmul@multiplicand 0070              __end_of_Disp_Init 02FB  
              ?_GPIO_Init_Port 0070                 __pcstackCOMMON 0070                   __pidataBANK0 026D  
                 ?_VC_GetSpeed 0070                      ?_SSD_Init 0078                  SW_GetState@sw 0076  
__size_of_Switch_Event_Handler 00B0           __end_of_LED_SetState 031A                     __pbssBANK0 0020  
               _SW_UpdateState 06D6                     ??_LED_Init 0079               ??_SSD_Data_write 0070  
                   __pmaintext 039C                        ?___bmul 0070                     ??_SSD_Init 0079  
                      _VC_Init 0291         __end_of_SW_UpdateState 07CF                        _SW_DATA 0020  
          SSD_Set_Symbol@index 0070                        _SW_Init 0401                   ?_SW_GetState 0070  
                LED_Init@state 0078                   ??_SSD_Enable 0070                __size_of___bmul 0015  
                 ??_SSD_Update 0073                     _currentSSD 0031                        __ptext1 02B8  
                      __ptext2 0626                        __ptext3 02A4                        __ptext4 0291  
                      __ptext5 03CE                        __ptext6 02FB                        __ptext7 043F  
                      __ptext8 06D6                        __ptext9 02CC             __end_of_SSD_Enable 036D  
                      clrloop0 0274           end_of_initialization 07FC                ?_SW_UpdateState 0070  
                 ?_Disp_Update 0070             __end_of_SSD_Update 039C               ??_SSD_Set_Symbol 0071  
         __size_of_SSD_Disable 0028           __size_of_VC_GetSpeed 0004          __size_of_LED_SetState 001F  
                    _VC_Update 02B8        GPIO_Init_Pin@pin_number 0072               ??_GPIO_Init_Port 0073  
            __size_of_LED_Init 0033              GPIO_Init_Port@dir 0072                      _SW_Update 043F  
               __end_of___bmul 02E1                      _Disp_Init 02E1                   _LED_SetState 02FB  
                  SSD_Enable@s 0072              __size_of_SSD_Init 0075            start_initialization 07CF  
                  SSD_Init@ssd 0078                    SSD_Init@sym 007B                     ?_VC_Update 0070  
        __end_of_GPIO_Init_Pin 053C   __end_of_Switch_Event_Handler 06D6                 SW_GetState@ret 0077  
                     ??___bmul 0071           __size_of_SW_GetState 0014                     ?_SW_Update 0070  
                   ?_Disp_Init 0070                    __pdataBANK0 0032                      ___latbits 0002  
                __pcstackBANK0 0038                       ?_VC_Init 0070                       ?_SW_Init 0070  
         __size_of_Disp_Update 0075                      __pnvBANK0 003B               ??_SW_UpdateState 0074  
                  ??_VC_Update 007A               SW_UpdateState@sw 0077                       _LED_Init 03CE  
                    clear_ram0 0273                    ??_SW_Update 0078                    ??_Disp_Init 007C  
      __size_of_SSD_Data_write 000C                       _SSD_Init 053C           SSD_Set_Symbol@symbol 0072  
         _Switch_Event_Handler 0626               __size_of_VC_Init 0013               __size_of_SW_Init 003E  
                ??_SSD_Disable 0070                  ??_VC_GetSpeed 0070                LED_SetState@led 0073  
   SSD_Update@SSD_Time_Counter 0030          ?_Switch_Event_Handler 0070                       __ptext10 0401  
                     __ptext11 036D                       __ptext20 048A                       __ptext12 0342  
                     __ptext21 04DA                       __ptext13 031A                       __ptext14 0285  
                     __ptext15 05B1                       __ptext16 0269                       __ptext17 02E1  
                     __ptext18 053C                       __ptext19 027B                  __size_of_main 0032  
          __end_of_SSD_Disable 0342        __size_of_SSD_Set_Symbol 000A       VC_Update@VC_TICK_COUNTER 002F  
          __end_of_VC_GetSpeed 026D                  ??_SW_GetState 0074        __size_of_GPIO_Init_Port 0050  
               _SSD_Data_write 0285   Disp_Update@DISP_Time_Counter 0036                    _motor_speed 003B  
       ??_Switch_Event_Handler 0078         __size_of_GPIO_Init_Pin 0062                  ??_Disp_Update 0073  
                  _SSD_LOT_ARR 0032                    _SSD_Disable 031A                     _SSD_Enable 0342  
