

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Jan 17 04:21:43 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     
    54                           ; Version 2.10
    55                           ; Generated 31/07/2019 GMT
    56                           ; 
    57                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16F877A Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  0007                     	;# 
    96  0008                     	;# 
    97  0009                     	;# 
    98  000A                     	;# 
    99  000B                     	;# 
   100  000C                     	;# 
   101  000D                     	;# 
   102  000E                     	;# 
   103  000E                     	;# 
   104  000F                     	;# 
   105  0010                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0013                     	;# 
   109  0014                     	;# 
   110  0015                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0017                     	;# 
   114  0018                     	;# 
   115  0019                     	;# 
   116  001A                     	;# 
   117  001B                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  001D                     	;# 
   121  001E                     	;# 
   122  001F                     	;# 
   123  0081                     	;# 
   124  0085                     	;# 
   125  0086                     	;# 
   126  0087                     	;# 
   127  0088                     	;# 
   128  0089                     	;# 
   129  008C                     	;# 
   130  008D                     	;# 
   131  008E                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0094                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  009F                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0008                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0088                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0098                     	;# 
   197  0099                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  009F                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  010F                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  0091                     	;# 
   253  0092                     	;# 
   254  0093                     	;# 
   255  0094                     	;# 
   256  0098                     	;# 
   257  0099                     	;# 
   258  009C                     	;# 
   259  009D                     	;# 
   260  009E                     	;# 
   261  009F                     	;# 
   262  010C                     	;# 
   263  010D                     	;# 
   264  010E                     	;# 
   265  010F                     	;# 
   266  018C                     	;# 
   267  018D                     	;# 
   268  0000                     	;# 
   269  0001                     	;# 
   270  0002                     	;# 
   271  0003                     	;# 
   272  0004                     	;# 
   273  0005                     	;# 
   274  0006                     	;# 
   275  0007                     	;# 
   276  0008                     	;# 
   277  0009                     	;# 
   278  000A                     	;# 
   279  000B                     	;# 
   280  000C                     	;# 
   281  000D                     	;# 
   282  000E                     	;# 
   283  000E                     	;# 
   284  000F                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0013                     	;# 
   289  0014                     	;# 
   290  0015                     	;# 
   291  0015                     	;# 
   292  0016                     	;# 
   293  0017                     	;# 
   294  0018                     	;# 
   295  0019                     	;# 
   296  001A                     	;# 
   297  001B                     	;# 
   298  001B                     	;# 
   299  001C                     	;# 
   300  001D                     	;# 
   301  001E                     	;# 
   302  001F                     	;# 
   303  0081                     	;# 
   304  0085                     	;# 
   305  0086                     	;# 
   306  0087                     	;# 
   307  0088                     	;# 
   308  0089                     	;# 
   309  008C                     	;# 
   310  008D                     	;# 
   311  008E                     	;# 
   312  0091                     	;# 
   313  0092                     	;# 
   314  0093                     	;# 
   315  0094                     	;# 
   316  0098                     	;# 
   317  0099                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  009F                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  010F                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  0000                     	;# 
   329  0001                     	;# 
   330  0002                     	;# 
   331  0003                     	;# 
   332  0004                     	;# 
   333  0005                     	;# 
   334  0006                     	;# 
   335  0007                     	;# 
   336  0008                     	;# 
   337  0009                     	;# 
   338  000A                     	;# 
   339  000B                     	;# 
   340  000C                     	;# 
   341  000D                     	;# 
   342  000E                     	;# 
   343  000E                     	;# 
   344  000F                     	;# 
   345  0010                     	;# 
   346  0011                     	;# 
   347  0012                     	;# 
   348  0013                     	;# 
   349  0014                     	;# 
   350  0015                     	;# 
   351  0015                     	;# 
   352  0016                     	;# 
   353  0017                     	;# 
   354  0018                     	;# 
   355  0019                     	;# 
   356  001A                     	;# 
   357  001B                     	;# 
   358  001B                     	;# 
   359  001C                     	;# 
   360  001D                     	;# 
   361  001E                     	;# 
   362  001F                     	;# 
   363  0081                     	;# 
   364  0085                     	;# 
   365  0086                     	;# 
   366  0087                     	;# 
   367  0088                     	;# 
   368  0089                     	;# 
   369  008C                     	;# 
   370  008D                     	;# 
   371  008E                     	;# 
   372  0091                     	;# 
   373  0092                     	;# 
   374  0093                     	;# 
   375  0094                     	;# 
   376  0098                     	;# 
   377  0099                     	;# 
   378  009C                     	;# 
   379  009D                     	;# 
   380  009E                     	;# 
   381  009F                     	;# 
   382  010C                     	;# 
   383  010D                     	;# 
   384  010E                     	;# 
   385  010F                     	;# 
   386  018C                     	;# 
   387  018D                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  000E                     	;# 
   404  000F                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0013                     	;# 
   409  0014                     	;# 
   410  0015                     	;# 
   411  0015                     	;# 
   412  0016                     	;# 
   413  0017                     	;# 
   414  0018                     	;# 
   415  0019                     	;# 
   416  001A                     	;# 
   417  001B                     	;# 
   418  001B                     	;# 
   419  001C                     	;# 
   420  001D                     	;# 
   421  001E                     	;# 
   422  001F                     	;# 
   423  0081                     	;# 
   424  0085                     	;# 
   425  0086                     	;# 
   426  0087                     	;# 
   427  0088                     	;# 
   428  0089                     	;# 
   429  008C                     	;# 
   430  008D                     	;# 
   431  008E                     	;# 
   432  0091                     	;# 
   433  0092                     	;# 
   434  0093                     	;# 
   435  0094                     	;# 
   436  0098                     	;# 
   437  0099                     	;# 
   438  009C                     	;# 
   439  009D                     	;# 
   440  009E                     	;# 
   441  009F                     	;# 
   442  010C                     	;# 
   443  010D                     	;# 
   444  010E                     	;# 
   445  010F                     	;# 
   446  018C                     	;# 
   447  018D                     	;# 
   448  0000                     	;# 
   449  0001                     	;# 
   450  0002                     	;# 
   451  0003                     	;# 
   452  0004                     	;# 
   453  0005                     	;# 
   454  0006                     	;# 
   455  0007                     	;# 
   456  0008                     	;# 
   457  0009                     	;# 
   458  000A                     	;# 
   459  000B                     	;# 
   460  000C                     	;# 
   461  000D                     	;# 
   462  000E                     	;# 
   463  000E                     	;# 
   464  000F                     	;# 
   465  0010                     	;# 
   466  0011                     	;# 
   467  0012                     	;# 
   468  0013                     	;# 
   469  0014                     	;# 
   470  0015                     	;# 
   471  0015                     	;# 
   472  0016                     	;# 
   473  0017                     	;# 
   474  0018                     	;# 
   475  0019                     	;# 
   476  001A                     	;# 
   477  001B                     	;# 
   478  001B                     	;# 
   479  001C                     	;# 
   480  001D                     	;# 
   481  001E                     	;# 
   482  001F                     	;# 
   483  0081                     	;# 
   484  0085                     	;# 
   485  0086                     	;# 
   486  0087                     	;# 
   487  0088                     	;# 
   488  0089                     	;# 
   489  008C                     	;# 
   490  008D                     	;# 
   491  008E                     	;# 
   492  0091                     	;# 
   493  0092                     	;# 
   494  0093                     	;# 
   495  0094                     	;# 
   496  0098                     	;# 
   497  0099                     	;# 
   498  009C                     	;# 
   499  009D                     	;# 
   500  009E                     	;# 
   501  009F                     	;# 
   502  010C                     	;# 
   503  010D                     	;# 
   504  010E                     	;# 
   505  010F                     	;# 
   506  018C                     	;# 
   507  018D                     	;# 
   508  0000                     	;# 
   509  0001                     	;# 
   510  0002                     	;# 
   511  0003                     	;# 
   512  0004                     	;# 
   513  0005                     	;# 
   514  0006                     	;# 
   515  0007                     	;# 
   516  0008                     	;# 
   517  0009                     	;# 
   518  000A                     	;# 
   519  000B                     	;# 
   520  000C                     	;# 
   521  000D                     	;# 
   522  000E                     	;# 
   523  000E                     	;# 
   524  000F                     	;# 
   525  0010                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0013                     	;# 
   529  0014                     	;# 
   530  0015                     	;# 
   531  0015                     	;# 
   532  0016                     	;# 
   533  0017                     	;# 
   534  0018                     	;# 
   535  0019                     	;# 
   536  001A                     	;# 
   537  001B                     	;# 
   538  001B                     	;# 
   539  001C                     	;# 
   540  001D                     	;# 
   541  001E                     	;# 
   542  001F                     	;# 
   543  0081                     	;# 
   544  0085                     	;# 
   545  0086                     	;# 
   546  0087                     	;# 
   547  0088                     	;# 
   548  0089                     	;# 
   549  008C                     	;# 
   550  008D                     	;# 
   551  008E                     	;# 
   552  0091                     	;# 
   553  0092                     	;# 
   554  0093                     	;# 
   555  0094                     	;# 
   556  0098                     	;# 
   557  0099                     	;# 
   558  009C                     	;# 
   559  009D                     	;# 
   560  009E                     	;# 
   561  009F                     	;# 
   562  010C                     	;# 
   563  010D                     	;# 
   564  010E                     	;# 
   565  010F                     	;# 
   566  018C                     	;# 
   567  018D                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  000E                     	;# 
   584  000F                     	;# 
   585  0010                     	;# 
   586  0011                     	;# 
   587  0012                     	;# 
   588  0013                     	;# 
   589  0014                     	;# 
   590  0015                     	;# 
   591  0015                     	;# 
   592  0016                     	;# 
   593  0017                     	;# 
   594  0018                     	;# 
   595  0019                     	;# 
   596  001A                     	;# 
   597  001B                     	;# 
   598  001B                     	;# 
   599  001C                     	;# 
   600  001D                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  0081                     	;# 
   604  0085                     	;# 
   605  0086                     	;# 
   606  0087                     	;# 
   607  0088                     	;# 
   608  0089                     	;# 
   609  008C                     	;# 
   610  008D                     	;# 
   611  008E                     	;# 
   612  0091                     	;# 
   613  0092                     	;# 
   614  0093                     	;# 
   615  0094                     	;# 
   616  0098                     	;# 
   617  0099                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  009F                     	;# 
   622  010C                     	;# 
   623  010D                     	;# 
   624  010E                     	;# 
   625  010F                     	;# 
   626  018C                     	;# 
   627  018D                     	;# 
   628  0000                     	;# 
   629  0001                     	;# 
   630  0002                     	;# 
   631  0003                     	;# 
   632  0004                     	;# 
   633  0005                     	;# 
   634  0006                     	;# 
   635  0007                     	;# 
   636  0008                     	;# 
   637  0009                     	;# 
   638  000A                     	;# 
   639  000B                     	;# 
   640  000C                     	;# 
   641  000D                     	;# 
   642  000E                     	;# 
   643  000E                     	;# 
   644  000F                     	;# 
   645  0010                     	;# 
   646  0011                     	;# 
   647  0012                     	;# 
   648  0013                     	;# 
   649  0014                     	;# 
   650  0015                     	;# 
   651  0015                     	;# 
   652  0016                     	;# 
   653  0017                     	;# 
   654  0018                     	;# 
   655  0019                     	;# 
   656  001A                     	;# 
   657  001B                     	;# 
   658  001B                     	;# 
   659  001C                     	;# 
   660  001D                     	;# 
   661  001E                     	;# 
   662  001F                     	;# 
   663  0081                     	;# 
   664  0085                     	;# 
   665  0086                     	;# 
   666  0087                     	;# 
   667  0088                     	;# 
   668  0089                     	;# 
   669  008C                     	;# 
   670  008D                     	;# 
   671  008E                     	;# 
   672  0091                     	;# 
   673  0092                     	;# 
   674  0093                     	;# 
   675  0094                     	;# 
   676  0098                     	;# 
   677  0099                     	;# 
   678  009C                     	;# 
   679  009D                     	;# 
   680  009E                     	;# 
   681  009F                     	;# 
   682  010C                     	;# 
   683  010D                     	;# 
   684  010E                     	;# 
   685  010F                     	;# 
   686  018C                     	;# 
   687  018D                     	;# 
   688  0000                     	;# 
   689  0001                     	;# 
   690  0002                     	;# 
   691  0003                     	;# 
   692  0004                     	;# 
   693  0005                     	;# 
   694  0006                     	;# 
   695  0007                     	;# 
   696  0008                     	;# 
   697  0009                     	;# 
   698  000A                     	;# 
   699  000B                     	;# 
   700  000C                     	;# 
   701  000D                     	;# 
   702  000E                     	;# 
   703  000E                     	;# 
   704  000F                     	;# 
   705  0010                     	;# 
   706  0011                     	;# 
   707  0012                     	;# 
   708  0013                     	;# 
   709  0014                     	;# 
   710  0015                     	;# 
   711  0015                     	;# 
   712  0016                     	;# 
   713  0017                     	;# 
   714  0018                     	;# 
   715  0019                     	;# 
   716  001A                     	;# 
   717  001B                     	;# 
   718  001B                     	;# 
   719  001C                     	;# 
   720  001D                     	;# 
   721  001E                     	;# 
   722  001F                     	;# 
   723  0081                     	;# 
   724  0085                     	;# 
   725  0086                     	;# 
   726  0087                     	;# 
   727  0088                     	;# 
   728  0089                     	;# 
   729  008C                     	;# 
   730  008D                     	;# 
   731  008E                     	;# 
   732  0091                     	;# 
   733  0092                     	;# 
   734  0093                     	;# 
   735  0094                     	;# 
   736  0098                     	;# 
   737  0099                     	;# 
   738  009C                     	;# 
   739  009D                     	;# 
   740  009E                     	;# 
   741  009F                     	;# 
   742  010C                     	;# 
   743  010D                     	;# 
   744  010E                     	;# 
   745  010F                     	;# 
   746  018C                     	;# 
   747  018D                     	;# 
   748                           
   749                           	psect	idataBANK0
   750  0771                     __pidataBANK0:	
   751                           
   752                           ;initializer for _SSD_LOT_ARR
   753  0771  3408               	retlw	8
   754  0772  3448               	retlw	72
   755  0773  3449               	retlw	73
   756  0774  3400               	retlw	0
   757                           
   758                           	psect	nvBANK0
   759  004E                     __pnvBANK0:	
   760  004E                     _motor_speed:	
   761  004E                     	ds	1
   762  000E                     _TMR1	set	14
   763  0001                     _TMR0	set	1
   764  0008                     _PORTD	set	8
   765  0006                     _PORTB	set	6
   766  0007                     _PORTC	set	7
   767  005E                     _PEIE	set	94
   768  0060                     _TMR1IF	set	96
   769  0080                     _TMR1ON	set	128
   770  0083                     _T1OSCEN	set	131
   771  0081                     _TMR1CS	set	129
   772  0085                     _T1CKPS1	set	133
   773  0084                     _T1CKPS0	set	132
   774  005F                     _GIE	set	95
   775  005D                     _TMR0IE	set	93
   776  005A                     _TMR0IF	set	90
   777  0089                     _TRISE	set	137
   778  0085                     _TRISA	set	133
   779  0088                     _TRISD	set	136
   780  0086                     _TRISB	set	134
   781  0087                     _TRISC	set	135
   782  0460                     _TMR1IE	set	1120
   783  040D                     _T0CS	set	1037
   784  0408                     _PS0	set	1032
   785  0409                     _PS1	set	1033
   786  040A                     _PS2	set	1034
   787                           
   788                           ; #config settings
   789  0000                     
   790                           	psect	cinit
   791  000F                     start_initialization:	
   792  000F                     __initialization:	
   793                           
   794                           ; Initialize objects allocated to BANK0
   795  000F  120A  118A  2771  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   796  0014  00CA               	movwf	__pdataBANK0& (0+127)
   797  0015  120A  118A  2772  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   798  001A  00CB               	movwf	(__pdataBANK0+1)& (0+127)
   799  001B  120A  118A  2773  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   800  0020  00CC               	movwf	(__pdataBANK0+2)& (0+127)
   801  0021  120A  118A  2774  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   802  0026  00CD               	movwf	(__pdataBANK0+3)& (0+127)
   803                           
   804                           ; Clear objects allocated to BANK0
   805  0027  1383               	bcf	3,7	;select IRP bank0
   806  0028  3020               	movlw	low __pbssBANK0
   807  0029  0084               	movwf	4
   808  002A  303A               	movlw	low (__pbssBANK0+26)
   809  002B  120A  118A  2754  120A  118A  	fcall	clear_ram0
   810                           
   811                           ; Clear objects allocated to COMMON
   812  0030  01FC               	clrf	__pbssCOMMON& (0+127)
   813  0031  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   814  0032                     end_of_initialization:	
   815                           ;End of C runtime variable initialization code
   816                           
   817  0032                     __end_of__initialization:	
   818  0032  0183               	clrf	3
   819  0033  120A  118A  2BCF   	ljmp	_main	;jump to C main() function
   820                           
   821                           	psect	bssCOMMON
   822  007C                     __pbssCOMMON:	
   823  007C                     SSD_Update@SSD_Time_Counter:	
   824  007C                     	ds	1
   825  007D                     _currentSSD:	
   826  007D                     	ds	1
   827                           
   828                           	psect	bssBANK0
   829  0020                     __pbssBANK0:	
   830  0020                     _SW_DATA:	
   831  0020                     	ds	9
   832  0029                     _Buffer:	
   833  0029                     	ds	4
   834  002D                     _tempCounter:	
   835  002D                     	ds	2
   836  002F                     _pressure_sw_counter:	
   837  002F                     	ds	2
   838  0031                     Mo_Update@motor_tick_counter:	
   839  0031                     	ds	1
   840  0032                     _motor_state:	
   841  0032                     	ds	1
   842  0033                     _actual_angle:	
   843  0033                     	ds	1
   844  0034                     _target_angle:	
   845  0034                     	ds	1
   846  0035                     _soft_switching_counter:	
   847  0035                     	ds	1
   848  0036                     Disp_Update@DISP_Time_Counter:	
   849  0036                     	ds	1
   850  0037                     VC_Update@VC_TICK_COUNTER:	
   851  0037                     	ds	1
   852  0038                     SW_Update@SW_Time_Counter:	
   853  0038                     	ds	1
   854  0039                     _ISR_FLAG:	
   855  0039                     	ds	1
   856                           
   857                           	psect	dataBANK0
   858  004A                     __pdataBANK0:	
   859  004A                     _SSD_LOT_ARR:	
   860  004A                     	ds	4
   861                           
   862                           	psect	clrtext
   863  0754                     clear_ram0:	
   864                           ;	Called with FSR containing the base address, and
   865                           ;	W with the last address+1
   866                           
   867  0754  0064               	clrwdt	;clear the watchdog before getting into this loop
   868  0755                     clrloop0:	
   869  0755  0180               	clrf	0	;clear RAM location pointed to by FSR
   870  0756  0A84               	incf	4,f	;increment pointer
   871  0757  0604               	xorwf	4,w	;XOR with final address
   872  0758  1903               	btfsc	3,2	;have we reached the end yet?
   873  0759  3400               	retlw	0	;all done for this memory range, return
   874  075A  0604               	xorwf	4,w	;XOR again to restore value
   875  075B  2F55               	goto	clrloop0	;do the next byte
   876                           
   877                           	psect	cstackCOMMON
   878  0070                     __pcstackCOMMON:	
   879  0070                     ?_VC_Init:	
   880  0070                     ?_TMR_Init:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0070                     ?_TMR_Start:	
   884                           ; 1 bytes @ 0x0
   885                           
   886  0070                     ?_TMR1_Init:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0070                     ?_Disp_Init:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0070                     ?_SW_Init:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  0070                     ?_SSD_Update:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0070                     ?_SW_Update:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ?_Disp_Update:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ?_VC_Update:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ?_Mo_Update:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_TMR1_CheckOverflow:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0070                     ??_TMR1_CheckOverflow:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  0070                     ?_TMR1_ISR:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0070                     ?_TMR_CheckOverflow:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  0070                     ??_TMR_CheckOverflow:	
   923                           ; 1 bytes @ 0x0
   924                           
   925  0070                     ?_TMR0_ISR:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  0070                     ?_SW_UpdateState:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0070                     ?_SSD_Disable:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0070                     ?_SSD_Data_write:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  0070                     ?_SSD_Enable:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     ?_Mo_Init:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     ?_Switch_Event_Handler:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     ?_Mo_SetSpeed:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     ?_main:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ?_Generic_ISR:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ?_SW_GetState:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ?_VC_GetSpeed:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ?_Mo_Get_Actual_Angle:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ??_Mo_Get_Actual_Angle:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_Mo_generate_firing_pulse:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ??_Mo_generate_firing_pulse:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_TMR1_Stop:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ??_TMR1_Stop:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ?i1___wmul:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     i1___wmul@multiplier:	
   983                           ; 2 bytes @ 0x0
   984                           
   985                           
   986                           ; 2 bytes @ 0x0
   987  0070                     	ds	1
   988  0071                     ??_TMR1_ISR:	
   989                           
   990                           ; 1 bytes @ 0x1
   991  0071                     	ds	1
   992  0072                     i1___wmul@multiplicand:	
   993                           
   994                           ; 2 bytes @ 0x2
   995  0072                     	ds	2
   996  0074                     ??i1___wmul:	
   997  0074                     i1___wmul@product:	
   998                           ; 1 bytes @ 0x4
   999                           
  1000                           
  1001                           ; 2 bytes @ 0x4
  1002  0074                     	ds	2
  1003  0076                     ?_TMR1_Start:	
  1004  0076                     TMR1_Start@degree:	
  1005                           ; 1 bytes @ 0x6
  1006                           
  1007                           
  1008                           ; 2 bytes @ 0x6
  1009  0076                     	ds	2
  1010  0078                     ??_TMR0_ISR:	
  1011  0078                     ??_TMR1_Start:	
  1012                           ; 1 bytes @ 0x8
  1013                           
  1014                           
  1015                           ; 1 bytes @ 0x8
  1016  0078                     	ds	2
  1017  007A                     ??_Generic_ISR:	
  1018                           
  1019                           ; 1 bytes @ 0xA
  1020  007A                     	ds	2
  1021                           
  1022                           	psect	cstackBANK0
  1023  003A                     __pcstackBANK0:	
  1024  003A                     ??_TMR_Init:	
  1025  003A                     ??_TMR_Start:	
  1026                           ; 1 bytes @ 0x0
  1027                           
  1028  003A                     ??_TMR1_Init:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031  003A                     ?_GPIO_Init_Pin:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034  003A                     ??_Mo_Update:	
  1035                           ; 1 bytes @ 0x0
  1036                           
  1037  003A                     ?_LED_SetState:	
  1038                           ; 1 bytes @ 0x0
  1039                           
  1040  003A                     ?_SSD_Set_Symbol:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  003A                     ??_SSD_Disable:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  003A                     ??_SSD_Data_write:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  003A                     ??_SSD_Enable:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  003A                     ??_Mo_SetSpeed:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  003A                     ?_GPIO_Init_Port:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  003A                     ??_VC_GetSpeed:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  003A                     ?___bmul:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  003A                     LED_SetState@state:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  003A                     SSD_Set_Symbol@index:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  003A                     ___bmul@multiplicand:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  003A                     GPIO_Init_Port@DirRegAddress:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  003A                     GPIO_Init_Pin@DirRegAddress:	
  1077                           ; 2 bytes @ 0x0
  1078                           
  1079                           
  1080                           ; 2 bytes @ 0x0
  1081  003A                     	ds	1
  1082  003B                     ??_LED_SetState:	
  1083  003B                     ??_SSD_Set_Symbol:	
  1084                           ; 1 bytes @ 0x1
  1085                           
  1086  003B                     ??___bmul:	
  1087                           ; 1 bytes @ 0x1
  1088                           
  1089  003B                     Mo_SetSpeed@m:	
  1090                           ; 1 bytes @ 0x1
  1091                           
  1092                           
  1093                           ; 1 bytes @ 0x1
  1094  003B                     	ds	1
  1095  003C                     GPIO_Init_Port@dir:	
  1096  003C                     GPIO_Init_Pin@pin_number:	
  1097                           ; 1 bytes @ 0x2
  1098                           
  1099  003C                     SSD_Set_Symbol@symbol:	
  1100                           ; 1 bytes @ 0x2
  1101                           
  1102  003C                     SSD_Disable@s:	
  1103                           ; 1 bytes @ 0x2
  1104                           
  1105  003C                     SSD_Enable@s:	
  1106                           ; 1 bytes @ 0x2
  1107                           
  1108  003C                     ___bmul@product:	
  1109                           ; 1 bytes @ 0x2
  1110                           
  1111                           
  1112                           ; 1 bytes @ 0x2
  1113  003C                     	ds	1
  1114  003D                     ??_SSD_Update:	
  1115  003D                     ??_Disp_Update:	
  1116                           ; 1 bytes @ 0x3
  1117                           
  1118  003D                     ??_GPIO_Init_Port:	
  1119                           ; 1 bytes @ 0x3
  1120                           
  1121  003D                     GPIO_Init_Pin@dir:	
  1122                           ; 1 bytes @ 0x3
  1123                           
  1124  003D                     LED_SetState@led:	
  1125                           ; 1 bytes @ 0x3
  1126                           
  1127  003D                     ___bmul@multiplier:	
  1128                           ; 1 bytes @ 0x3
  1129                           
  1130                           
  1131                           ; 1 bytes @ 0x3
  1132  003D                     	ds	1
  1133  003E                     ??_GPIO_Init_Pin:	
  1134  003E                     ??_SW_UpdateState:	
  1135                           ; 1 bytes @ 0x4
  1136                           
  1137  003E                     ??_SW_GetState:	
  1138                           ; 1 bytes @ 0x4
  1139                           
  1140                           
  1141                           ; 1 bytes @ 0x4
  1142  003E                     	ds	1
  1143  003F                     _GPIO_Init_Port$116:	
  1144                           
  1145                           ; 2 bytes @ 0x5
  1146  003F                     	ds	1
  1147  0040                     SW_GetState@sw:	
  1148                           
  1149                           ; 1 bytes @ 0x6
  1150  0040                     	ds	1
  1151  0041                     GPIO_Init_Pin@ret:	
  1152  0041                     SW_GetState@ret:	
  1153                           ; 1 bytes @ 0x7
  1154                           
  1155  0041                     SW_UpdateState@sw:	
  1156                           ; 1 bytes @ 0x7
  1157                           
  1158                           
  1159                           ; 1 bytes @ 0x7
  1160  0041                     	ds	1
  1161  0042                     ??_SW_Init:	
  1162  0042                     ??_SW_Update:	
  1163                           ; 1 bytes @ 0x8
  1164                           
  1165  0042                     ??_Mo_Init:	
  1166                           ; 1 bytes @ 0x8
  1167                           
  1168  0042                     ??_Switch_Event_Handler:	
  1169                           ; 1 bytes @ 0x8
  1170                           
  1171  0042                     ?_LED_Init:	
  1172                           ; 1 bytes @ 0x8
  1173                           
  1174  0042                     ?_SSD_Init:	
  1175                           ; 1 bytes @ 0x8
  1176                           
  1177  0042                     LED_Init@state:	
  1178                           ; 1 bytes @ 0x8
  1179                           
  1180  0042                     SSD_Init@ssd:	
  1181                           ; 1 bytes @ 0x8
  1182                           
  1183                           
  1184                           ; 1 bytes @ 0x8
  1185  0042                     	ds	1
  1186  0043                     ??_LED_Init:	
  1187  0043                     ??_SSD_Init:	
  1188                           ; 1 bytes @ 0x9
  1189                           
  1190  0043                     Mo_Init@m:	
  1191                           ; 1 bytes @ 0x9
  1192                           
  1193                           
  1194                           ; 1 bytes @ 0x9
  1195  0043                     	ds	1
  1196  0044                     ??_VC_Update:	
  1197                           
  1198                           ; 1 bytes @ 0xA
  1199  0044                     	ds	1
  1200  0045                     LED_Init@ret:	
  1201  0045                     SSD_Init@sym:	
  1202                           ; 1 bytes @ 0xB
  1203                           
  1204                           
  1205                           ; 1 bytes @ 0xB
  1206  0045                     	ds	1
  1207  0046                     ??_Disp_Init:	
  1208  0046                     LED_Init@led:	
  1209                           ; 1 bytes @ 0xC
  1210                           
  1211                           
  1212                           ; 1 bytes @ 0xC
  1213  0046                     	ds	1
  1214  0047                     ??_VC_Init:	
  1215                           
  1216                           ; 1 bytes @ 0xD
  1217  0047                     	ds	1
  1218  0048                     VC_Init@speed:	
  1219                           
  1220                           ; 1 bytes @ 0xE
  1221  0048                     	ds	1
  1222  0049                     ??_main:	
  1223                           
  1224                           ; 1 bytes @ 0xF
  1225  0049                     	ds	1
  1226                           
  1227                           	psect	maintext
  1228  03CF                     __pmaintext:	
  1229 ;;
  1230 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1231 ;;
  1232 ;; *************** function _main *****************
  1233 ;; Defined at:
  1234 ;;		line 24 in file "VaccumCleaner.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;		None
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;		None
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : B00/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1248 ;;      Params:         0       0       0       0       0
  1249 ;;      Locals:         0       0       0       0       0
  1250 ;;      Temps:          0       1       0       0       0
  1251 ;;      Totals:         0       1       0       0       0
  1252 ;;Total ram usage:        1 bytes
  1253 ;; Hardware stack levels required when called:    8
  1254 ;; This function calls:
  1255 ;;		_Disp_Init
  1256 ;;		_Disp_Update
  1257 ;;		_GPIO_Init_Pin
  1258 ;;		_Mo_Update
  1259 ;;		_SSD_Update
  1260 ;;		_SW_Init
  1261 ;;		_SW_Update
  1262 ;;		_TMR1_Init
  1263 ;;		_TMR_Init
  1264 ;;		_TMR_Start
  1265 ;;		_VC_Init
  1266 ;;		_VC_Update
  1267 ;; This function is called by:
  1268 ;;		Startup code after reset
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           
  1273                           ;psect for function _main
  1274  03CF                     _main:	
  1275  03CF                     l2321:	
  1276                           ;incstack = 0
  1277                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1278                           
  1279                           
  1280                           ;VaccumCleaner.c: 26:     ISR_FLAG = 0;
  1281  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  1282  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  1283  03D1  01B9               	clrf	_ISR_FLAG	;volatile
  1284  03D2                     l2323:	
  1285                           
  1286                           ;VaccumCleaner.c: 27:     VC_Init(MID_SPEED);
  1287  03D2  305A               	movlw	90
  1288  03D3  120A  118A  269D  120A  118A  	fcall	_VC_Init
  1289  03D8                     l2325:	
  1290                           
  1291                           ;VaccumCleaner.c: 28:     TMR_Init();
  1292  03D8  120A  118A  2764  120A  118A  	fcall	_TMR_Init
  1293  03DD                     l2327:	
  1294                           
  1295                           ;VaccumCleaner.c: 29:     TMR_Start();
  1296  03DD  120A  118A  2749  120A  118A  	fcall	_TMR_Start
  1297  03E2                     l2329:	
  1298                           
  1299                           ;VaccumCleaner.c: 30:     TMR1_Init();
  1300  03E2  120A  118A  275C  120A  118A  	fcall	_TMR1_Init
  1301  03E7                     l2331:	
  1302                           
  1303                           ;VaccumCleaner.c: 31:     Disp_Init();
  1304  03E7  120A  118A  2624  120A  118A  	fcall	_Disp_Init
  1305  03EC                     l2333:	
  1306                           
  1307                           ;VaccumCleaner.c: 32:     SW_Init();
  1308  03EC  120A  118A  24C9  120A  118A  	fcall	_SW_Init
  1309  03F1                     l2335:	
  1310                           
  1311                           ;VaccumCleaner.c: 35:     GPIO_Init_Pin(&(TRISC),(4),(0));
  1312  03F1  3087               	movlw	135
  1313  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  1314  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  1315  03F4  00BA               	movwf	GPIO_Init_Pin@DirRegAddress
  1316  03F5  3000               	movlw	0
  1317  03F6  00BB               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1318  03F7  3004               	movlw	4
  1319  03F8  00C9               	movwf	??_main
  1320  03F9  0849               	movf	??_main,w
  1321  03FA  00BC               	movwf	GPIO_Init_Pin@pin_number
  1322  03FB  01BD               	clrf	GPIO_Init_Pin@dir
  1323  03FC  120A  118A  22F3  120A  118A  	fcall	_GPIO_Init_Pin
  1324  0401                     l2337:	
  1325                           
  1326                           ;VaccumCleaner.c: 38:     {;VaccumCleaner.c: 39:         if(ISR_FLAG)
  1327  0401  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0402  1303               	bcf	3,6	;RP1=0, select bank0
  1329  0403  0839               	movf	_ISR_FLAG,w	;volatile
  1330  0404  1903               	btfsc	3,2
  1331  0405  2C07               	goto	u1021
  1332  0406  2C08               	goto	u1020
  1333  0407                     u1021:	
  1334  0407  2C01               	goto	l2337
  1335  0408                     u1020:	
  1336  0408                     l2339:	
  1337                           
  1338                           ;VaccumCleaner.c: 40:         {;VaccumCleaner.c: 42:             (((PORTC))=((PORTC) ^(1
      +                          <<(4))));
  1339  0408  0807               	movf	7,w	;volatile
  1340  0409  3A10               	xorlw	16
  1341  040A  0087               	movwf	7	;volatile
  1342  040B                     l2341:	
  1343                           
  1344                           ;VaccumCleaner.c: 45:             SSD_Update();
  1345  040B  120A  118A  2540  120A  118A  	fcall	_SSD_Update
  1346  0410                     l2343:	
  1347                           
  1348                           ;VaccumCleaner.c: 46:             SW_Update();
  1349  0410  120A  118A  247E  120A  118A  	fcall	_SW_Update
  1350  0415                     l2345:	
  1351                           
  1352                           ;VaccumCleaner.c: 47:             Disp_Update();
  1353  0415  120A  118A  21F7  120A  118A  	fcall	_Disp_Update
  1354  041A                     l2347:	
  1355                           
  1356                           ;VaccumCleaner.c: 48:             VC_Update();
  1357  041A  120A  118A  2681  120A  118A  	fcall	_VC_Update
  1358  041F                     l2349:	
  1359                           
  1360                           ;VaccumCleaner.c: 49:             Mo_Update();
  1361  041F  120A  118A  242B  120A  118A  	fcall	_Mo_Update
  1362  0424                     l2351:	
  1363                           
  1364                           ;VaccumCleaner.c: 50:             ISR_FLAG = 0;
  1365  0424  1283               	bcf	3,5	;RP0=0, select bank0
  1366  0425  1303               	bcf	3,6	;RP1=0, select bank0
  1367  0426  01B9               	clrf	_ISR_FLAG	;volatile
  1368  0427  2C01               	goto	l2337
  1369  0428  120A  118A  280C   	ljmp	start
  1370  042B                     __end_of_main:	
  1371                           
  1372                           	psect	text1
  1373  0681                     __ptext1:	
  1374 ;; *************** function _VC_Update *****************
  1375 ;; Defined at:
  1376 ;;		line 50 in file "Vacuum.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1390 ;;      Params:         0       0       0       0       0
  1391 ;;      Locals:         0       0       0       0       0
  1392 ;;      Temps:          0       1       0       0       0
  1393 ;;      Totals:         0       1       0       0       0
  1394 ;;Total ram usage:        1 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    7
  1397 ;; This function calls:
  1398 ;;		_Mo_SetSpeed
  1399 ;;		_Switch_Event_Handler
  1400 ;; This function is called by:
  1401 ;;		_main
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           
  1406                           ;psect for function _VC_Update
  1407  0681                     _VC_Update:	
  1408  0681                     l2267:	
  1409                           ;incstack = 0
  1410                           ; Regs used in _VC_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1411                           
  1412                           
  1413                           ;Vacuum.c: 52:     static uint8 VC_TICK_COUNTER = 0;;Vacuum.c: 53:     VC_TICK_COUNTER +
      +                          = (10);
  1414  0681  300A               	movlw	10
  1415  0682  1283               	bcf	3,5	;RP0=0, select bank0
  1416  0683  1303               	bcf	3,6	;RP1=0, select bank0
  1417  0684  00C4               	movwf	??_VC_Update
  1418  0685  0844               	movf	??_VC_Update,w
  1419  0686  07B7               	addwf	VC_Update@VC_TICK_COUNTER,f
  1420                           
  1421                           ;Vacuum.c: 55:     if(VC_TICK_COUNTER != (20))
  1422  0687  3014               	movlw	20
  1423  0688  0637               	xorwf	VC_Update@VC_TICK_COUNTER,w
  1424  0689  1903               	btfsc	3,2
  1425  068A  2E8C               	goto	u961
  1426  068B  2E8D               	goto	u960
  1427  068C                     u961:	
  1428  068C  2E8E               	goto	l2271
  1429  068D                     u960:	
  1430  068D  2E9C               	goto	l245
  1431  068E                     l2271:	
  1432                           
  1433                           ;Vacuum.c: 57:     VC_TICK_COUNTER = 0;
  1434  068E  01B7               	clrf	VC_Update@VC_TICK_COUNTER
  1435  068F                     l2273:	
  1436                           
  1437                           ;Vacuum.c: 68:     Switch_Event_Handler();
  1438  068F  120A  118A  2147  120A  118A  	fcall	_Switch_Event_Handler
  1439  0694                     l2275:	
  1440                           
  1441                           ;Vacuum.c: 71:     Mo_SetSpeed(motor_speed);
  1442  0694  1283               	bcf	3,5	;RP0=0, select bank0
  1443  0695  1303               	bcf	3,6	;RP1=0, select bank0
  1444  0696  084E               	movf	_motor_speed,w
  1445  0697  120A  118A  2701  120A  118A  	fcall	_Mo_SetSpeed
  1446  069C                     l245:	
  1447  069C  0008               	return
  1448  069D                     __end_of_VC_Update:	
  1449                           
  1450                           	psect	text2
  1451  0147                     __ptext2:	
  1452 ;; *************** function _Switch_Event_Handler *****************
  1453 ;; Defined at:
  1454 ;;		line 75 in file "Vacuum.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;		None
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;		None
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  1    wreg      void 
  1461 ;; Registers used:
  1462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1468 ;;      Params:         0       0       0       0       0
  1469 ;;      Locals:         0       0       0       0       0
  1470 ;;      Temps:          0       2       0       0       0
  1471 ;;      Totals:         0       2       0       0       0
  1472 ;;Total ram usage:        2 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    6
  1475 ;; This function calls:
  1476 ;;		_LED_SetState
  1477 ;;		_SW_GetState
  1478 ;; This function is called by:
  1479 ;;		_VC_Update
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           
  1484                           ;psect for function _Switch_Event_Handler
  1485  0147                     _Switch_Event_Handler:	
  1486  0147                     l2075:	
  1487                           ;incstack = 0
  1488                           ; Regs used in _Switch_Event_Handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1489                           
  1490                           
  1491                           ;Vacuum.c: 81:     if(SW_GetState(SW_PLUS) == SW_PRE_PRESSED && motor_speed != HIGH_SPEE
      +                          D)
  1492  0147  3000               	movlw	0
  1493  0148  120A  118A  26D2  120A  118A  	fcall	_SW_GetState
  1494  014D  3A01               	xorlw	1
  1495  014E  1D03               	skipz
  1496  014F  2951               	goto	u831
  1497  0150  2952               	goto	u830
  1498  0151                     u831:	
  1499  0151  2975               	goto	l2089
  1500  0152                     u830:	
  1501  0152                     l2077:	
  1502  0152  300A               	movlw	10
  1503  0153  1283               	bcf	3,5	;RP0=0, select bank0
  1504  0154  1303               	bcf	3,6	;RP1=0, select bank0
  1505  0155  064E               	xorwf	_motor_speed,w
  1506  0156  1903               	btfsc	3,2
  1507  0157  2959               	goto	u841
  1508  0158  295A               	goto	u840
  1509  0159                     u841:	
  1510  0159  2975               	goto	l2089
  1511  015A                     u840:	
  1512  015A  2965               	goto	l2087
  1513  015B                     l2081:	
  1514                           
  1515                           ;Vacuum.c: 87:                 motor_speed = MID_SPEED;
  1516  015B  305A               	movlw	90
  1517  015C  00C2               	movwf	??_Switch_Event_Handler
  1518  015D  0842               	movf	??_Switch_Event_Handler,w
  1519  015E  00CE               	movwf	_motor_speed
  1520                           
  1521                           ;Vacuum.c: 88:                 break;
  1522  015F  2975               	goto	l2089
  1523  0160                     l2083:	
  1524                           
  1525                           ;Vacuum.c: 90:                 motor_speed = HIGH_SPEED;
  1526  0160  300A               	movlw	10
  1527  0161  00C2               	movwf	??_Switch_Event_Handler
  1528  0162  0842               	movf	??_Switch_Event_Handler,w
  1529  0163  00CE               	movwf	_motor_speed
  1530                           
  1531                           ;Vacuum.c: 91:                 break;
  1532  0164  2975               	goto	l2089
  1533  0165                     l2087:	
  1534  0165  084E               	movf	_motor_speed,w
  1535  0166  00C2               	movwf	??_Switch_Event_Handler
  1536  0167  01C3               	clrf	??_Switch_Event_Handler+1
  1537                           
  1538                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1539                           ; Switch size 1, requested type "simple"
  1540                           ; Number of cases is 1, Range of values is 0 to 0
  1541                           ; switch strategies available:
  1542                           ; Name         Instructions Cycles
  1543                           ; simple_byte            4     3 (average)
  1544                           ; direct_byte           11     8 (fixed)
  1545                           ; jumptable            260     6 (fixed)
  1546                           ;	Chosen strategy is simple_byte
  1547  0168  0843               	movf	??_Switch_Event_Handler+1,w
  1548  0169  3A00               	xorlw	0	; case 0
  1549  016A  1903               	skipnz
  1550  016B  296D               	goto	l2637
  1551  016C  2975               	goto	l2089
  1552  016D                     l2637:	
  1553                           
  1554                           ; Switch size 1, requested type "simple"
  1555                           ; Number of cases is 2, Range of values is 90 to 140
  1556                           ; switch strategies available:
  1557                           ; Name         Instructions Cycles
  1558                           ; simple_byte            7     4 (average)
  1559                           ; direct_byte          164    11 (fixed)
  1560                           ; jumptable            263     9 (fixed)
  1561                           ;	Chosen strategy is simple_byte
  1562  016D  0842               	movf	??_Switch_Event_Handler,w
  1563  016E  3A5A               	xorlw	90	; case 90
  1564  016F  1903               	skipnz
  1565  0170  2960               	goto	l2083
  1566  0171  3AD6               	xorlw	214	; case 140
  1567  0172  1903               	skipnz
  1568  0173  295B               	goto	l2081
  1569  0174  2975               	goto	l2089
  1570  0175                     l2089:	
  1571                           
  1572                           ;Vacuum.c: 102:     if((SW_GetState(SW_MINUS) == SW_PRE_PRESSED) && (motor_speed != LOW_
      +                          SPEED))
  1573  0175  3001               	movlw	1
  1574  0176  120A  118A  26D2  120A  118A  	fcall	_SW_GetState
  1575  017B  3A01               	xorlw	1
  1576  017C  1D03               	skipz
  1577  017D  297F               	goto	u851
  1578  017E  2980               	goto	u850
  1579  017F                     u851:	
  1580  017F  29A3               	goto	l2103
  1581  0180                     u850:	
  1582  0180                     l2091:	
  1583  0180  308C               	movlw	140
  1584  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1585  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1586  0183  064E               	xorwf	_motor_speed,w
  1587  0184  1903               	btfsc	3,2
  1588  0185  2987               	goto	u861
  1589  0186  2988               	goto	u860
  1590  0187                     u861:	
  1591  0187  29A3               	goto	l2103
  1592  0188                     u860:	
  1593  0188  2993               	goto	l2101
  1594  0189                     l2095:	
  1595                           
  1596                           ;Vacuum.c: 109:                 motor_speed = LOW_SPEED;
  1597  0189  308C               	movlw	140
  1598  018A  00C2               	movwf	??_Switch_Event_Handler
  1599  018B  0842               	movf	??_Switch_Event_Handler,w
  1600  018C  00CE               	movwf	_motor_speed
  1601                           
  1602                           ;Vacuum.c: 110:                 break;
  1603  018D  29A3               	goto	l2103
  1604  018E                     l2097:	
  1605                           
  1606                           ;Vacuum.c: 112:                 motor_speed = MID_SPEED;
  1607  018E  305A               	movlw	90
  1608  018F  00C2               	movwf	??_Switch_Event_Handler
  1609  0190  0842               	movf	??_Switch_Event_Handler,w
  1610  0191  00CE               	movwf	_motor_speed
  1611                           
  1612                           ;Vacuum.c: 113:                 break;
  1613  0192  29A3               	goto	l2103
  1614  0193                     l2101:	
  1615  0193  084E               	movf	_motor_speed,w
  1616  0194  00C2               	movwf	??_Switch_Event_Handler
  1617  0195  01C3               	clrf	??_Switch_Event_Handler+1
  1618                           
  1619                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1620                           ; Switch size 1, requested type "simple"
  1621                           ; Number of cases is 1, Range of values is 0 to 0
  1622                           ; switch strategies available:
  1623                           ; Name         Instructions Cycles
  1624                           ; simple_byte            4     3 (average)
  1625                           ; direct_byte           11     8 (fixed)
  1626                           ; jumptable            260     6 (fixed)
  1627                           ;	Chosen strategy is simple_byte
  1628  0196  0843               	movf	??_Switch_Event_Handler+1,w
  1629  0197  3A00               	xorlw	0	; case 0
  1630  0198  1903               	skipnz
  1631  0199  299B               	goto	l2639
  1632  019A  29A3               	goto	l2103
  1633  019B                     l2639:	
  1634                           
  1635                           ; Switch size 1, requested type "simple"
  1636                           ; Number of cases is 2, Range of values is 10 to 90
  1637                           ; switch strategies available:
  1638                           ; Name         Instructions Cycles
  1639                           ; simple_byte            7     4 (average)
  1640                           ; direct_byte          254    11 (fixed)
  1641                           ; jumptable            263     9 (fixed)
  1642                           ;	Chosen strategy is simple_byte
  1643  019B  0842               	movf	??_Switch_Event_Handler,w
  1644  019C  3A0A               	xorlw	10	; case 10
  1645  019D  1903               	skipnz
  1646  019E  298E               	goto	l2097
  1647  019F  3A50               	xorlw	80	; case 90
  1648  01A0  1903               	skipnz
  1649  01A1  2989               	goto	l2095
  1650  01A2  29A3               	goto	l2103
  1651  01A3                     l2103:	
  1652                           
  1653                           ;Vacuum.c: 123:     if(SW_GetState(SW_PRESSURE) == SW_PRESSED && (motor_speed != LOW_SPE
      +                          ED))
  1654  01A3  3002               	movlw	2
  1655  01A4  120A  118A  26D2  120A  118A  	fcall	_SW_GetState
  1656  01A9  3A02               	xorlw	2
  1657  01AA  1D03               	skipz
  1658  01AB  29AD               	goto	u871
  1659  01AC  29AE               	goto	u870
  1660  01AD                     u871:	
  1661  01AD  29EB               	goto	l2125
  1662  01AE                     u870:	
  1663  01AE                     l2105:	
  1664  01AE  308C               	movlw	140
  1665  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1666  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1667  01B1  064E               	xorwf	_motor_speed,w
  1668  01B2  1903               	btfsc	3,2
  1669  01B3  29B5               	goto	u881
  1670  01B4  29B6               	goto	u880
  1671  01B5                     u881:	
  1672  01B5  29EB               	goto	l2125
  1673  01B6                     u880:	
  1674  01B6                     l2107:	
  1675                           
  1676                           ;Vacuum.c: 124:     {;Vacuum.c: 126:         pressure_sw_counter += (20);
  1677  01B6  3014               	movlw	20
  1678  01B7  07AF               	addwf	_pressure_sw_counter,f
  1679  01B8  1803               	skipnc
  1680  01B9  0AB0               	incf	_pressure_sw_counter+1,f
  1681  01BA  3000               	movlw	0
  1682  01BB  07B0               	addwf	_pressure_sw_counter+1,f
  1683  01BC                     l2109:	
  1684                           
  1685                           ;Vacuum.c: 130:         if( pressure_sw_counter == (30000) )
  1686  01BC  3030               	movlw	48
  1687  01BD  062F               	xorwf	_pressure_sw_counter,w
  1688  01BE  3075               	movlw	117
  1689  01BF  1903               	skipnz
  1690  01C0  0630               	xorwf	_pressure_sw_counter+1,w
  1691  01C1  1D03               	btfss	3,2
  1692  01C2  29C4               	goto	u891
  1693  01C3  29C5               	goto	u890
  1694  01C4                     u891:	
  1695  01C4  29E2               	goto	l2123
  1696  01C5                     u890:	
  1697  01C5  29D0               	goto	l2119
  1698  01C6                     l2113:	
  1699                           
  1700                           ;Vacuum.c: 137:                     motor_speed = LOW_SPEED;
  1701  01C6  308C               	movlw	140
  1702  01C7  00C2               	movwf	??_Switch_Event_Handler
  1703  01C8  0842               	movf	??_Switch_Event_Handler,w
  1704  01C9  00CE               	movwf	_motor_speed
  1705                           
  1706                           ;Vacuum.c: 138:                     break;
  1707  01CA  29E0               	goto	l2121
  1708  01CB                     l2115:	
  1709                           
  1710                           ;Vacuum.c: 140:                     motor_speed = MID_SPEED;
  1711  01CB  305A               	movlw	90
  1712  01CC  00C2               	movwf	??_Switch_Event_Handler
  1713  01CD  0842               	movf	??_Switch_Event_Handler,w
  1714  01CE  00CE               	movwf	_motor_speed
  1715                           
  1716                           ;Vacuum.c: 141:                     break;
  1717  01CF  29E0               	goto	l2121
  1718  01D0                     l2119:	
  1719  01D0  084E               	movf	_motor_speed,w
  1720  01D1  00C2               	movwf	??_Switch_Event_Handler
  1721  01D2  01C3               	clrf	??_Switch_Event_Handler+1
  1722                           
  1723                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1724                           ; Switch size 1, requested type "simple"
  1725                           ; Number of cases is 1, Range of values is 0 to 0
  1726                           ; switch strategies available:
  1727                           ; Name         Instructions Cycles
  1728                           ; simple_byte            4     3 (average)
  1729                           ; direct_byte           11     8 (fixed)
  1730                           ; jumptable            260     6 (fixed)
  1731                           ;	Chosen strategy is simple_byte
  1732  01D3  0843               	movf	??_Switch_Event_Handler+1,w
  1733  01D4  3A00               	xorlw	0	; case 0
  1734  01D5  1903               	skipnz
  1735  01D6  29D8               	goto	l2641
  1736  01D7  29E0               	goto	l2121
  1737  01D8                     l2641:	
  1738                           
  1739                           ; Switch size 1, requested type "simple"
  1740                           ; Number of cases is 2, Range of values is 10 to 90
  1741                           ; switch strategies available:
  1742                           ; Name         Instructions Cycles
  1743                           ; simple_byte            7     4 (average)
  1744                           ; direct_byte          254    11 (fixed)
  1745                           ; jumptable            263     9 (fixed)
  1746                           ;	Chosen strategy is simple_byte
  1747  01D8  0842               	movf	??_Switch_Event_Handler,w
  1748  01D9  3A0A               	xorlw	10	; case 10
  1749  01DA  1903               	skipnz
  1750  01DB  29CB               	goto	l2115
  1751  01DC  3A50               	xorlw	80	; case 90
  1752  01DD  1903               	skipnz
  1753  01DE  29C6               	goto	l2113
  1754  01DF  29E0               	goto	l2121
  1755  01E0                     l2121:	
  1756                           
  1757                           ;Vacuum.c: 147:             pressure_sw_counter = 0;
  1758  01E0  01AF               	clrf	_pressure_sw_counter
  1759  01E1  01B0               	clrf	_pressure_sw_counter+1
  1760  01E2                     l2123:	
  1761                           
  1762                           ;Vacuum.c: 150:         LED_SetState(LED_ALARM,LED_ON);
  1763  01E2  01BA               	clrf	LED_SetState@state
  1764  01E3  0ABA               	incf	LED_SetState@state,f
  1765  01E4  3000               	movlw	0
  1766  01E5  120A  118A  2644  120A  118A  	fcall	_LED_SetState
  1767                           
  1768                           ;Vacuum.c: 151:     }
  1769  01EA  29F6               	goto	l268
  1770  01EB                     l2125:	
  1771                           
  1772                           ;Vacuum.c: 153:     {;Vacuum.c: 155:         pressure_sw_counter = 0;
  1773  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  1774  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  1775  01ED  01AF               	clrf	_pressure_sw_counter
  1776  01EE  01B0               	clrf	_pressure_sw_counter+1
  1777  01EF                     l2127:	
  1778                           
  1779                           ;Vacuum.c: 157:         LED_SetState(LED_ALARM,LED_OFF);
  1780  01EF  01BA               	clrf	LED_SetState@state
  1781  01F0  3000               	movlw	0
  1782  01F1  120A  118A  2644  120A  118A  	fcall	_LED_SetState
  1783  01F6                     l268:	
  1784  01F6  0008               	return
  1785  01F7                     __end_of_Switch_Event_Handler:	
  1786                           
  1787                           	psect	text3
  1788  06D2                     __ptext3:	
  1789 ;; *************** function _SW_GetState *****************
  1790 ;; Defined at:
  1791 ;;		line 74 in file "SW.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;  sw              1    wreg     enum E859
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  sw              1    6[BANK0 ] enum E859
  1796 ;;  ret             1    7[BANK0 ] unsigned char 
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      unsigned char 
  1799 ;; Registers used:
  1800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1806 ;;      Params:         0       0       0       0       0
  1807 ;;      Locals:         0       2       0       0       0
  1808 ;;      Temps:          0       2       0       0       0
  1809 ;;      Totals:         0       4       0       0       0
  1810 ;;Total ram usage:        4 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    5
  1813 ;; This function calls:
  1814 ;;		___bmul
  1815 ;; This function is called by:
  1816 ;;		_Switch_Event_Handler
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           
  1821                           ;psect for function _SW_GetState
  1822  06D2                     _SW_GetState:	
  1823                           
  1824                           ;incstack = 0
  1825                           ; Regs used in _SW_GetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1826                           ;SW_GetState@sw stored from wreg
  1827  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  1828  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  1829  06D4  00C0               	movwf	SW_GetState@sw
  1830  06D5                     l1903:	
  1831  06D5                     l1905:	
  1832                           
  1833                           ;SW.c: 79:     ret = SW_DATA[sw].state;
  1834  06D5  3003               	movlw	3
  1835  06D6  00BE               	movwf	??_SW_GetState
  1836  06D7  083E               	movf	??_SW_GetState,w
  1837  06D8  00BA               	movwf	___bmul@multiplicand
  1838  06D9  0840               	movf	SW_GetState@sw,w
  1839  06DA  120A  118A  26EA  120A  118A  	fcall	___bmul
  1840  06DF  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1841  06E0  0084               	movwf	4
  1842  06E1  1383               	bcf	3,7	;select IRP bank0
  1843  06E2  0800               	movf	0,w
  1844  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  1845  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  1846  06E5  00BF               	movwf	??_SW_GetState+1
  1847  06E6  083F               	movf	??_SW_GetState+1,w
  1848  06E7  00C1               	movwf	SW_GetState@ret
  1849  06E8                     l1907:	
  1850                           
  1851                           ;SW.c: 81:     return ret;
  1852  06E8  0841               	movf	SW_GetState@ret,w
  1853  06E9                     l94:	
  1854  06E9  0008               	return
  1855  06EA                     __end_of_SW_GetState:	
  1856                           
  1857                           	psect	text4
  1858  0701                     __ptext4:	
  1859 ;; *************** function _Mo_SetSpeed *****************
  1860 ;; Defined at:
  1861 ;;		line 55 in file "Motor.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;  m               1    wreg     enum E850
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;  m               1    1[BANK0 ] enum E850
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  1    wreg      void 
  1868 ;; Registers used:
  1869 ;;		wreg
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1875 ;;      Params:         0       0       0       0       0
  1876 ;;      Locals:         0       1       0       0       0
  1877 ;;      Temps:          0       1       0       0       0
  1878 ;;      Totals:         0       2       0       0       0
  1879 ;;Total ram usage:        2 bytes
  1880 ;; Hardware stack levels used:    1
  1881 ;; Hardware stack levels required when called:    4
  1882 ;; This function calls:
  1883 ;;		Nothing
  1884 ;; This function is called by:
  1885 ;;		_VC_Update
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           
  1890                           ;psect for function _Mo_SetSpeed
  1891  0701                     _Mo_SetSpeed:	
  1892                           
  1893                           ;incstack = 0
  1894                           ; Regs used in _Mo_SetSpeed: [wreg]
  1895                           ;Mo_SetSpeed@m stored from wreg
  1896  0701  1283               	bcf	3,5	;RP0=0, select bank0
  1897  0702  1303               	bcf	3,6	;RP1=0, select bank0
  1898  0703  00BB               	movwf	Mo_SetSpeed@m
  1899  0704                     l2141:	
  1900                           
  1901                           ;Motor.c: 55: void Mo_SetSpeed(MOTOR_SPEED_t m);Motor.c: 56: {;Motor.c: 58:     if(targe
      +                          t_angle == m)return;
  1902  0704  0834               	movf	_target_angle,w
  1903  0705  063B               	xorwf	Mo_SetSpeed@m,w
  1904  0706  1D03               	skipz
  1905  0707  2F09               	goto	u901
  1906  0708  2F0A               	goto	u900
  1907  0709                     u901:	
  1908  0709  2F0B               	goto	l310
  1909  070A                     u900:	
  1910  070A  2F11               	goto	l311
  1911  070B                     l310:	
  1912                           
  1913                           ;Motor.c: 65:     motor_state = MO_SWITCHING;
  1914  070B  01B2               	clrf	_motor_state
  1915  070C  0AB2               	incf	_motor_state,f
  1916  070D                     l2145:	
  1917                           
  1918                           ;Motor.c: 66:     target_angle = m;
  1919  070D  083B               	movf	Mo_SetSpeed@m,w
  1920  070E  00BA               	movwf	??_Mo_SetSpeed
  1921  070F  083A               	movf	??_Mo_SetSpeed,w
  1922  0710  00B4               	movwf	_target_angle
  1923  0711                     l311:	
  1924  0711  0008               	return
  1925  0712                     __end_of_Mo_SetSpeed:	
  1926                           
  1927                           	psect	text5
  1928  069D                     __ptext5:	
  1929 ;; *************** function _VC_Init *****************
  1930 ;; Defined at:
  1931 ;;		line 33 in file "Vacuum.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  speed           1    wreg     enum E850
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  speed           1   14[BANK0 ] enum E850
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      void 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1945 ;;      Params:         0       0       0       0       0
  1946 ;;      Locals:         0       1       0       0       0
  1947 ;;      Temps:          0       1       0       0       0
  1948 ;;      Totals:         0       2       0       0       0
  1949 ;;Total ram usage:        2 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    6
  1952 ;; This function calls:
  1953 ;;		_LED_Init
  1954 ;;		_Mo_Init
  1955 ;; This function is called by:
  1956 ;;		_main
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           
  1961                           ;psect for function _VC_Init
  1962  069D                     _VC_Init:	
  1963                           
  1964                           ;incstack = 0
  1965                           ; Regs used in _VC_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1966                           ;VC_Init@speed stored from wreg
  1967  069D  1283               	bcf	3,5	;RP0=0, select bank0
  1968  069E  1303               	bcf	3,6	;RP1=0, select bank0
  1969  069F  00C8               	movwf	VC_Init@speed
  1970  06A0                     l2161:	
  1971                           
  1972                           ;Vacuum.c: 33: void VC_Init(MOTOR_SPEED_t speed);Vacuum.c: 34: {;Vacuum.c: 36:     motor
      +                          _speed = speed;
  1973  06A0  0848               	movf	VC_Init@speed,w
  1974  06A1  00C7               	movwf	??_VC_Init
  1975  06A2  0847               	movf	??_VC_Init,w
  1976  06A3  00CE               	movwf	_motor_speed
  1977  06A4                     l2163:	
  1978                           
  1979                           ;Vacuum.c: 38:     Mo_Init(speed);
  1980  06A4  0848               	movf	VC_Init@speed,w
  1981  06A5  120A  118A  2602  120A  118A  	fcall	_Mo_Init
  1982  06AA                     l2165:	
  1983                           
  1984                           ;Vacuum.c: 41:     LED_Init(LED_ALARM,LED_OFF);
  1985  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1986  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  1987  06AC  01C2               	clrf	LED_Init@state
  1988  06AD  3000               	movlw	0
  1989  06AE  120A  118A  2509  120A  118A  	fcall	_LED_Init
  1990  06B3                     l2167:	
  1991                           
  1992                           ;Vacuum.c: 43:     pressure_sw_counter = 0;
  1993  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  1994  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  1995  06B5  01AF               	clrf	_pressure_sw_counter
  1996  06B6  01B0               	clrf	_pressure_sw_counter+1
  1997  06B7                     l236:	
  1998  06B7  0008               	return
  1999  06B8                     __end_of_VC_Init:	
  2000                           
  2001                           	psect	text6
  2002  0602                     __ptext6:	
  2003 ;; *************** function _Mo_Init *****************
  2004 ;; Defined at:
  2005 ;;		line 41 in file "Motor.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  m               1    wreg     enum E850
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  m               1    9[BANK0 ] enum E850
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      void 
  2012 ;; Registers used:
  2013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2019 ;;      Params:         0       0       0       0       0
  2020 ;;      Locals:         0       1       0       0       0
  2021 ;;      Temps:          0       1       0       0       0
  2022 ;;      Totals:         0       2       0       0       0
  2023 ;;Total ram usage:        2 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    5
  2026 ;; This function calls:
  2027 ;;		_GPIO_Init_Pin
  2028 ;; This function is called by:
  2029 ;;		_VC_Init
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           
  2034                           ;psect for function _Mo_Init
  2035  0602                     _Mo_Init:	
  2036                           
  2037                           ;incstack = 0
  2038                           ; Regs used in _Mo_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2039                           ;Mo_Init@m stored from wreg
  2040  0602  1283               	bcf	3,5	;RP0=0, select bank0
  2041  0603  1303               	bcf	3,6	;RP1=0, select bank0
  2042  0604  00C3               	movwf	Mo_Init@m
  2043  0605                     l2059:	
  2044                           
  2045                           ;Motor.c: 41: void Mo_Init(MOTOR_SPEED_t m);Motor.c: 42: {;Motor.c: 44:     GPIO_Init_Pi
      +                          n(&(TRISC),(3),(0));
  2046  0605  3087               	movlw	135
  2047  0606  00BA               	movwf	GPIO_Init_Pin@DirRegAddress
  2048  0607  3000               	movlw	0
  2049  0608  00BB               	movwf	GPIO_Init_Pin@DirRegAddress+1
  2050  0609  3003               	movlw	3
  2051  060A  00C2               	movwf	??_Mo_Init
  2052  060B  0842               	movf	??_Mo_Init,w
  2053  060C  00BC               	movwf	GPIO_Init_Pin@pin_number
  2054  060D  01BD               	clrf	GPIO_Init_Pin@dir
  2055  060E  120A  118A  22F3  120A  118A  	fcall	_GPIO_Init_Pin
  2056  0613                     l2061:	
  2057                           
  2058                           ;Motor.c: 45:     (((PORTC))=((PORTC) & ~(1<<(3)))|(0<<(3)));
  2059  0613  1283               	bcf	3,5	;RP0=0, select bank0
  2060  0614  1303               	bcf	3,6	;RP1=0, select bank0
  2061  0615  0807               	movf	7,w	;volatile
  2062  0616  39F7               	andlw	247
  2063  0617  0087               	movwf	7	;volatile
  2064  0618                     l2063:	
  2065                           
  2066                           ;Motor.c: 47:     actual_angle = (170);
  2067  0618  30AA               	movlw	170
  2068  0619  00C2               	movwf	??_Mo_Init
  2069  061A  0842               	movf	??_Mo_Init,w
  2070  061B  00B3               	movwf	_actual_angle
  2071  061C                     l2065:	
  2072                           
  2073                           ;Motor.c: 49:     target_angle = m;
  2074  061C  0843               	movf	Mo_Init@m,w
  2075  061D  00C2               	movwf	??_Mo_Init
  2076  061E  0842               	movf	??_Mo_Init,w
  2077  061F  00B4               	movwf	_target_angle
  2078  0620                     l2067:	
  2079                           
  2080                           ;Motor.c: 51:     motor_state = MO_SWITCHING;
  2081  0620  01B2               	clrf	_motor_state
  2082  0621  0AB2               	incf	_motor_state,f
  2083  0622                     l2069:	
  2084                           
  2085                           ;Motor.c: 53:     soft_switching_counter = 0;
  2086  0622  01B5               	clrf	_soft_switching_counter
  2087  0623                     l307:	
  2088  0623  0008               	return
  2089  0624                     __end_of_Mo_Init:	
  2090                           
  2091                           	psect	text7
  2092  0509                     __ptext7:	
  2093 ;; *************** function _LED_Init *****************
  2094 ;; Defined at:
  2095 ;;		line 14 in file "Led.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;  led             1    wreg     enum E859
  2098 ;;  state           1    8[BANK0 ] enum E862
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  led             1   12[BANK0 ] enum E859
  2101 ;;  ret             1   11[BANK0 ] unsigned char 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  1    wreg      unsigned char 
  2104 ;; Registers used:
  2105 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2111 ;;      Params:         0       1       0       0       0
  2112 ;;      Locals:         0       2       0       0       0
  2113 ;;      Temps:          0       2       0       0       0
  2114 ;;      Totals:         0       5       0       0       0
  2115 ;;Total ram usage:        5 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    5
  2118 ;; This function calls:
  2119 ;;		_GPIO_Init_Pin
  2120 ;;		_LED_SetState
  2121 ;; This function is called by:
  2122 ;;		_VC_Init
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           
  2127                           ;psect for function _LED_Init
  2128  0509                     _LED_Init:	
  2129                           
  2130                           ;incstack = 0
  2131                           ; Regs used in _LED_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2132                           ;LED_Init@led stored from wreg
  2133  0509  1283               	bcf	3,5	;RP0=0, select bank0
  2134  050A  1303               	bcf	3,6	;RP1=0, select bank0
  2135  050B  00C6               	movwf	LED_Init@led
  2136  050C                     l1977:	
  2137                           
  2138                           ;Led.c: 21:     switch(led)
  2139  050C  2D23               	goto	l1983
  2140  050D                     l1979:	
  2141                           
  2142                           ;Led.c: 24:             ret = GPIO_Init_Pin(&(TRISB),(3),(0));
  2143  050D  3086               	movlw	134
  2144  050E  00BA               	movwf	GPIO_Init_Pin@DirRegAddress
  2145  050F  3000               	movlw	0
  2146  0510  00BB               	movwf	GPIO_Init_Pin@DirRegAddress+1
  2147  0511  3003               	movlw	3
  2148  0512  00C3               	movwf	??_LED_Init
  2149  0513  0843               	movf	??_LED_Init,w
  2150  0514  00BC               	movwf	GPIO_Init_Pin@pin_number
  2151  0515  01BD               	clrf	GPIO_Init_Pin@dir
  2152  0516  120A  118A  22F3  120A  118A  	fcall	_GPIO_Init_Pin
  2153  051B  1283               	bcf	3,5	;RP0=0, select bank0
  2154  051C  1303               	bcf	3,6	;RP1=0, select bank0
  2155  051D  00C4               	movwf	??_LED_Init+1
  2156  051E  0844               	movf	??_LED_Init+1,w
  2157  051F  00C5               	movwf	LED_Init@ret
  2158                           
  2159                           ;Led.c: 25:             break;
  2160  0520  2D30               	goto	l1985
  2161  0521                     l1981:	
  2162  0521  01C5               	clrf	LED_Init@ret
  2163                           
  2164                           ;Led.c: 27:     }
  2165  0522  2D30               	goto	l1985
  2166  0523                     l1983:	
  2167  0523  0846               	movf	LED_Init@led,w
  2168  0524  00C3               	movwf	??_LED_Init
  2169  0525  01C4               	clrf	??_LED_Init+1
  2170                           
  2171                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2172                           ; Switch size 1, requested type "simple"
  2173                           ; Number of cases is 1, Range of values is 0 to 0
  2174                           ; switch strategies available:
  2175                           ; Name         Instructions Cycles
  2176                           ; simple_byte            4     3 (average)
  2177                           ; direct_byte           11     8 (fixed)
  2178                           ; jumptable            260     6 (fixed)
  2179                           ;	Chosen strategy is simple_byte
  2180  0526  0844               	movf	??_LED_Init+1,w
  2181  0527  3A00               	xorlw	0	; case 0
  2182  0528  1903               	skipnz
  2183  0529  2D2B               	goto	l2643
  2184  052A  2D21               	goto	l1981
  2185  052B                     l2643:	
  2186                           
  2187                           ; Switch size 1, requested type "simple"
  2188                           ; Number of cases is 1, Range of values is 0 to 0
  2189                           ; switch strategies available:
  2190                           ; Name         Instructions Cycles
  2191                           ; simple_byte            4     3 (average)
  2192                           ; direct_byte           11     8 (fixed)
  2193                           ; jumptable            260     6 (fixed)
  2194                           ;	Chosen strategy is simple_byte
  2195  052B  0843               	movf	??_LED_Init,w
  2196  052C  3A00               	xorlw	0	; case 0
  2197  052D  1903               	skipnz
  2198  052E  2D0D               	goto	l1979
  2199  052F  2D21               	goto	l1981
  2200  0530                     l1985:	
  2201                           
  2202                           ;Led.c: 28:     if(ret != 0)
  2203  0530  0845               	movf	LED_Init@ret,w
  2204  0531  1903               	btfsc	3,2
  2205  0532  2D34               	goto	u821
  2206  0533  2D35               	goto	u820
  2207  0534                     u821:	
  2208  0534  2D3F               	goto	l130
  2209  0535                     u820:	
  2210  0535                     l1987:	
  2211                           
  2212                           ;Led.c: 29:     {;Led.c: 30:         LED_SetState(led,state);
  2213  0535  0842               	movf	LED_Init@state,w
  2214  0536  00C3               	movwf	??_LED_Init
  2215  0537  0843               	movf	??_LED_Init,w
  2216  0538  00BA               	movwf	LED_SetState@state
  2217  0539  0846               	movf	LED_Init@led,w
  2218  053A  120A  118A  2644  120A  118A  	fcall	_LED_SetState
  2219  053F                     l130:	
  2220  053F  0008               	return
  2221  0540                     __end_of_LED_Init:	
  2222                           
  2223                           	psect	text8
  2224  0644                     __ptext8:	
  2225 ;; *************** function _LED_SetState *****************
  2226 ;; Defined at:
  2227 ;;		line 50 in file "Led.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;  led             1    wreg     enum E859
  2230 ;;  state           1    0[BANK0 ] enum E862
  2231 ;; Auto vars:     Size  Location     Type
  2232 ;;  led             1    3[BANK0 ] enum E859
  2233 ;; Return value:  Size  Location     Type
  2234 ;;                  1    wreg      void 
  2235 ;; Registers used:
  2236 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2237 ;; Tracked objects:
  2238 ;;		On entry : 0/0
  2239 ;;		On exit  : 0/0
  2240 ;;		Unchanged: 0/0
  2241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2242 ;;      Params:         0       1       0       0       0
  2243 ;;      Locals:         0       1       0       0       0
  2244 ;;      Temps:          0       2       0       0       0
  2245 ;;      Totals:         0       4       0       0       0
  2246 ;;Total ram usage:        4 bytes
  2247 ;; Hardware stack levels used:    1
  2248 ;; Hardware stack levels required when called:    4
  2249 ;; This function calls:
  2250 ;;		Nothing
  2251 ;; This function is called by:
  2252 ;;		_LED_Init
  2253 ;;		_Switch_Event_Handler
  2254 ;;		_LED_Toggle
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           
  2259                           ;psect for function _LED_SetState
  2260  0644                     _LED_SetState:	
  2261                           
  2262                           ;incstack = 0
  2263                           ; Regs used in _LED_SetState: [wreg-fsr0h+status,2+status,0]
  2264                           ;LED_SetState@led stored from wreg
  2265  0644  1283               	bcf	3,5	;RP0=0, select bank0
  2266  0645  1303               	bcf	3,6	;RP1=0, select bank0
  2267  0646  00BD               	movwf	LED_SetState@led
  2268  0647                     l1911:	
  2269                           
  2270                           ;Led.c: 50: void LED_SetState(LED_t led, LEDState_t state);Led.c: 51: {;Led.c: 53:     s
      +                          witch(led)
  2271  0647  2E55               	goto	l1917
  2272  0648                     l1913:	
  2273                           
  2274                           ;Led.c: 56:             (((PORTB))=((PORTB) & ~(1<<(3)))|(state<<(3)));
  2275  0648  083A               	movf	LED_SetState@state,w
  2276  0649  00BB               	movwf	??_LED_SetState
  2277  064A  3003               	movlw	3
  2278  064B                     u695:	
  2279  064B  1003               	clrc
  2280  064C  0DBB               	rlf	??_LED_SetState,f
  2281  064D  3EFF               	addlw	-1
  2282  064E  1D03               	skipz
  2283  064F  2E4B               	goto	u695
  2284  0650  0806               	movf	6,w	;volatile
  2285  0651  39F7               	andlw	247
  2286  0652  043B               	iorwf	??_LED_SetState,w
  2287  0653  0086               	movwf	6	;volatile
  2288                           
  2289                           ;Led.c: 57:             break;
  2290  0654  2E62               	goto	l144
  2291  0655                     l1917:	
  2292  0655  083D               	movf	LED_SetState@led,w
  2293  0656  00BB               	movwf	??_LED_SetState
  2294  0657  01BC               	clrf	??_LED_SetState+1
  2295                           
  2296                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2297                           ; Switch size 1, requested type "simple"
  2298                           ; Number of cases is 1, Range of values is 0 to 0
  2299                           ; switch strategies available:
  2300                           ; Name         Instructions Cycles
  2301                           ; simple_byte            4     3 (average)
  2302                           ; direct_byte           11     8 (fixed)
  2303                           ; jumptable            260     6 (fixed)
  2304                           ;	Chosen strategy is simple_byte
  2305  0658  083C               	movf	??_LED_SetState+1,w
  2306  0659  3A00               	xorlw	0	; case 0
  2307  065A  1903               	skipnz
  2308  065B  2E5D               	goto	l2645
  2309  065C  2E62               	goto	l144
  2310  065D                     l2645:	
  2311                           
  2312                           ; Switch size 1, requested type "simple"
  2313                           ; Number of cases is 1, Range of values is 0 to 0
  2314                           ; switch strategies available:
  2315                           ; Name         Instructions Cycles
  2316                           ; simple_byte            4     3 (average)
  2317                           ; direct_byte           11     8 (fixed)
  2318                           ; jumptable            260     6 (fixed)
  2319                           ;	Chosen strategy is simple_byte
  2320  065D  083B               	movf	??_LED_SetState,w
  2321  065E  3A00               	xorlw	0	; case 0
  2322  065F  1903               	skipnz
  2323  0660  2E48               	goto	l1913
  2324  0661  2E62               	goto	l144
  2325  0662                     l144:	
  2326  0662  0008               	return
  2327  0663                     __end_of_LED_SetState:	
  2328                           
  2329                           	psect	text9
  2330  0749                     __ptext9:	
  2331 ;; *************** function _TMR_Start *****************
  2332 ;; Defined at:
  2333 ;;		line 48 in file "Timer_ZCD.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;		None
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;		None
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  1    wreg      void 
  2340 ;; Registers used:
  2341 ;;		wreg
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2347 ;;      Params:         0       0       0       0       0
  2348 ;;      Locals:         0       0       0       0       0
  2349 ;;      Temps:          0       0       0       0       0
  2350 ;;      Totals:         0       0       0       0       0
  2351 ;;Total ram usage:        0 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    4
  2354 ;; This function calls:
  2355 ;;		Nothing
  2356 ;; This function is called by:
  2357 ;;		_main
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           
  2362                           ;psect for function _TMR_Start
  2363  0749                     _TMR_Start:	
  2364  0749                     l2171:	
  2365                           ;incstack = 0
  2366                           ; Regs used in _TMR_Start: [wreg]
  2367                           
  2368                           
  2369                           ;Timer_ZCD.c: 51:     ((TMR0IF) = 0);
  2370  0749  110B               	bcf	11,2	;volatile
  2371  074A                     l2173:	
  2372                           
  2373                           ;Timer_ZCD.c: 53:     ((TMR0) = 256 - ((78)));
  2374  074A  30B2               	movlw	178
  2375  074B  1283               	bcf	3,5	;RP0=0, select bank0
  2376  074C  1303               	bcf	3,6	;RP1=0, select bank0
  2377  074D  0081               	movwf	1	;volatile
  2378  074E                     l2175:	
  2379                           
  2380                           ;Timer_ZCD.c: 55:     (TMR0IE = 1);
  2381  074E  168B               	bsf	11,5	;volatile
  2382  074F                     l2177:	
  2383                           
  2384                           ;Timer_ZCD.c: 56:     (GIE = 1);
  2385  074F  178B               	bsf	11,7	;volatile
  2386  0750                     l2179:	
  2387                           
  2388                           ;Timer_ZCD.c: 58:     (T0CS = 0);
  2389  0750  1683               	bsf	3,5	;RP0=1, select bank1
  2390  0751  1303               	bcf	3,6	;RP1=0, select bank1
  2391  0752  1281               	bcf	1,5	;volatile
  2392  0753                     l368:	
  2393  0753  0008               	return
  2394  0754                     __end_of_TMR_Start:	
  2395                           
  2396                           	psect	text10
  2397  0764                     __ptext10:	
  2398 ;; *************** function _TMR_Init *****************
  2399 ;; Defined at:
  2400 ;;		line 25 in file "Timer_ZCD.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;		None
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;		None
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      void 
  2407 ;; Registers used:
  2408 ;;		None
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2414 ;;      Params:         0       0       0       0       0
  2415 ;;      Locals:         0       0       0       0       0
  2416 ;;      Temps:          0       0       0       0       0
  2417 ;;      Totals:         0       0       0       0       0
  2418 ;;Total ram usage:        0 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    4
  2421 ;; This function calls:
  2422 ;;		Nothing
  2423 ;; This function is called by:
  2424 ;;		_main
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           
  2429                           ;psect for function _TMR_Init
  2430  0764                     _TMR_Init:	
  2431  0764                     l2169:	
  2432                           ;incstack = 0
  2433                           ; Regs used in _TMR_Init: []
  2434                           
  2435                           
  2436                           ;Timer_ZCD.c: 29:     PS2 = 1; PS1 = 1; PS0 = 1;
  2437  0764  1683               	bsf	3,5	;RP0=1, select bank1
  2438  0765  1303               	bcf	3,6	;RP1=0, select bank1
  2439  0766  1501               	bsf	1,2	;volatile
  2440  0767  1481               	bsf	1,1	;volatile
  2441  0768  1401               	bsf	1,0	;volatile
  2442                           
  2443                           ;Timer_ZCD.c: 31:     (T0CS = 1);
  2444  0769  1681               	bsf	1,5	;volatile
  2445  076A                     l362:	
  2446  076A  0008               	return
  2447  076B                     __end_of_TMR_Init:	
  2448                           
  2449                           	psect	text11
  2450  075C                     __ptext11:	
  2451 ;; *************** function _TMR1_Init *****************
  2452 ;; Defined at:
  2453 ;;		line 10 in file "Timer1.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;		None
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      void 
  2460 ;; Registers used:
  2461 ;;		None
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2467 ;;      Params:         0       0       0       0       0
  2468 ;;      Locals:         0       0       0       0       0
  2469 ;;      Temps:          0       0       0       0       0
  2470 ;;      Totals:         0       0       0       0       0
  2471 ;;Total ram usage:        0 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    4
  2474 ;; This function calls:
  2475 ;;		Nothing
  2476 ;; This function is called by:
  2477 ;;		_main
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           
  2482                           ;psect for function _TMR1_Init
  2483  075C                     _TMR1_Init:	
  2484  075C                     l2181:	
  2485                           ;incstack = 0
  2486                           ; Regs used in _TMR1_Init: []
  2487                           
  2488                           
  2489                           ;Timer1.c: 14:     T1CKPS0 = 1; T1CKPS1 = 0;
  2490  075C  1283               	bcf	3,5	;RP0=0, select bank0
  2491  075D  1303               	bcf	3,6	;RP1=0, select bank0
  2492  075E  1610               	bsf	16,4	;volatile
  2493  075F  1290               	bcf	16,5	;volatile
  2494                           
  2495                           ;Timer1.c: 16:     (TMR1CS = 0);
  2496  0760  1090               	bcf	16,1	;volatile
  2497                           
  2498                           ;Timer1.c: 18:     (T1OSCEN = 0);
  2499  0761  1190               	bcf	16,3	;volatile
  2500                           
  2501                           ;Timer1.c: 20:     ((TMR1ON) = 0);
  2502  0762  1010               	bcf	16,0	;volatile
  2503  0763                     l397:	
  2504  0763  0008               	return
  2505  0764                     __end_of_TMR1_Init:	
  2506                           
  2507                           	psect	text12
  2508  047E                     __ptext12:	
  2509 ;; *************** function _SW_Update *****************
  2510 ;; Defined at:
  2511 ;;		line 83 in file "SW.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;		None
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;		None
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  1    wreg      void 
  2518 ;; Registers used:
  2519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2525 ;;      Params:         0       0       0       0       0
  2526 ;;      Locals:         0       0       0       0       0
  2527 ;;      Temps:          0       2       0       0       0
  2528 ;;      Totals:         0       2       0       0       0
  2529 ;;Total ram usage:        2 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    6
  2532 ;; This function calls:
  2533 ;;		_SW_UpdateState
  2534 ;; This function is called by:
  2535 ;;		_main
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           
  2540                           ;psect for function _SW_Update
  2541  047E                     _SW_Update:	
  2542  047E                     l2225:	
  2543                           ;incstack = 0
  2544                           ; Regs used in _SW_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2545                           
  2546                           
  2547                           ;SW.c: 88:     static uint8 SW_Time_Counter = 0;;SW.c: 89:     SW_Time_Counter += (10);
  2548  047E  300A               	movlw	10
  2549  047F  1283               	bcf	3,5	;RP0=0, select bank0
  2550  0480  1303               	bcf	3,6	;RP1=0, select bank0
  2551  0481  00C2               	movwf	??_SW_Update
  2552  0482  0842               	movf	??_SW_Update,w
  2553  0483  07B8               	addwf	SW_Update@SW_Time_Counter,f
  2554                           
  2555                           ;SW.c: 91:     if(SW_Time_Counter != (20))
  2556  0484  3014               	movlw	20
  2557  0485  0638               	xorwf	SW_Update@SW_Time_Counter,w
  2558  0486  1903               	btfsc	3,2
  2559  0487  2C89               	goto	u931
  2560  0488  2C8A               	goto	u930
  2561  0489                     u931:	
  2562  0489  2C8B               	goto	l2229
  2563  048A                     u930:	
  2564  048A  2CC8               	goto	l100
  2565  048B                     l2229:	
  2566                           
  2567                           ;SW.c: 95:     SW_Time_Counter = 0;
  2568  048B  01B8               	clrf	SW_Update@SW_Time_Counter
  2569  048C                     l2231:	
  2570                           
  2571                           ;SW.c: 97:     SW_DATA[SW_PLUS].samples[0] = SW_DATA[SW_PLUS].samples[1];
  2572  048C  0821               	movf	_SW_DATA+1,w
  2573  048D  00C2               	movwf	??_SW_Update
  2574  048E  0842               	movf	??_SW_Update,w
  2575  048F  00A0               	movwf	_SW_DATA
  2576                           
  2577                           ;SW.c: 98:     SW_DATA[SW_PLUS].samples[1] = (((PORTB) >> (0))& 1);
  2578  0490  0806               	movf	6,w	;volatile
  2579  0491  3901               	andlw	1
  2580  0492  00C2               	movwf	??_SW_Update
  2581  0493  0842               	movf	??_SW_Update,w
  2582  0494  00A1               	movwf	_SW_DATA+1
  2583  0495                     l2233:	
  2584                           
  2585                           ;SW.c: 100:     SW_UpdateState(SW_PLUS);
  2586  0495  3000               	movlw	0
  2587  0496  120A  118A  2036  120A  118A  	fcall	_SW_UpdateState
  2588  049B                     l2235:	
  2589                           
  2590                           ;SW.c: 102:     SW_DATA[SW_MINUS].samples[0] = SW_DATA[SW_MINUS].samples[1];
  2591  049B  1283               	bcf	3,5	;RP0=0, select bank0
  2592  049C  1303               	bcf	3,6	;RP1=0, select bank0
  2593  049D  0824               	movf	_SW_DATA+4,w
  2594  049E  00C2               	movwf	??_SW_Update
  2595  049F  0842               	movf	??_SW_Update,w
  2596  04A0  00A3               	movwf	_SW_DATA+3
  2597  04A1                     l2237:	
  2598                           
  2599                           ;SW.c: 103:     SW_DATA[SW_MINUS].samples[1] = (((PORTB) >> (1))& 1);
  2600  04A1  0806               	movf	6,w	;volatile
  2601  04A2  00C2               	movwf	??_SW_Update
  2602  04A3  1003               	clrc
  2603  04A4  0C42               	rrf	??_SW_Update,w
  2604  04A5  3901               	andlw	1
  2605  04A6  00C3               	movwf	??_SW_Update+1
  2606  04A7  0843               	movf	??_SW_Update+1,w
  2607  04A8  00A4               	movwf	_SW_DATA+4
  2608  04A9                     l2239:	
  2609                           
  2610                           ;SW.c: 105:     SW_UpdateState(SW_MINUS);
  2611  04A9  3001               	movlw	1
  2612  04AA  120A  118A  2036  120A  118A  	fcall	_SW_UpdateState
  2613  04AF                     l2241:	
  2614                           
  2615                           ;SW.c: 108:     SW_DATA[SW_PRESSURE].samples[0] = SW_DATA[SW_PRESSURE].samples[1];
  2616  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  2617  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  2618  04B1  0827               	movf	_SW_DATA+7,w
  2619  04B2  00C2               	movwf	??_SW_Update
  2620  04B3  0842               	movf	??_SW_Update,w
  2621  04B4  00A6               	movwf	_SW_DATA+6
  2622  04B5                     l2243:	
  2623                           
  2624                           ;SW.c: 109:     SW_DATA[SW_PRESSURE].samples[1] = (((PORTB) >> (2))& 1);
  2625  04B5  0806               	movf	6,w	;volatile
  2626  04B6  00C2               	movwf	??_SW_Update
  2627  04B7  3002               	movlw	2
  2628  04B8                     u945:	
  2629  04B8  1003               	clrc
  2630  04B9  0CC2               	rrf	??_SW_Update,f
  2631  04BA  3EFF               	addlw	-1
  2632  04BB  1D03               	skipz
  2633  04BC  2CB8               	goto	u945
  2634  04BD  0842               	movf	??_SW_Update,w
  2635  04BE  3901               	andlw	1
  2636  04BF  00C3               	movwf	??_SW_Update+1
  2637  04C0  0843               	movf	??_SW_Update+1,w
  2638  04C1  00A7               	movwf	_SW_DATA+7
  2639  04C2                     l2245:	
  2640                           
  2641                           ;SW.c: 111:     SW_UpdateState(SW_PRESSURE);
  2642  04C2  3002               	movlw	2
  2643  04C3  120A  118A  2036  120A  118A  	fcall	_SW_UpdateState
  2644  04C8                     l100:	
  2645  04C8  0008               	return
  2646  04C9                     __end_of_SW_Update:	
  2647                           
  2648                           	psect	text13
  2649  0036                     __ptext13:	
  2650 ;; *************** function _SW_UpdateState *****************
  2651 ;; Defined at:
  2652 ;;		line 114 in file "SW.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  sw              1    wreg     enum E859
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  sw              1    7[BANK0 ] enum E859
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  1    wreg      void 
  2659 ;; Registers used:
  2660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2666 ;;      Params:         0       0       0       0       0
  2667 ;;      Locals:         0       1       0       0       0
  2668 ;;      Temps:          0       3       0       0       0
  2669 ;;      Totals:         0       4       0       0       0
  2670 ;;Total ram usage:        4 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    5
  2673 ;; This function calls:
  2674 ;;		___bmul
  2675 ;; This function is called by:
  2676 ;;		_SW_Update
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           
  2681                           ;psect for function _SW_UpdateState
  2682  0036                     _SW_UpdateState:	
  2683                           
  2684                           ;incstack = 0
  2685                           ; Regs used in _SW_UpdateState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2686                           ;SW_UpdateState@sw stored from wreg
  2687  0036  1283               	bcf	3,5	;RP0=0, select bank0
  2688  0037  1303               	bcf	3,6	;RP1=0, select bank0
  2689  0038  00C1               	movwf	SW_UpdateState@sw
  2690  0039                     l1941:	
  2691                           
  2692                           ;SW.c: 114: void SW_UpdateState(SW_t sw);SW.c: 115: {;SW.c: 131:     switch(SW_DATA[sw].
      +                          state)
  2693  0039  2921               	goto	l1969
  2694  003A                     l1943:	
  2695                           
  2696                           ;SW.c: 135:             if(SW_DATA[sw].samples[0] == (1) && SW_DATA[sw].samples[1] == (1
      +                          ))
  2697  003A  3003               	movlw	3
  2698  003B  00BE               	movwf	??_SW_UpdateState
  2699  003C  083E               	movf	??_SW_UpdateState,w
  2700  003D  00BA               	movwf	___bmul@multiplicand
  2701  003E  0841               	movf	SW_UpdateState@sw,w
  2702  003F  120A  118A  26EA  120A  118A  	fcall	___bmul
  2703  0044  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  2704  0045  0084               	movwf	4
  2705  0046  1383               	bcf	3,7	;select IRP bank0
  2706  0047  0300               	decf	0,w
  2707  0048  1D03               	btfss	3,2
  2708  0049  284B               	goto	u741
  2709  004A  284C               	goto	u740
  2710  004B                     u741:	
  2711  004B  2946               	goto	l114
  2712  004C                     u740:	
  2713  004C                     l1945:	
  2714  004C  3003               	movlw	3
  2715  004D  1283               	bcf	3,5	;RP0=0, select bank0
  2716  004E  1303               	bcf	3,6	;RP1=0, select bank0
  2717  004F  00BE               	movwf	??_SW_UpdateState
  2718  0050  083E               	movf	??_SW_UpdateState,w
  2719  0051  00BA               	movwf	___bmul@multiplicand
  2720  0052  0841               	movf	SW_UpdateState@sw,w
  2721  0053  120A  118A  26EA  120A  118A  	fcall	___bmul
  2722  0058  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  2723  0059  0084               	movwf	4
  2724  005A  1383               	bcf	3,7	;select IRP bank0
  2725  005B  0300               	decf	0,w
  2726  005C  1D03               	btfss	3,2
  2727  005D  285F               	goto	u751
  2728  005E  2860               	goto	u750
  2729  005F                     u751:	
  2730  005F  2946               	goto	l114
  2731  0060                     u750:	
  2732  0060                     l1947:	
  2733                           
  2734                           ;SW.c: 136:                 SW_DATA[sw].state = SW_RELEASED;
  2735  0060  3003               	movlw	3
  2736  0061  1283               	bcf	3,5	;RP0=0, select bank0
  2737  0062  1303               	bcf	3,6	;RP1=0, select bank0
  2738  0063  00BE               	movwf	??_SW_UpdateState
  2739  0064  083E               	movf	??_SW_UpdateState,w
  2740  0065  00BA               	movwf	___bmul@multiplicand
  2741  0066  0841               	movf	SW_UpdateState@sw,w
  2742  0067  120A  118A  26EA  120A  118A  	fcall	___bmul
  2743  006C  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2744  006D  0084               	movwf	4
  2745  006E  1383               	bcf	3,7	;select IRP bank0
  2746  006F  0180               	clrf	0
  2747  0070  2946               	goto	l114
  2748  0071                     l1949:	
  2749                           
  2750                           ;SW.c: 139:             if(SW_DATA[sw].samples[0] == (0) && SW_DATA[sw].samples[1] == (0
      +                          ))
  2751  0071  3003               	movlw	3
  2752  0072  00BE               	movwf	??_SW_UpdateState
  2753  0073  083E               	movf	??_SW_UpdateState,w
  2754  0074  00BA               	movwf	___bmul@multiplicand
  2755  0075  0841               	movf	SW_UpdateState@sw,w
  2756  0076  120A  118A  26EA  120A  118A  	fcall	___bmul
  2757  007B  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  2758  007C  0084               	movwf	4
  2759  007D  1383               	bcf	3,7	;select IRP bank0
  2760  007E  0800               	movf	0,w
  2761  007F  1D03               	btfss	3,2
  2762  0080  2882               	goto	u761
  2763  0081  2883               	goto	u760
  2764  0082                     u761:	
  2765  0082  2946               	goto	l114
  2766  0083                     u760:	
  2767  0083                     l1951:	
  2768  0083  3003               	movlw	3
  2769  0084  1283               	bcf	3,5	;RP0=0, select bank0
  2770  0085  1303               	bcf	3,6	;RP1=0, select bank0
  2771  0086  00BE               	movwf	??_SW_UpdateState
  2772  0087  083E               	movf	??_SW_UpdateState,w
  2773  0088  00BA               	movwf	___bmul@multiplicand
  2774  0089  0841               	movf	SW_UpdateState@sw,w
  2775  008A  120A  118A  26EA  120A  118A  	fcall	___bmul
  2776  008F  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  2777  0090  0084               	movwf	4
  2778  0091  1383               	bcf	3,7	;select IRP bank0
  2779  0092  0800               	movf	0,w
  2780  0093  1D03               	btfss	3,2
  2781  0094  2896               	goto	u771
  2782  0095  2897               	goto	u770
  2783  0096                     u771:	
  2784  0096  2946               	goto	l114
  2785  0097                     u770:	
  2786  0097                     l1953:	
  2787                           
  2788                           ;SW.c: 140:                 SW_DATA[sw].state = SW_PRE_PRESSED;
  2789  0097  3003               	movlw	3
  2790  0098  1283               	bcf	3,5	;RP0=0, select bank0
  2791  0099  1303               	bcf	3,6	;RP1=0, select bank0
  2792  009A  00BE               	movwf	??_SW_UpdateState
  2793  009B  083E               	movf	??_SW_UpdateState,w
  2794  009C  00BA               	movwf	___bmul@multiplicand
  2795  009D  0841               	movf	SW_UpdateState@sw,w
  2796  009E  120A  118A  26EA  120A  118A  	fcall	___bmul
  2797  00A3  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2798  00A4  0084               	movwf	4
  2799  00A5  1383               	bcf	3,7	;select IRP bank0
  2800  00A6  0180               	clrf	0
  2801  00A7  0A80               	incf	0,f
  2802  00A8  2946               	goto	l114
  2803  00A9                     l1955:	
  2804                           
  2805                           ;SW.c: 143:             if(SW_DATA[sw].samples[0] == (0) && SW_DATA[sw].samples[1] == (0
      +                          ))
  2806  00A9  3003               	movlw	3
  2807  00AA  00BE               	movwf	??_SW_UpdateState
  2808  00AB  083E               	movf	??_SW_UpdateState,w
  2809  00AC  00BA               	movwf	___bmul@multiplicand
  2810  00AD  0841               	movf	SW_UpdateState@sw,w
  2811  00AE  120A  118A  26EA  120A  118A  	fcall	___bmul
  2812  00B3  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  2813  00B4  0084               	movwf	4
  2814  00B5  1383               	bcf	3,7	;select IRP bank0
  2815  00B6  0800               	movf	0,w
  2816  00B7  1D03               	btfss	3,2
  2817  00B8  28BA               	goto	u781
  2818  00B9  28BB               	goto	u780
  2819  00BA                     u781:	
  2820  00BA  2946               	goto	l114
  2821  00BB                     u780:	
  2822  00BB                     l1957:	
  2823  00BB  3003               	movlw	3
  2824  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  2825  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  2826  00BE  00BE               	movwf	??_SW_UpdateState
  2827  00BF  083E               	movf	??_SW_UpdateState,w
  2828  00C0  00BA               	movwf	___bmul@multiplicand
  2829  00C1  0841               	movf	SW_UpdateState@sw,w
  2830  00C2  120A  118A  26EA  120A  118A  	fcall	___bmul
  2831  00C7  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  2832  00C8  0084               	movwf	4
  2833  00C9  1383               	bcf	3,7	;select IRP bank0
  2834  00CA  0800               	movf	0,w
  2835  00CB  1D03               	btfss	3,2
  2836  00CC  28CE               	goto	u791
  2837  00CD  28CF               	goto	u790
  2838  00CE                     u791:	
  2839  00CE  2946               	goto	l114
  2840  00CF                     u790:	
  2841  00CF                     l1959:	
  2842                           
  2843                           ;SW.c: 144:                 SW_DATA[sw].state = SW_PRESSED;
  2844  00CF  3002               	movlw	2
  2845  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  2846  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  2847  00D2  00BE               	movwf	??_SW_UpdateState
  2848  00D3  3003               	movlw	3
  2849  00D4  00BF               	movwf	??_SW_UpdateState+1
  2850  00D5  083F               	movf	??_SW_UpdateState+1,w
  2851  00D6  00BA               	movwf	___bmul@multiplicand
  2852  00D7  0841               	movf	SW_UpdateState@sw,w
  2853  00D8  120A  118A  26EA  120A  118A  	fcall	___bmul
  2854  00DD  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2855  00DE  0084               	movwf	4
  2856  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  2857  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  2858  00E1  083E               	movf	??_SW_UpdateState,w
  2859  00E2  1383               	bcf	3,7	;select IRP bank0
  2860  00E3  0080               	movwf	0
  2861  00E4  2946               	goto	l114
  2862  00E5                     l1961:	
  2863                           
  2864                           ;SW.c: 147:             if(SW_DATA[sw].samples[0] == (1) && SW_DATA[sw].samples[1] == (1
      +                          ))
  2865  00E5  3003               	movlw	3
  2866  00E6  00BE               	movwf	??_SW_UpdateState
  2867  00E7  083E               	movf	??_SW_UpdateState,w
  2868  00E8  00BA               	movwf	___bmul@multiplicand
  2869  00E9  0841               	movf	SW_UpdateState@sw,w
  2870  00EA  120A  118A  26EA  120A  118A  	fcall	___bmul
  2871  00EF  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  2872  00F0  0084               	movwf	4
  2873  00F1  1383               	bcf	3,7	;select IRP bank0
  2874  00F2  0300               	decf	0,w
  2875  00F3  1D03               	btfss	3,2
  2876  00F4  28F6               	goto	u801
  2877  00F5  28F7               	goto	u800
  2878  00F6                     u801:	
  2879  00F6  2946               	goto	l114
  2880  00F7                     u800:	
  2881  00F7                     l1963:	
  2882  00F7  3003               	movlw	3
  2883  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  2884  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  2885  00FA  00BE               	movwf	??_SW_UpdateState
  2886  00FB  083E               	movf	??_SW_UpdateState,w
  2887  00FC  00BA               	movwf	___bmul@multiplicand
  2888  00FD  0841               	movf	SW_UpdateState@sw,w
  2889  00FE  120A  118A  26EA  120A  118A  	fcall	___bmul
  2890  0103  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  2891  0104  0084               	movwf	4
  2892  0105  1383               	bcf	3,7	;select IRP bank0
  2893  0106  0300               	decf	0,w
  2894  0107  1D03               	btfss	3,2
  2895  0108  290A               	goto	u811
  2896  0109  290B               	goto	u810
  2897  010A                     u811:	
  2898  010A  2946               	goto	l114
  2899  010B                     u810:	
  2900  010B                     l1965:	
  2901                           
  2902                           ;SW.c: 148:                 SW_DATA[sw].state = SW_PRE_RELEASED;
  2903  010B  3003               	movlw	3
  2904  010C  1283               	bcf	3,5	;RP0=0, select bank0
  2905  010D  1303               	bcf	3,6	;RP1=0, select bank0
  2906  010E  00BE               	movwf	??_SW_UpdateState
  2907  010F  3003               	movlw	3
  2908  0110  00BF               	movwf	??_SW_UpdateState+1
  2909  0111  083F               	movf	??_SW_UpdateState+1,w
  2910  0112  00BA               	movwf	___bmul@multiplicand
  2911  0113  0841               	movf	SW_UpdateState@sw,w
  2912  0114  120A  118A  26EA  120A  118A  	fcall	___bmul
  2913  0119  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2914  011A  0084               	movwf	4
  2915  011B  1283               	bcf	3,5	;RP0=0, select bank0
  2916  011C  1303               	bcf	3,6	;RP1=0, select bank0
  2917  011D  083E               	movf	??_SW_UpdateState,w
  2918  011E  1383               	bcf	3,7	;select IRP bank0
  2919  011F  0080               	movwf	0
  2920  0120  2946               	goto	l114
  2921  0121                     l1969:	
  2922  0121  3003               	movlw	3
  2923  0122  00BE               	movwf	??_SW_UpdateState
  2924  0123  083E               	movf	??_SW_UpdateState,w
  2925  0124  00BA               	movwf	___bmul@multiplicand
  2926  0125  0841               	movf	SW_UpdateState@sw,w
  2927  0126  120A  118A  26EA  120A  118A  	fcall	___bmul
  2928  012B  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2929  012C  0084               	movwf	4
  2930  012D  1383               	bcf	3,7	;select IRP bank0
  2931  012E  0800               	movf	0,w
  2932  012F  1283               	bcf	3,5	;RP0=0, select bank0
  2933  0130  1303               	bcf	3,6	;RP1=0, select bank0
  2934  0131  00BF               	movwf	??_SW_UpdateState+1
  2935  0132  01C0               	clrf	??_SW_UpdateState+2
  2936                           
  2937                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2938                           ; Switch size 1, requested type "simple"
  2939                           ; Number of cases is 1, Range of values is 0 to 0
  2940                           ; switch strategies available:
  2941                           ; Name         Instructions Cycles
  2942                           ; simple_byte            4     3 (average)
  2943                           ; direct_byte           11     8 (fixed)
  2944                           ; jumptable            260     6 (fixed)
  2945                           ;	Chosen strategy is simple_byte
  2946  0133  0840               	movf	??_SW_UpdateState+2,w
  2947  0134  3A00               	xorlw	0	; case 0
  2948  0135  1903               	skipnz
  2949  0136  2938               	goto	l2647
  2950  0137  2946               	goto	l114
  2951  0138                     l2647:	
  2952                           
  2953                           ; Switch size 1, requested type "simple"
  2954                           ; Number of cases is 4, Range of values is 0 to 3
  2955                           ; switch strategies available:
  2956                           ; Name         Instructions Cycles
  2957                           ; simple_byte           13     7 (average)
  2958                           ; direct_byte           20     8 (fixed)
  2959                           ; jumptable            260     6 (fixed)
  2960                           ;	Chosen strategy is simple_byte
  2961  0138  083F               	movf	??_SW_UpdateState+1,w
  2962  0139  3A00               	xorlw	0	; case 0
  2963  013A  1903               	skipnz
  2964  013B  2871               	goto	l1949
  2965  013C  3A01               	xorlw	1	; case 1
  2966  013D  1903               	skipnz
  2967  013E  28A9               	goto	l1955
  2968  013F  3A03               	xorlw	3	; case 2
  2969  0140  1903               	skipnz
  2970  0141  28E5               	goto	l1961
  2971  0142  3A01               	xorlw	1	; case 3
  2972  0143  1903               	skipnz
  2973  0144  283A               	goto	l1943
  2974  0145  2946               	goto	l114
  2975  0146                     l114:	
  2976  0146  0008               	return
  2977  0147                     __end_of_SW_UpdateState:	
  2978                           
  2979                           	psect	text14
  2980  06EA                     __ptext14:	
  2981 ;; *************** function ___bmul *****************
  2982 ;; Defined at:
  2983 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  multiplier      1    wreg     unsigned char 
  2986 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2989 ;;  product         1    2[BANK0 ] unsigned char 
  2990 ;; Return value:  Size  Location     Type
  2991 ;;                  1    wreg      unsigned char 
  2992 ;; Registers used:
  2993 ;;		wreg, status,2, status,0
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2999 ;;      Params:         0       1       0       0       0
  3000 ;;      Locals:         0       2       0       0       0
  3001 ;;      Temps:          0       1       0       0       0
  3002 ;;      Totals:         0       4       0       0       0
  3003 ;;Total ram usage:        4 bytes
  3004 ;; Hardware stack levels used:    1
  3005 ;; Hardware stack levels required when called:    4
  3006 ;; This function calls:
  3007 ;;		Nothing
  3008 ;; This function is called by:
  3009 ;;		_SW_GetState
  3010 ;;		_SW_UpdateState
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           
  3015                           ;psect for function ___bmul
  3016  06EA                     ___bmul:	
  3017                           
  3018                           ;incstack = 0
  3019                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3020                           ;___bmul@multiplier stored from wreg
  3021  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  3022  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  3023  06EC  00BD               	movwf	___bmul@multiplier
  3024  06ED                     l1845:	
  3025  06ED  01BC               	clrf	___bmul@product
  3026  06EE                     l1847:	
  3027  06EE  1C3D               	btfss	___bmul@multiplier,0
  3028  06EF  2EF1               	goto	u541
  3029  06F0  2EF2               	goto	u540
  3030  06F1                     u541:	
  3031  06F1  2EF6               	goto	l1851
  3032  06F2                     u540:	
  3033  06F2                     l1849:	
  3034  06F2  083A               	movf	___bmul@multiplicand,w
  3035  06F3  00BB               	movwf	??___bmul
  3036  06F4  083B               	movf	??___bmul,w
  3037  06F5  07BC               	addwf	___bmul@product,f
  3038  06F6                     l1851:	
  3039  06F6  1003               	clrc
  3040  06F7  0DBA               	rlf	___bmul@multiplicand,f
  3041  06F8                     l1853:	
  3042  06F8  1003               	clrc
  3043  06F9  0CBD               	rrf	___bmul@multiplier,f
  3044  06FA  083D               	movf	___bmul@multiplier,w
  3045  06FB  1D03               	btfss	3,2
  3046  06FC  2EFE               	goto	u551
  3047  06FD  2EFF               	goto	u550
  3048  06FE                     u551:	
  3049  06FE  2EEE               	goto	l1847
  3050  06FF                     u550:	
  3051  06FF                     l1855:	
  3052  06FF  083C               	movf	___bmul@product,w
  3053  0700                     l521:	
  3054  0700  0008               	return
  3055  0701                     __end_of___bmul:	
  3056                           
  3057                           	psect	text15
  3058  04C9                     __ptext15:	
  3059 ;; *************** function _SW_Init *****************
  3060 ;; Defined at:
  3061 ;;		line 54 in file "SW.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;		None
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;		None
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      void 
  3068 ;; Registers used:
  3069 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3075 ;;      Params:         0       0       0       0       0
  3076 ;;      Locals:         0       0       0       0       0
  3077 ;;      Temps:          0       1       0       0       0
  3078 ;;      Totals:         0       1       0       0       0
  3079 ;;Total ram usage:        1 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    5
  3082 ;; This function calls:
  3083 ;;		_GPIO_Init_Pin
  3084 ;; This function is called by:
  3085 ;;		_main
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           
  3090                           ;psect for function _SW_Init
  3091  04C9                     _SW_Init:	
  3092  04C9                     l2185:	
  3093                           ;incstack = 0
  3094                           ; Regs used in _SW_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3095                           
  3096                           
  3097                           ;SW.c: 58:     GPIO_Init_Pin(&(TRISB),(0),(1));
  3098  04C9  3086               	movlw	134
  3099  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  3100  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  3101  04CC  00BA               	movwf	GPIO_Init_Pin@DirRegAddress
  3102  04CD  3000               	movlw	0
  3103  04CE  00BB               	movwf	GPIO_Init_Pin@DirRegAddress+1
  3104  04CF  01BC               	clrf	GPIO_Init_Pin@pin_number
  3105  04D0  01BD               	clrf	GPIO_Init_Pin@dir
  3106  04D1  0ABD               	incf	GPIO_Init_Pin@dir,f
  3107  04D2  120A  118A  22F3  120A  118A  	fcall	_GPIO_Init_Pin
  3108  04D7                     l2187:	
  3109                           
  3110                           ;SW.c: 59:     SW_DATA[SW_PLUS].state = SW_RELEASED;
  3111  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  3112  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  3113  04D9  01A2               	clrf	_SW_DATA+2
  3114  04DA                     l2189:	
  3115                           
  3116                           ;SW.c: 60:     SW_DATA[SW_PLUS].samples[0] = (1);
  3117  04DA  01A0               	clrf	_SW_DATA
  3118  04DB  0AA0               	incf	_SW_DATA,f
  3119  04DC                     l2191:	
  3120                           
  3121                           ;SW.c: 61:     SW_DATA[SW_PLUS].samples[1] = (1);
  3122  04DC  01A1               	clrf	_SW_DATA+1
  3123  04DD  0AA1               	incf	_SW_DATA+1,f
  3124  04DE                     l2193:	
  3125                           
  3126                           ;SW.c: 63:     GPIO_Init_Pin(&(TRISB),(1),(1));
  3127  04DE  3086               	movlw	134
  3128  04DF  00BA               	movwf	GPIO_Init_Pin@DirRegAddress
  3129  04E0  3000               	movlw	0
  3130  04E1  00BB               	movwf	GPIO_Init_Pin@DirRegAddress+1
  3131  04E2  01BC               	clrf	GPIO_Init_Pin@pin_number
  3132  04E3  0ABC               	incf	GPIO_Init_Pin@pin_number,f
  3133  04E4  01BD               	clrf	GPIO_Init_Pin@dir
  3134  04E5  0ABD               	incf	GPIO_Init_Pin@dir,f
  3135  04E6  120A  118A  22F3  120A  118A  	fcall	_GPIO_Init_Pin
  3136                           
  3137                           ;SW.c: 64:     SW_DATA[SW_MINUS].state = SW_RELEASED;
  3138  04EB  1283               	bcf	3,5	;RP0=0, select bank0
  3139  04EC  1303               	bcf	3,6	;RP1=0, select bank0
  3140  04ED  01A5               	clrf	_SW_DATA+5
  3141  04EE                     l2195:	
  3142                           
  3143                           ;SW.c: 65:     SW_DATA[SW_MINUS].samples[0] = (1);
  3144  04EE  01A3               	clrf	_SW_DATA+3
  3145  04EF  0AA3               	incf	_SW_DATA+3,f
  3146  04F0                     l2197:	
  3147                           
  3148                           ;SW.c: 66:     SW_DATA[SW_MINUS].samples[1] = (1);
  3149  04F0  01A4               	clrf	_SW_DATA+4
  3150  04F1  0AA4               	incf	_SW_DATA+4,f
  3151  04F2                     l2199:	
  3152                           
  3153                           ;SW.c: 68:     GPIO_Init_Pin(&(TRISB),(2),(1));
  3154  04F2  3086               	movlw	134
  3155  04F3  00BA               	movwf	GPIO_Init_Pin@DirRegAddress
  3156  04F4  3000               	movlw	0
  3157  04F5  00BB               	movwf	GPIO_Init_Pin@DirRegAddress+1
  3158  04F6  3002               	movlw	2
  3159  04F7  00C2               	movwf	??_SW_Init
  3160  04F8  0842               	movf	??_SW_Init,w
  3161  04F9  00BC               	movwf	GPIO_Init_Pin@pin_number
  3162  04FA  01BD               	clrf	GPIO_Init_Pin@dir
  3163  04FB  0ABD               	incf	GPIO_Init_Pin@dir,f
  3164  04FC  120A  118A  22F3  120A  118A  	fcall	_GPIO_Init_Pin
  3165  0501                     l2201:	
  3166                           
  3167                           ;SW.c: 69:     SW_DATA[SW_PRESSURE].state = SW_RELEASED;
  3168  0501  1283               	bcf	3,5	;RP0=0, select bank0
  3169  0502  1303               	bcf	3,6	;RP1=0, select bank0
  3170  0503  01A8               	clrf	_SW_DATA+8
  3171  0504                     l2203:	
  3172                           
  3173                           ;SW.c: 70:     SW_DATA[SW_PRESSURE].samples[0] = (1);
  3174  0504  01A6               	clrf	_SW_DATA+6
  3175  0505  0AA6               	incf	_SW_DATA+6,f
  3176  0506                     l2205:	
  3177                           
  3178                           ;SW.c: 71:     SW_DATA[SW_PRESSURE].samples[1] = (1);
  3179  0506  01A7               	clrf	_SW_DATA+7
  3180  0507  0AA7               	incf	_SW_DATA+7,f
  3181  0508                     l91:	
  3182  0508  0008               	return
  3183  0509                     __end_of_SW_Init:	
  3184                           
  3185                           	psect	text16
  3186  0540                     __ptext16:	
  3187 ;; *************** function _SSD_Update *****************
  3188 ;; Defined at:
  3189 ;;		line 84 in file "SSD.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;		None
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;		None
  3194 ;; Return value:  Size  Location     Type
  3195 ;;                  1    wreg      void 
  3196 ;; Registers used:
  3197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3198 ;; Tracked objects:
  3199 ;;		On entry : 0/0
  3200 ;;		On exit  : 0/0
  3201 ;;		Unchanged: 0/0
  3202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3203 ;;      Params:         0       0       0       0       0
  3204 ;;      Locals:         0       0       0       0       0
  3205 ;;      Temps:          0       1       0       0       0
  3206 ;;      Totals:         0       1       0       0       0
  3207 ;;Total ram usage:        1 bytes
  3208 ;; Hardware stack levels used:    1
  3209 ;; Hardware stack levels required when called:    5
  3210 ;; This function calls:
  3211 ;;		_SSD_Data_write
  3212 ;;		_SSD_Disable
  3213 ;;		_SSD_Enable
  3214 ;; This function is called by:
  3215 ;;		_main
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           
  3220                           ;psect for function _SSD_Update
  3221  0540                     _SSD_Update:	
  3222  0540                     l2207:	
  3223                           ;incstack = 0
  3224                           ; Regs used in _SSD_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3225                           
  3226                           
  3227                           ;SSD.c: 89:     static uint8 SSD_Time_Counter = 0;;SSD.c: 90:     SSD_Time_Counter += (1
      +                          0);
  3228  0540  300A               	movlw	10
  3229  0541  1283               	bcf	3,5	;RP0=0, select bank0
  3230  0542  1303               	bcf	3,6	;RP1=0, select bank0
  3231  0543  00BD               	movwf	??_SSD_Update
  3232  0544  083D               	movf	??_SSD_Update,w
  3233  0545  07FC               	addwf	SSD_Update@SSD_Time_Counter,f
  3234                           
  3235                           ;SSD.c: 92:     if(SSD_Time_Counter != (10))
  3236  0546  300A               	movlw	10
  3237  0547  067C               	xorwf	SSD_Update@SSD_Time_Counter,w
  3238  0548  1903               	btfsc	3,2
  3239  0549  2D4B               	goto	u911
  3240  054A  2D4C               	goto	u910
  3241  054B                     u911:	
  3242  054B  2D4D               	goto	l2211
  3243  054C                     u910:	
  3244  054C  2D6C               	goto	l195
  3245  054D                     l2211:	
  3246                           
  3247                           ;SSD.c: 96:     SSD_Time_Counter = 0;
  3248  054D  01FC               	clrf	SSD_Update@SSD_Time_Counter
  3249  054E                     l2213:	
  3250                           
  3251                           ;SSD.c: 99:     SSD_Disable(currentSSD);
  3252  054E  087D               	movf	_currentSSD,w
  3253  054F  120A  118A  25DE  120A  118A  	fcall	_SSD_Disable
  3254  0554                     l2215:	
  3255                           
  3256                           ;SSD.c: 101:     currentSSD++;
  3257  0554  3001               	movlw	1
  3258  0555  1283               	bcf	3,5	;RP0=0, select bank0
  3259  0556  1303               	bcf	3,6	;RP1=0, select bank0
  3260  0557  00BD               	movwf	??_SSD_Update
  3261  0558  083D               	movf	??_SSD_Update,w
  3262  0559  07FD               	addwf	_currentSSD,f
  3263  055A                     l2217:	
  3264                           
  3265                           ;SSD.c: 102:     if(currentSSD > SSD_THIRD)currentSSD = 0;
  3266  055A  3003               	movlw	3
  3267  055B  027D               	subwf	_currentSSD,w
  3268  055C  1C03               	skipc
  3269  055D  2D5F               	goto	u921
  3270  055E  2D60               	goto	u920
  3271  055F                     u921:	
  3272  055F  2D61               	goto	l2221
  3273  0560                     u920:	
  3274  0560                     l2219:	
  3275  0560  01FD               	clrf	_currentSSD
  3276  0561                     l2221:	
  3277                           
  3278                           ;SSD.c: 104:     SSD_Data_write();
  3279  0561  120A  118A  2731  120A  118A  	fcall	_SSD_Data_write
  3280  0566                     l2223:	
  3281                           
  3282                           ;SSD.c: 106:     SSD_Enable(currentSSD);
  3283  0566  087D               	movf	_currentSSD,w
  3284  0567  120A  118A  256D  120A  118A  	fcall	_SSD_Enable
  3285  056C                     l195:	
  3286  056C  0008               	return
  3287  056D                     __end_of_SSD_Update:	
  3288                           
  3289                           	psect	text17
  3290  056D                     __ptext17:	
  3291 ;; *************** function _SSD_Enable *****************
  3292 ;; Defined at:
  3293 ;;		line 127 in file "SSD.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;  s               1    wreg     enum E865
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  s               1    2[BANK0 ] enum E865
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3307 ;;      Params:         0       0       0       0       0
  3308 ;;      Locals:         0       1       0       0       0
  3309 ;;      Temps:          0       2       0       0       0
  3310 ;;      Totals:         0       3       0       0       0
  3311 ;;Total ram usage:        3 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    4
  3314 ;; This function calls:
  3315 ;;		Nothing
  3316 ;; This function is called by:
  3317 ;;		_SSD_Update
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           
  3322                           ;psect for function _SSD_Enable
  3323  056D                     _SSD_Enable:	
  3324                           
  3325                           ;incstack = 0
  3326                           ; Regs used in _SSD_Enable: [wreg-fsr0h+status,2+status,0]
  3327                           ;SSD_Enable@s stored from wreg
  3328  056D  1283               	bcf	3,5	;RP0=0, select bank0
  3329  056E  1303               	bcf	3,6	;RP1=0, select bank0
  3330  056F  00BC               	movwf	SSD_Enable@s
  3331  0570                     l2043:	
  3332                           
  3333                           ;SSD.c: 127: void SSD_Enable(SSD_t s);SSD.c: 128: {;SSD.c: 129:     switch(s)
  3334  0570  2D80               	goto	l2051
  3335  0571                     l2045:	
  3336                           
  3337                           ;SSD.c: 132:             (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_ON<<(7)));
  3338  0571  0806               	movf	6,w	;volatile
  3339  0572  397F               	andlw	127
  3340  0573  3880               	iorlw	128
  3341  0574  0086               	movwf	6	;volatile
  3342                           
  3343                           ;SSD.c: 133:             break;
  3344  0575  2D93               	goto	l214
  3345  0576                     l2047:	
  3346                           
  3347                           ;SSD.c: 135:             (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_ON<<(6)));
  3348  0576  0806               	movf	6,w	;volatile
  3349  0577  39BF               	andlw	191
  3350  0578  3840               	iorlw	64
  3351  0579  0086               	movwf	6	;volatile
  3352                           
  3353                           ;SSD.c: 136:             break;
  3354  057A  2D93               	goto	l214
  3355  057B                     l2049:	
  3356                           
  3357                           ;SSD.c: 138:             (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_ON<<(5)));
  3358  057B  0806               	movf	6,w	;volatile
  3359  057C  39DF               	andlw	223
  3360  057D  3820               	iorlw	32
  3361  057E  0086               	movwf	6	;volatile
  3362                           
  3363                           ;SSD.c: 139:             break;
  3364  057F  2D93               	goto	l214
  3365  0580                     l2051:	
  3366  0580  083C               	movf	SSD_Enable@s,w
  3367  0581  00BA               	movwf	??_SSD_Enable
  3368  0582  01BB               	clrf	??_SSD_Enable+1
  3369                           
  3370                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3371                           ; Switch size 1, requested type "simple"
  3372                           ; Number of cases is 1, Range of values is 0 to 0
  3373                           ; switch strategies available:
  3374                           ; Name         Instructions Cycles
  3375                           ; simple_byte            4     3 (average)
  3376                           ; direct_byte           11     8 (fixed)
  3377                           ; jumptable            260     6 (fixed)
  3378                           ;	Chosen strategy is simple_byte
  3379  0583  083B               	movf	??_SSD_Enable+1,w
  3380  0584  3A00               	xorlw	0	; case 0
  3381  0585  1903               	skipnz
  3382  0586  2D88               	goto	l2649
  3383  0587  2D93               	goto	l214
  3384  0588                     l2649:	
  3385                           
  3386                           ; Switch size 1, requested type "simple"
  3387                           ; Number of cases is 3, Range of values is 0 to 2
  3388                           ; switch strategies available:
  3389                           ; Name         Instructions Cycles
  3390                           ; simple_byte           10     6 (average)
  3391                           ; direct_byte           17     8 (fixed)
  3392                           ; jumptable            260     6 (fixed)
  3393                           ;	Chosen strategy is simple_byte
  3394  0588  083A               	movf	??_SSD_Enable,w
  3395  0589  3A00               	xorlw	0	; case 0
  3396  058A  1903               	skipnz
  3397  058B  2D71               	goto	l2045
  3398  058C  3A01               	xorlw	1	; case 1
  3399  058D  1903               	skipnz
  3400  058E  2D76               	goto	l2047
  3401  058F  3A03               	xorlw	3	; case 2
  3402  0590  1903               	skipnz
  3403  0591  2D7B               	goto	l2049
  3404  0592  2D93               	goto	l214
  3405  0593                     l214:	
  3406  0593  0008               	return
  3407  0594                     __end_of_SSD_Enable:	
  3408                           
  3409                           	psect	text18
  3410  05DE                     __ptext18:	
  3411 ;; *************** function _SSD_Disable *****************
  3412 ;; Defined at:
  3413 ;;		line 109 in file "SSD.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;  s               1    wreg     enum E865
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  s               1    2[BANK0 ] enum E865
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  1    wreg      void 
  3420 ;; Registers used:
  3421 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3427 ;;      Params:         0       0       0       0       0
  3428 ;;      Locals:         0       1       0       0       0
  3429 ;;      Temps:          0       2       0       0       0
  3430 ;;      Totals:         0       3       0       0       0
  3431 ;;Total ram usage:        3 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    4
  3434 ;; This function calls:
  3435 ;;		Nothing
  3436 ;; This function is called by:
  3437 ;;		_SSD_Update
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           
  3442                           ;psect for function _SSD_Disable
  3443  05DE                     _SSD_Disable:	
  3444                           
  3445                           ;incstack = 0
  3446                           ; Regs used in _SSD_Disable: [wreg-fsr0h+status,2+status,0]
  3447                           ;SSD_Disable@s stored from wreg
  3448  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  3449  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  3450  05E0  00BC               	movwf	SSD_Disable@s
  3451  05E1                     l2025:	
  3452                           
  3453                           ;SSD.c: 109: void SSD_Disable(SSD_t s);SSD.c: 110: {;SSD.c: 111:     switch(s)
  3454  05E1  2DEE               	goto	l2033
  3455  05E2                     l2027:	
  3456                           
  3457                           ;SSD.c: 114:             (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_OFF<<(7)));
  3458  05E2  0806               	movf	6,w	;volatile
  3459  05E3  397F               	andlw	127
  3460  05E4  0086               	movwf	6	;volatile
  3461                           
  3462                           ;SSD.c: 115:             break;
  3463  05E5  2E01               	goto	l205
  3464  05E6                     l2029:	
  3465                           
  3466                           ;SSD.c: 117:             (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_OFF<<(6)));
  3467  05E6  0806               	movf	6,w	;volatile
  3468  05E7  39BF               	andlw	191
  3469  05E8  0086               	movwf	6	;volatile
  3470                           
  3471                           ;SSD.c: 118:             break;
  3472  05E9  2E01               	goto	l205
  3473  05EA                     l2031:	
  3474                           
  3475                           ;SSD.c: 120:             (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_OFF<<(5)));
  3476  05EA  0806               	movf	6,w	;volatile
  3477  05EB  39DF               	andlw	223
  3478  05EC  0086               	movwf	6	;volatile
  3479                           
  3480                           ;SSD.c: 121:             break;
  3481  05ED  2E01               	goto	l205
  3482  05EE                     l2033:	
  3483  05EE  083C               	movf	SSD_Disable@s,w
  3484  05EF  00BA               	movwf	??_SSD_Disable
  3485  05F0  01BB               	clrf	??_SSD_Disable+1
  3486                           
  3487                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3488                           ; Switch size 1, requested type "simple"
  3489                           ; Number of cases is 1, Range of values is 0 to 0
  3490                           ; switch strategies available:
  3491                           ; Name         Instructions Cycles
  3492                           ; simple_byte            4     3 (average)
  3493                           ; direct_byte           11     8 (fixed)
  3494                           ; jumptable            260     6 (fixed)
  3495                           ;	Chosen strategy is simple_byte
  3496  05F1  083B               	movf	??_SSD_Disable+1,w
  3497  05F2  3A00               	xorlw	0	; case 0
  3498  05F3  1903               	skipnz
  3499  05F4  2DF6               	goto	l2651
  3500  05F5  2E01               	goto	l205
  3501  05F6                     l2651:	
  3502                           
  3503                           ; Switch size 1, requested type "simple"
  3504                           ; Number of cases is 3, Range of values is 0 to 2
  3505                           ; switch strategies available:
  3506                           ; Name         Instructions Cycles
  3507                           ; simple_byte           10     6 (average)
  3508                           ; direct_byte           17     8 (fixed)
  3509                           ; jumptable            260     6 (fixed)
  3510                           ;	Chosen strategy is simple_byte
  3511  05F6  083A               	movf	??_SSD_Disable,w
  3512  05F7  3A00               	xorlw	0	; case 0
  3513  05F8  1903               	skipnz
  3514  05F9  2DE2               	goto	l2027
  3515  05FA  3A01               	xorlw	1	; case 1
  3516  05FB  1903               	skipnz
  3517  05FC  2DE6               	goto	l2029
  3518  05FD  3A03               	xorlw	3	; case 2
  3519  05FE  1903               	skipnz
  3520  05FF  2DEA               	goto	l2031
  3521  0600  2E01               	goto	l205
  3522  0601                     l205:	
  3523  0601  0008               	return
  3524  0602                     __end_of_SSD_Disable:	
  3525                           
  3526                           	psect	text19
  3527  0731                     __ptext19:	
  3528 ;; *************** function _SSD_Data_write *****************
  3529 ;; Defined at:
  3530 ;;		line 147 in file "SSD.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;		None
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;		None
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      void 
  3537 ;; Registers used:
  3538 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3544 ;;      Params:         0       0       0       0       0
  3545 ;;      Locals:         0       0       0       0       0
  3546 ;;      Temps:          0       0       0       0       0
  3547 ;;      Totals:         0       0       0       0       0
  3548 ;;Total ram usage:        0 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    4
  3551 ;; This function calls:
  3552 ;;		Nothing
  3553 ;; This function is called by:
  3554 ;;		_SSD_Update
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           
  3559                           ;psect for function _SSD_Data_write
  3560  0731                     _SSD_Data_write:	
  3561  0731                     l2041:	
  3562                           ;incstack = 0
  3563                           ; Regs used in _SSD_Data_write: [wreg-fsr0h+status,2+status,0]
  3564                           
  3565                           
  3566                           ;SSD.c: 150:     (((PORTD))=(SSD_LOT_ARR[Buffer[currentSSD]]));
  3567  0731  087D               	movf	_currentSSD,w
  3568  0732  3E29               	addlw	(low (_Buffer| 0))& (0+255)
  3569  0733  0084               	movwf	4
  3570  0734  1383               	bcf	3,7	;select IRP bank0
  3571  0735  0800               	movf	0,w
  3572  0736  3E4A               	addlw	(low (_SSD_LOT_ARR| 0))& (0+255)
  3573  0737  0084               	movwf	4
  3574  0738  0800               	movf	0,w
  3575  0739  1283               	bcf	3,5	;RP0=0, select bank0
  3576  073A  1303               	bcf	3,6	;RP1=0, select bank0
  3577  073B  0088               	movwf	8	;volatile
  3578  073C                     l217:	
  3579  073C  0008               	return
  3580  073D                     __end_of_SSD_Data_write:	
  3581                           
  3582                           	psect	text20
  3583  042B                     __ptext20:	
  3584 ;; *************** function _Mo_Update *****************
  3585 ;; Defined at:
  3586 ;;		line 69 in file "Motor.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3600 ;;      Params:         0       0       0       0       0
  3601 ;;      Locals:         0       0       0       0       0
  3602 ;;      Temps:          0       2       0       0       0
  3603 ;;      Totals:         0       2       0       0       0
  3604 ;;Total ram usage:        2 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    4
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           
  3615                           ;psect for function _Mo_Update
  3616  042B                     _Mo_Update:	
  3617  042B                     l2277:	
  3618                           ;incstack = 0
  3619                           ; Regs used in _Mo_Update: [wreg-fsr0h+status,2+status,0]
  3620                           
  3621                           
  3622                           ;Motor.c: 72:     static uint8 motor_tick_counter = 0;;Motor.c: 74:     motor_tick_count
      +                          er += (10);
  3623  042B  300A               	movlw	10
  3624  042C  1283               	bcf	3,5	;RP0=0, select bank0
  3625  042D  1303               	bcf	3,6	;RP1=0, select bank0
  3626  042E  00BA               	movwf	??_Mo_Update
  3627  042F  083A               	movf	??_Mo_Update,w
  3628  0430  07B1               	addwf	Mo_Update@motor_tick_counter,f
  3629                           
  3630                           ;Motor.c: 76:     if(motor_tick_counter != (20)) return;
  3631  0431  3014               	movlw	20
  3632  0432  0631               	xorwf	Mo_Update@motor_tick_counter,w
  3633  0433  1903               	btfsc	3,2
  3634  0434  2C36               	goto	u971
  3635  0435  2C37               	goto	u970
  3636  0436                     u971:	
  3637  0436  2C38               	goto	l2281
  3638  0437                     u970:	
  3639  0437  2C7D               	goto	l317
  3640  0438                     l2281:	
  3641                           
  3642                           ;Motor.c: 78:     motor_tick_counter = 0;
  3643  0438  01B1               	clrf	Mo_Update@motor_tick_counter
  3644                           
  3645                           ;Motor.c: 80:     switch(motor_state)
  3646  0439  2C6D               	goto	l2307
  3647  043A                     l2283:	
  3648                           
  3649                           ;Motor.c: 86:             if(actual_angle > target_angle)
  3650  043A  0833               	movf	_actual_angle,w
  3651  043B  0234               	subwf	_target_angle,w
  3652  043C  1803               	skipnc
  3653  043D  2C3F               	goto	u981
  3654  043E  2C40               	goto	u980
  3655  043F                     u981:	
  3656  043F  2C43               	goto	l2287
  3657  0440                     u980:	
  3658  0440                     l2285:	
  3659                           
  3660                           ;Motor.c: 87:             {;Motor.c: 90:                 actual_angle -= (10);
  3661  0440  300A               	movlw	10
  3662  0441  02B3               	subwf	_actual_angle,f
  3663                           
  3664                           ;Motor.c: 91:             }
  3665  0442  2C7D               	goto	l317
  3666  0443                     l2287:	
  3667                           
  3668                           ;Motor.c: 93:             {;Motor.c: 96:                 actual_angle += (10);
  3669  0443  300A               	movlw	10
  3670  0444  00BA               	movwf	??_Mo_Update
  3671  0445  083A               	movf	??_Mo_Update,w
  3672  0446  07B3               	addwf	_actual_angle,f
  3673  0447  2C7D               	goto	l317
  3674  0448                     l2289:	
  3675                           
  3676                           ;Motor.c: 103:             if(actual_angle == target_angle){
  3677  0448  0833               	movf	_actual_angle,w
  3678  0449  0634               	xorwf	_target_angle,w
  3679  044A  1D03               	skipz
  3680  044B  2C4D               	goto	u991
  3681  044C  2C4E               	goto	u990
  3682  044D                     u991:	
  3683  044D  2C54               	goto	l2295
  3684  044E                     u990:	
  3685  044E                     l2291:	
  3686                           
  3687                           ;Motor.c: 108:                 actual_angle += 5;
  3688  044E  3005               	movlw	5
  3689  044F  00BA               	movwf	??_Mo_Update
  3690  0450  083A               	movf	??_Mo_Update,w
  3691  0451  07B3               	addwf	_actual_angle,f
  3692  0452                     l2293:	
  3693                           
  3694                           ;Motor.c: 109:                 motor_state = MO_NORMAL;
  3695  0452  01B2               	clrf	_motor_state
  3696                           
  3697                           ;Motor.c: 110:             }
  3698  0453  2C7D               	goto	l317
  3699  0454                     l2295:	
  3700                           
  3701                           ;Motor.c: 112:             {;Motor.c: 115:                 soft_switching_counter += (20
      +                          );
  3702  0454  3014               	movlw	20
  3703  0455  00BA               	movwf	??_Mo_Update
  3704  0456  083A               	movf	??_Mo_Update,w
  3705  0457  07B5               	addwf	_soft_switching_counter,f
  3706                           
  3707                           ;Motor.c: 117:                 if(soft_switching_counter == (40))
  3708  0458  3028               	movlw	40
  3709  0459  0635               	xorwf	_soft_switching_counter,w
  3710  045A  1D03               	btfss	3,2
  3711  045B  2C5D               	goto	u1001
  3712  045C  2C5E               	goto	u1000
  3713  045D                     u1001:	
  3714  045D  2C7D               	goto	l317
  3715  045E                     u1000:	
  3716  045E                     l2297:	
  3717                           
  3718                           ;Motor.c: 118:                 {;Motor.c: 124:                     if(target_angle > act
      +                          ual_angle)
  3719  045E  0834               	movf	_target_angle,w
  3720  045F  0233               	subwf	_actual_angle,w
  3721  0460  1803               	skipnc
  3722  0461  2C63               	goto	u1011
  3723  0462  2C64               	goto	u1010
  3724  0463                     u1011:	
  3725  0463  2C69               	goto	l2301
  3726  0464                     u1010:	
  3727  0464                     l2299:	
  3728                           
  3729                           ;Motor.c: 125:                     {;Motor.c: 127:                         actual_angle+
      +                          +;
  3730  0464  3001               	movlw	1
  3731  0465  00BA               	movwf	??_Mo_Update
  3732  0466  083A               	movf	??_Mo_Update,w
  3733  0467  07B3               	addwf	_actual_angle,f
  3734                           
  3735                           ;Motor.c: 128:                     }
  3736  0468  2C6B               	goto	l2303
  3737  0469                     l2301:	
  3738                           
  3739                           ;Motor.c: 130:                     {;Motor.c: 132:                         actual_angle-
      +                          -;
  3740  0469  3001               	movlw	1
  3741  046A  02B3               	subwf	_actual_angle,f
  3742  046B                     l2303:	
  3743                           
  3744                           ;Motor.c: 135:                     soft_switching_counter = 0;
  3745  046B  01B5               	clrf	_soft_switching_counter
  3746  046C  2C7D               	goto	l317
  3747  046D                     l2307:	
  3748  046D  0832               	movf	_motor_state,w
  3749  046E  00BA               	movwf	??_Mo_Update
  3750  046F  01BB               	clrf	??_Mo_Update+1
  3751                           
  3752                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3753                           ; Switch size 1, requested type "simple"
  3754                           ; Number of cases is 1, Range of values is 0 to 0
  3755                           ; switch strategies available:
  3756                           ; Name         Instructions Cycles
  3757                           ; simple_byte            4     3 (average)
  3758                           ; direct_byte           11     8 (fixed)
  3759                           ; jumptable            260     6 (fixed)
  3760                           ;	Chosen strategy is simple_byte
  3761  0470  083B               	movf	??_Mo_Update+1,w
  3762  0471  3A00               	xorlw	0	; case 0
  3763  0472  1903               	skipnz
  3764  0473  2C75               	goto	l2653
  3765  0474  2C7D               	goto	l317
  3766  0475                     l2653:	
  3767                           
  3768                           ; Switch size 1, requested type "simple"
  3769                           ; Number of cases is 2, Range of values is 0 to 1
  3770                           ; switch strategies available:
  3771                           ; Name         Instructions Cycles
  3772                           ; simple_byte            7     4 (average)
  3773                           ; direct_byte           14     8 (fixed)
  3774                           ; jumptable            260     6 (fixed)
  3775                           ;	Chosen strategy is simple_byte
  3776  0475  083A               	movf	??_Mo_Update,w
  3777  0476  3A00               	xorlw	0	; case 0
  3778  0477  1903               	skipnz
  3779  0478  2C3A               	goto	l2283
  3780  0479  3A01               	xorlw	1	; case 1
  3781  047A  1903               	skipnz
  3782  047B  2C48               	goto	l2289
  3783  047C  2C7D               	goto	l317
  3784  047D                     l317:	
  3785  047D  0008               	return
  3786  047E                     __end_of_Mo_Update:	
  3787                           
  3788                           	psect	text21
  3789  01F7                     __ptext21:	
  3790 ;; *************** function _Disp_Update *****************
  3791 ;; Defined at:
  3792 ;;		line 29 in file "Disp.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;		None
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;		None
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      void 
  3799 ;; Registers used:
  3800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3806 ;;      Params:         0       0       0       0       0
  3807 ;;      Locals:         0       0       0       0       0
  3808 ;;      Temps:          0       2       0       0       0
  3809 ;;      Totals:         0       2       0       0       0
  3810 ;;Total ram usage:        2 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    5
  3813 ;; This function calls:
  3814 ;;		_SSD_Set_Symbol
  3815 ;;		_VC_GetSpeed
  3816 ;; This function is called by:
  3817 ;;		_main
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           
  3822                           ;psect for function _Disp_Update
  3823  01F7                     _Disp_Update:	
  3824  01F7                     l2247:	
  3825                           ;incstack = 0
  3826                           ; Regs used in _Disp_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3827                           
  3828                           
  3829                           ;Disp.c: 34:     static uint8 DISP_Time_Counter = 0;;Disp.c: 35:     DISP_Time_Counter +
      +                          = (10);
  3830  01F7  300A               	movlw	10
  3831  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  3832  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  3833  01FA  00BD               	movwf	??_Disp_Update
  3834  01FB  083D               	movf	??_Disp_Update,w
  3835  01FC  07B6               	addwf	Disp_Update@DISP_Time_Counter,f
  3836                           
  3837                           ;Disp.c: 37:     if(DISP_Time_Counter != (20))
  3838  01FD  3014               	movlw	20
  3839  01FE  0636               	xorwf	Disp_Update@DISP_Time_Counter,w
  3840  01FF  1903               	btfsc	3,2
  3841  0200  2A02               	goto	u951
  3842  0201  2A03               	goto	u950
  3843  0202                     u951:	
  3844  0202  2A04               	goto	l2251
  3845  0203                     u950:	
  3846  0203  2A79               	goto	l283
  3847  0204                     l2251:	
  3848                           
  3849                           ;Disp.c: 41:     DISP_Time_Counter = 0;
  3850  0204  01B6               	clrf	Disp_Update@DISP_Time_Counter
  3851                           
  3852                           ;Disp.c: 43:     switch(VC_GetSpeed())
  3853  0205  2A60               	goto	l2261
  3854  0206                     l2253:	
  3855                           
  3856                           ;Disp.c: 46:             SSD_Set_Symbol(SSD_L_3,SSD_THIRD);
  3857  0206  3002               	movlw	2
  3858  0207  00BD               	movwf	??_Disp_Update
  3859  0208  083D               	movf	??_Disp_Update,w
  3860  0209  00BA               	movwf	SSD_Set_Symbol@index
  3861  020A  3002               	movlw	2
  3862  020B  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  3863                           
  3864                           ;Disp.c: 47:             SSD_Set_Symbol(SSD_L_2,SSD_SECOND);
  3865  0210  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0211  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0212  01BA               	clrf	SSD_Set_Symbol@index
  3868  0213  0ABA               	incf	SSD_Set_Symbol@index,f
  3869  0214  3001               	movlw	1
  3870  0215  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  3871                           
  3872                           ;Disp.c: 48:             SSD_Set_Symbol(SSD_L_1,SSD_FIRST);
  3873  021A  1283               	bcf	3,5	;RP0=0, select bank0
  3874  021B  1303               	bcf	3,6	;RP1=0, select bank0
  3875  021C  01BA               	clrf	SSD_Set_Symbol@index
  3876  021D  3000               	movlw	0
  3877  021E  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  3878                           
  3879                           ;Disp.c: 49:             break;
  3880  0223  2A79               	goto	l283
  3881  0224                     l2255:	
  3882                           
  3883                           ;Disp.c: 51:             SSD_Set_Symbol(SSD_L_1,SSD_FIRST);
  3884  0224  01BA               	clrf	SSD_Set_Symbol@index
  3885  0225  3000               	movlw	0
  3886  0226  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  3887                           
  3888                           ;Disp.c: 52:             SSD_Set_Symbol(SSD_L_2,SSD_SECOND);
  3889  022B  1283               	bcf	3,5	;RP0=0, select bank0
  3890  022C  1303               	bcf	3,6	;RP1=0, select bank0
  3891  022D  01BA               	clrf	SSD_Set_Symbol@index
  3892  022E  0ABA               	incf	SSD_Set_Symbol@index,f
  3893  022F  3001               	movlw	1
  3894  0230  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  3895                           
  3896                           ;Disp.c: 53:             SSD_Set_Symbol(SSD_NULL,SSD_THIRD);
  3897  0235  3002               	movlw	2
  3898  0236  1283               	bcf	3,5	;RP0=0, select bank0
  3899  0237  1303               	bcf	3,6	;RP1=0, select bank0
  3900  0238  00BD               	movwf	??_Disp_Update
  3901  0239  083D               	movf	??_Disp_Update,w
  3902  023A  00BA               	movwf	SSD_Set_Symbol@index
  3903  023B  3003               	movlw	3
  3904  023C  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  3905                           
  3906                           ;Disp.c: 54:             break;
  3907  0241  2A79               	goto	l283
  3908  0242                     l2257:	
  3909                           
  3910                           ;Disp.c: 56:             SSD_Set_Symbol(SSD_L_1,SSD_FIRST);
  3911  0242  01BA               	clrf	SSD_Set_Symbol@index
  3912  0243  3000               	movlw	0
  3913  0244  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  3914                           
  3915                           ;Disp.c: 57:             SSD_Set_Symbol(SSD_NULL,SSD_SECOND);
  3916  0249  1283               	bcf	3,5	;RP0=0, select bank0
  3917  024A  1303               	bcf	3,6	;RP1=0, select bank0
  3918  024B  01BA               	clrf	SSD_Set_Symbol@index
  3919  024C  0ABA               	incf	SSD_Set_Symbol@index,f
  3920  024D  3003               	movlw	3
  3921  024E  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  3922                           
  3923                           ;Disp.c: 58:             SSD_Set_Symbol(SSD_NULL,SSD_THIRD);
  3924  0253  3002               	movlw	2
  3925  0254  1283               	bcf	3,5	;RP0=0, select bank0
  3926  0255  1303               	bcf	3,6	;RP1=0, select bank0
  3927  0256  00BD               	movwf	??_Disp_Update
  3928  0257  083D               	movf	??_Disp_Update,w
  3929  0258  00BA               	movwf	SSD_Set_Symbol@index
  3930  0259  3003               	movlw	3
  3931  025A  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  3932                           
  3933                           ;Disp.c: 59:             break;
  3934  025F  2A79               	goto	l283
  3935  0260                     l2261:	
  3936  0260  120A  118A  2775  120A  118A  	fcall	_VC_GetSpeed
  3937  0265  1283               	bcf	3,5	;RP0=0, select bank0
  3938  0266  1303               	bcf	3,6	;RP1=0, select bank0
  3939  0267  00BD               	movwf	??_Disp_Update
  3940  0268  01BE               	clrf	??_Disp_Update+1
  3941                           
  3942                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3943                           ; Switch size 1, requested type "simple"
  3944                           ; Number of cases is 1, Range of values is 0 to 0
  3945                           ; switch strategies available:
  3946                           ; Name         Instructions Cycles
  3947                           ; simple_byte            4     3 (average)
  3948                           ; direct_byte           11     8 (fixed)
  3949                           ; jumptable            260     6 (fixed)
  3950                           ;	Chosen strategy is simple_byte
  3951  0269  083E               	movf	??_Disp_Update+1,w
  3952  026A  3A00               	xorlw	0	; case 0
  3953  026B  1903               	skipnz
  3954  026C  2A6E               	goto	l2655
  3955  026D  2A79               	goto	l283
  3956  026E                     l2655:	
  3957                           
  3958                           ; Switch size 1, requested type "simple"
  3959                           ; Number of cases is 3, Range of values is 10 to 140
  3960                           ; switch strategies available:
  3961                           ; Name         Instructions Cycles
  3962                           ; simple_byte           10     6 (average)
  3963                           ; jumptable            263     9 (fixed)
  3964                           ;	Chosen strategy is simple_byte
  3965  026E  083D               	movf	??_Disp_Update,w
  3966  026F  3A0A               	xorlw	10	; case 10
  3967  0270  1903               	skipnz
  3968  0271  2A06               	goto	l2253
  3969  0272  3A50               	xorlw	80	; case 90
  3970  0273  1903               	skipnz
  3971  0274  2A24               	goto	l2255
  3972  0275  3AD6               	xorlw	214	; case 140
  3973  0276  1903               	skipnz
  3974  0277  2A42               	goto	l2257
  3975  0278  2A79               	goto	l283
  3976  0279                     l283:	
  3977  0279  0008               	return
  3978  027A                     __end_of_Disp_Update:	
  3979                           
  3980                           	psect	text22
  3981  0775                     __ptext22:	
  3982 ;; *************** function _VC_GetSpeed *****************
  3983 ;; Defined at:
  3984 ;;		line 45 in file "Vacuum.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;		None
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      enum E850
  3991 ;; Registers used:
  3992 ;;		wreg
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3998 ;;      Params:         0       0       0       0       0
  3999 ;;      Locals:         0       0       0       0       0
  4000 ;;      Temps:          0       0       0       0       0
  4001 ;;      Totals:         0       0       0       0       0
  4002 ;;Total ram usage:        0 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    4
  4005 ;; This function calls:
  4006 ;;		Nothing
  4007 ;; This function is called by:
  4008 ;;		_Disp_Update
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           
  4013                           ;psect for function _VC_GetSpeed
  4014  0775                     _VC_GetSpeed:	
  4015  0775                     l2071:	
  4016                           ;incstack = 0
  4017                           ; Regs used in _VC_GetSpeed: [wreg]
  4018                           
  4019                           
  4020                           ;Vacuum.c: 48:     return motor_speed;
  4021  0775  1283               	bcf	3,5	;RP0=0, select bank0
  4022  0776  1303               	bcf	3,6	;RP1=0, select bank0
  4023  0777  084E               	movf	_motor_speed,w
  4024  0778                     l239:	
  4025  0778  0008               	return
  4026  0779                     __end_of_VC_GetSpeed:	
  4027                           
  4028                           	psect	text23
  4029  0624                     __ptext23:	
  4030 ;; *************** function _Disp_Init *****************
  4031 ;; Defined at:
  4032 ;;		line 22 in file "Disp.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;		None
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;		None
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4046 ;;      Params:         0       0       0       0       0
  4047 ;;      Locals:         0       0       0       0       0
  4048 ;;      Temps:          0       1       0       0       0
  4049 ;;      Totals:         0       1       0       0       0
  4050 ;;Total ram usage:        1 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    6
  4053 ;; This function calls:
  4054 ;;		_SSD_Init
  4055 ;; This function is called by:
  4056 ;;		_main
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           
  4061                           ;psect for function _Disp_Init
  4062  0624                     _Disp_Init:	
  4063  0624                     l2183:	
  4064                           ;incstack = 0
  4065                           ; Regs used in _Disp_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4066                           
  4067                           
  4068                           ;Disp.c: 25:     SSD_Init(SSD_NULL,SSD_FIRST);
  4069  0624  1283               	bcf	3,5	;RP0=0, select bank0
  4070  0625  1303               	bcf	3,6	;RP1=0, select bank0
  4071  0626  01C2               	clrf	SSD_Init@ssd
  4072  0627  3003               	movlw	3
  4073  0628  120A  118A  227A  120A  118A  	fcall	_SSD_Init
  4074                           
  4075                           ;Disp.c: 26:     SSD_Init(SSD_NULL,SSD_SECOND);
  4076  062D  1283               	bcf	3,5	;RP0=0, select bank0
  4077  062E  1303               	bcf	3,6	;RP1=0, select bank0
  4078  062F  01C2               	clrf	SSD_Init@ssd
  4079  0630  0AC2               	incf	SSD_Init@ssd,f
  4080  0631  3003               	movlw	3
  4081  0632  120A  118A  227A  120A  118A  	fcall	_SSD_Init
  4082                           
  4083                           ;Disp.c: 27:     SSD_Init(SSD_NULL,SSD_THIRD);
  4084  0637  3002               	movlw	2
  4085  0638  1283               	bcf	3,5	;RP0=0, select bank0
  4086  0639  1303               	bcf	3,6	;RP1=0, select bank0
  4087  063A  00C6               	movwf	??_Disp_Init
  4088  063B  0846               	movf	??_Disp_Init,w
  4089  063C  00C2               	movwf	SSD_Init@ssd
  4090  063D  3003               	movlw	3
  4091  063E  120A  118A  227A  120A  118A  	fcall	_SSD_Init
  4092  0643                     l277:	
  4093  0643  0008               	return
  4094  0644                     __end_of_Disp_Init:	
  4095                           
  4096                           	psect	text24
  4097  027A                     __ptext24:	
  4098 ;; *************** function _SSD_Init *****************
  4099 ;; Defined at:
  4100 ;;		line 52 in file "SSD.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;  sym             1    wreg     enum E859
  4103 ;;  ssd             1    8[BANK0 ] enum E865
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;  sym             1   11[BANK0 ] enum E859
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  1    wreg      void 
  4108 ;; Registers used:
  4109 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4115 ;;      Params:         0       1       0       0       0
  4116 ;;      Locals:         0       1       0       0       0
  4117 ;;      Temps:          0       2       0       0       0
  4118 ;;      Totals:         0       4       0       0       0
  4119 ;;Total ram usage:        4 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    5
  4122 ;; This function calls:
  4123 ;;		_GPIO_Init_Pin
  4124 ;;		_GPIO_Init_Port
  4125 ;;		_SSD_Set_Symbol
  4126 ;; This function is called by:
  4127 ;;		_Disp_Init
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           
  4132                           ;psect for function _SSD_Init
  4133  027A                     _SSD_Init:	
  4134                           
  4135                           ;incstack = 0
  4136                           ; Regs used in _SSD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4137                           ;SSD_Init@sym stored from wreg
  4138  027A  1283               	bcf	3,5	;RP0=0, select bank0
  4139  027B  1303               	bcf	3,6	;RP1=0, select bank0
  4140  027C  00C5               	movwf	SSD_Init@sym
  4141  027D                     l1997:	
  4142                           
  4143                           ;SSD.c: 52: void SSD_Init(SSD_Symbol_t sym,SSD_t ssd);SSD.c: 53: {;SSD.c: 55:     GPIO_I
      +                          nit_Port(&(TRISD),(0));
  4144  027D  3088               	movlw	136
  4145  027E  00BA               	movwf	GPIO_Init_Port@DirRegAddress
  4146  027F  3000               	movlw	0
  4147  0280  00BB               	movwf	GPIO_Init_Port@DirRegAddress+1
  4148  0281  01BC               	clrf	GPIO_Init_Port@dir
  4149  0282  120A  118A  236B  120A  118A  	fcall	_GPIO_Init_Port
  4150                           
  4151                           ;SSD.c: 57:     switch(ssd)
  4152  0287  2ADD               	goto	l2019
  4153  0288                     l1999:	
  4154                           
  4155                           ;SSD.c: 61:             GPIO_Init_Pin(&(TRISB),(7),(0));
  4156  0288  3086               	movlw	134
  4157  0289  00BA               	movwf	GPIO_Init_Pin@DirRegAddress
  4158  028A  3000               	movlw	0
  4159  028B  00BB               	movwf	GPIO_Init_Pin@DirRegAddress+1
  4160  028C  3007               	movlw	7
  4161  028D  00C3               	movwf	??_SSD_Init
  4162  028E  0843               	movf	??_SSD_Init,w
  4163  028F  00BC               	movwf	GPIO_Init_Pin@pin_number
  4164  0290  01BD               	clrf	GPIO_Init_Pin@dir
  4165  0291  120A  118A  22F3  120A  118A  	fcall	_GPIO_Init_Pin
  4166  0296                     l2001:	
  4167                           
  4168                           ;SSD.c: 62:             (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_OFF<<(7)));
  4169  0296  1283               	bcf	3,5	;RP0=0, select bank0
  4170  0297  1303               	bcf	3,6	;RP1=0, select bank0
  4171  0298  0806               	movf	6,w	;volatile
  4172  0299  397F               	andlw	127
  4173  029A  0086               	movwf	6	;volatile
  4174  029B                     l2003:	
  4175                           
  4176                           ;SSD.c: 63:             SSD_Set_Symbol(sym,SSD_FIRST);
  4177  029B  01BA               	clrf	SSD_Set_Symbol@index
  4178  029C  0845               	movf	SSD_Init@sym,w
  4179  029D  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  4180                           
  4181                           ;SSD.c: 64:             break;
  4182  02A2  2AF2               	goto	l186
  4183  02A3                     l2005:	
  4184                           
  4185                           ;SSD.c: 67:             GPIO_Init_Pin(&(TRISB),(6),(0));
  4186  02A3  3086               	movlw	134
  4187  02A4  00BA               	movwf	GPIO_Init_Pin@DirRegAddress
  4188  02A5  3000               	movlw	0
  4189  02A6  00BB               	movwf	GPIO_Init_Pin@DirRegAddress+1
  4190  02A7  3006               	movlw	6
  4191  02A8  00C3               	movwf	??_SSD_Init
  4192  02A9  0843               	movf	??_SSD_Init,w
  4193  02AA  00BC               	movwf	GPIO_Init_Pin@pin_number
  4194  02AB  01BD               	clrf	GPIO_Init_Pin@dir
  4195  02AC  120A  118A  22F3  120A  118A  	fcall	_GPIO_Init_Pin
  4196  02B1                     l2007:	
  4197                           
  4198                           ;SSD.c: 68:             (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_OFF<<(6)));
  4199  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  4200  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  4201  02B3  0806               	movf	6,w	;volatile
  4202  02B4  39BF               	andlw	191
  4203  02B5  0086               	movwf	6	;volatile
  4204  02B6                     l2009:	
  4205                           
  4206                           ;SSD.c: 69:             SSD_Set_Symbol(sym,SSD_SECOND);
  4207  02B6  01BA               	clrf	SSD_Set_Symbol@index
  4208  02B7  0ABA               	incf	SSD_Set_Symbol@index,f
  4209  02B8  0845               	movf	SSD_Init@sym,w
  4210  02B9  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  4211                           
  4212                           ;SSD.c: 70:             break;
  4213  02BE  2AF2               	goto	l186
  4214  02BF                     l2011:	
  4215                           
  4216                           ;SSD.c: 73:             GPIO_Init_Pin(&(TRISB),(5),(0));
  4217  02BF  3086               	movlw	134
  4218  02C0  00BA               	movwf	GPIO_Init_Pin@DirRegAddress
  4219  02C1  3000               	movlw	0
  4220  02C2  00BB               	movwf	GPIO_Init_Pin@DirRegAddress+1
  4221  02C3  3005               	movlw	5
  4222  02C4  00C3               	movwf	??_SSD_Init
  4223  02C5  0843               	movf	??_SSD_Init,w
  4224  02C6  00BC               	movwf	GPIO_Init_Pin@pin_number
  4225  02C7  01BD               	clrf	GPIO_Init_Pin@dir
  4226  02C8  120A  118A  22F3  120A  118A  	fcall	_GPIO_Init_Pin
  4227  02CD                     l2013:	
  4228                           
  4229                           ;SSD.c: 74:             (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_OFF<<(5)));
  4230  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  4231  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  4232  02CF  0806               	movf	6,w	;volatile
  4233  02D0  39DF               	andlw	223
  4234  02D1  0086               	movwf	6	;volatile
  4235  02D2                     l2015:	
  4236                           
  4237                           ;SSD.c: 75:             SSD_Set_Symbol(sym,SSD_THIRD);
  4238  02D2  3002               	movlw	2
  4239  02D3  00C3               	movwf	??_SSD_Init
  4240  02D4  0843               	movf	??_SSD_Init,w
  4241  02D5  00BA               	movwf	SSD_Set_Symbol@index
  4242  02D6  0845               	movf	SSD_Init@sym,w
  4243  02D7  120A  118A  273D  120A  118A  	fcall	_SSD_Set_Symbol
  4244                           
  4245                           ;SSD.c: 76:             break;
  4246  02DC  2AF2               	goto	l186
  4247  02DD                     l2019:	
  4248  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  4249  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  4250  02DF  0842               	movf	SSD_Init@ssd,w
  4251  02E0  00C3               	movwf	??_SSD_Init
  4252  02E1  01C4               	clrf	??_SSD_Init+1
  4253                           
  4254                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4255                           ; Switch size 1, requested type "simple"
  4256                           ; Number of cases is 1, Range of values is 0 to 0
  4257                           ; switch strategies available:
  4258                           ; Name         Instructions Cycles
  4259                           ; simple_byte            4     3 (average)
  4260                           ; direct_byte           11     8 (fixed)
  4261                           ; jumptable            260     6 (fixed)
  4262                           ;	Chosen strategy is simple_byte
  4263  02E2  0844               	movf	??_SSD_Init+1,w
  4264  02E3  3A00               	xorlw	0	; case 0
  4265  02E4  1903               	skipnz
  4266  02E5  2AE7               	goto	l2657
  4267  02E6  2AF2               	goto	l186
  4268  02E7                     l2657:	
  4269                           
  4270                           ; Switch size 1, requested type "simple"
  4271                           ; Number of cases is 3, Range of values is 0 to 2
  4272                           ; switch strategies available:
  4273                           ; Name         Instructions Cycles
  4274                           ; simple_byte           10     6 (average)
  4275                           ; direct_byte           17     8 (fixed)
  4276                           ; jumptable            260     6 (fixed)
  4277                           ;	Chosen strategy is simple_byte
  4278  02E7  0843               	movf	??_SSD_Init,w
  4279  02E8  3A00               	xorlw	0	; case 0
  4280  02E9  1903               	skipnz
  4281  02EA  2A88               	goto	l1999
  4282  02EB  3A01               	xorlw	1	; case 1
  4283  02EC  1903               	skipnz
  4284  02ED  2AA3               	goto	l2005
  4285  02EE  3A03               	xorlw	3	; case 2
  4286  02EF  1903               	skipnz
  4287  02F0  2ABF               	goto	l2011
  4288  02F1  2AF2               	goto	l186
  4289  02F2                     l186:	
  4290  02F2  0008               	return
  4291  02F3                     __end_of_SSD_Init:	
  4292                           
  4293                           	psect	text25
  4294  073D                     __ptext25:	
  4295 ;; *************** function _SSD_Set_Symbol *****************
  4296 ;; Defined at:
  4297 ;;		line 79 in file "SSD.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;  symbol          1    wreg     enum E859
  4300 ;;  index           1    0[BANK0 ] enum E865
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  symbol          1    2[BANK0 ] enum E859
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  1    wreg      void 
  4305 ;; Registers used:
  4306 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4312 ;;      Params:         0       1       0       0       0
  4313 ;;      Locals:         0       1       0       0       0
  4314 ;;      Temps:          0       1       0       0       0
  4315 ;;      Totals:         0       3       0       0       0
  4316 ;;Total ram usage:        3 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    4
  4319 ;; This function calls:
  4320 ;;		Nothing
  4321 ;; This function is called by:
  4322 ;;		_SSD_Init
  4323 ;;		_Disp_Update
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           
  4328                           ;psect for function _SSD_Set_Symbol
  4329  073D                     _SSD_Set_Symbol:	
  4330                           
  4331                           ;incstack = 0
  4332                           ; Regs used in _SSD_Set_Symbol: [wreg-fsr0h+status,2+status,0]
  4333                           ;SSD_Set_Symbol@symbol stored from wreg
  4334  073D  1283               	bcf	3,5	;RP0=0, select bank0
  4335  073E  1303               	bcf	3,6	;RP1=0, select bank0
  4336  073F  00BC               	movwf	SSD_Set_Symbol@symbol
  4337  0740                     l1925:	
  4338                           
  4339                           ;SSD.c: 79: void SSD_Set_Symbol(SSD_Symbol_t symbol,SSD_t index);SSD.c: 80: {;SSD.c: 82:
      +                               Buffer[index] = symbol;
  4340  0740  083C               	movf	SSD_Set_Symbol@symbol,w
  4341  0741  00BB               	movwf	??_SSD_Set_Symbol
  4342  0742  083A               	movf	SSD_Set_Symbol@index,w
  4343  0743  3E29               	addlw	(low (_Buffer| 0))& (0+255)
  4344  0744  0084               	movwf	4
  4345  0745  083B               	movf	??_SSD_Set_Symbol,w
  4346  0746  1383               	bcf	3,7	;select IRP bank0
  4347  0747  0080               	movwf	0
  4348  0748                     l189:	
  4349  0748  0008               	return
  4350  0749                     __end_of_SSD_Set_Symbol:	
  4351                           
  4352                           	psect	text26
  4353  036B                     __ptext26:	
  4354 ;; *************** function _GPIO_Init_Port *****************
  4355 ;; Defined at:
  4356 ;;		line 14 in file "GPIO.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;  DirRegAddres    2    0[BANK0 ] PTR volatile unsigned ch
  4359 ;;		 -> TRISD(1), 
  4360 ;;  dir             1    2[BANK0 ] unsigned char 
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;  ret             1    0        unsigned char 
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  1    wreg      unsigned char 
  4365 ;; Registers used:
  4366 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4372 ;;      Params:         0       3       0       0       0
  4373 ;;      Locals:         0       3       0       0       0
  4374 ;;      Temps:          0       1       0       0       0
  4375 ;;      Totals:         0       7       0       0       0
  4376 ;;Total ram usage:        7 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    4
  4379 ;; This function calls:
  4380 ;;		Nothing
  4381 ;; This function is called by:
  4382 ;;		_SSD_Init
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           
  4387                           ;psect for function _GPIO_Init_Port
  4388  036B                     _GPIO_Init_Port:	
  4389  036B                     l1879:	
  4390                           ;incstack = 0
  4391                           ; Regs used in _GPIO_Init_Port: [wreg-fsr0h+status,2+status,0]
  4392                           
  4393  036B                     l1881:	
  4394                           
  4395                           ;GPIO.c: 18:     if(*DirRegAddress != (TRISA) && *DirRegAddress != (TRISB) &&
  4396  036B  1283               	bcf	3,5	;RP0=0, select bank0
  4397  036C  1303               	bcf	3,6	;RP1=0, select bank0
  4398  036D  083A               	movf	GPIO_Init_Port@DirRegAddress,w
  4399  036E  0084               	movwf	4
  4400  036F  1783               	bsf	3,7
  4401  0370  1C3B               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  4402  0371  1383               	bcf	3,7
  4403  0372  0800               	movf	0,w
  4404  0373  1683               	bsf	3,5	;RP0=1, select bank1
  4405  0374  1303               	bcf	3,6	;RP1=0, select bank1
  4406  0375  0605               	xorwf	5,w	;volatile
  4407  0376  1903               	skipnz
  4408  0377  2B79               	goto	u631
  4409  0378  2B7A               	goto	u630
  4410  0379                     u631:	
  4411  0379  2BB7               	goto	l1893
  4412  037A                     u630:	
  4413  037A                     l1883:	
  4414  037A  1283               	bcf	3,5	;RP0=0, select bank0
  4415  037B  1303               	bcf	3,6	;RP1=0, select bank0
  4416  037C  083A               	movf	GPIO_Init_Port@DirRegAddress,w
  4417  037D  0084               	movwf	4
  4418  037E  1783               	bsf	3,7
  4419  037F  1C3B               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  4420  0380  1383               	bcf	3,7
  4421  0381  0800               	movf	0,w
  4422  0382  1683               	bsf	3,5	;RP0=1, select bank1
  4423  0383  1303               	bcf	3,6	;RP1=0, select bank1
  4424  0384  0606               	xorwf	6,w	;volatile
  4425  0385  1903               	skipnz
  4426  0386  2B88               	goto	u641
  4427  0387  2B89               	goto	u640
  4428  0388                     u641:	
  4429  0388  2BB7               	goto	l1893
  4430  0389                     u640:	
  4431  0389                     l1885:	
  4432  0389  1283               	bcf	3,5	;RP0=0, select bank0
  4433  038A  1303               	bcf	3,6	;RP1=0, select bank0
  4434  038B  083A               	movf	GPIO_Init_Port@DirRegAddress,w
  4435  038C  0084               	movwf	4
  4436  038D  1783               	bsf	3,7
  4437  038E  1C3B               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  4438  038F  1383               	bcf	3,7
  4439  0390  0800               	movf	0,w
  4440  0391  1683               	bsf	3,5	;RP0=1, select bank1
  4441  0392  1303               	bcf	3,6	;RP1=0, select bank1
  4442  0393  0607               	xorwf	7,w	;volatile
  4443  0394  1903               	skipnz
  4444  0395  2B97               	goto	u651
  4445  0396  2B98               	goto	u650
  4446  0397                     u651:	
  4447  0397  2BB7               	goto	l1893
  4448  0398                     u650:	
  4449  0398                     l1887:	
  4450  0398  1283               	bcf	3,5	;RP0=0, select bank0
  4451  0399  1303               	bcf	3,6	;RP1=0, select bank0
  4452  039A  083A               	movf	GPIO_Init_Port@DirRegAddress,w
  4453  039B  0084               	movwf	4
  4454  039C  1783               	bsf	3,7
  4455  039D  1C3B               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  4456  039E  1383               	bcf	3,7
  4457  039F  0800               	movf	0,w
  4458  03A0  1683               	bsf	3,5	;RP0=1, select bank1
  4459  03A1  1303               	bcf	3,6	;RP1=0, select bank1
  4460  03A2  0608               	xorwf	8,w	;volatile
  4461  03A3  1903               	skipnz
  4462  03A4  2BA6               	goto	u661
  4463  03A5  2BA7               	goto	u660
  4464  03A6                     u661:	
  4465  03A6  2BB7               	goto	l1893
  4466  03A7                     u660:	
  4467  03A7                     l1889:	
  4468  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  4469  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  4470  03A9  083A               	movf	GPIO_Init_Port@DirRegAddress,w
  4471  03AA  0084               	movwf	4
  4472  03AB  1783               	bsf	3,7
  4473  03AC  1C3B               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  4474  03AD  1383               	bcf	3,7
  4475  03AE  0800               	movf	0,w
  4476  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  4477  03B0  1303               	bcf	3,6	;RP1=0, select bank1
  4478  03B1  0609               	xorwf	9,w	;volatile
  4479  03B2  1903               	skipnz
  4480  03B3  2BB5               	goto	u671
  4481  03B4  2BB6               	goto	u670
  4482  03B5                     u671:	
  4483  03B5  2BB7               	goto	l1893
  4484  03B6                     u670:	
  4485  03B6                     l1891:	
  4486                           
  4487                           ;GPIO.c: 24:     }
  4488  03B6  2BCE               	goto	l73
  4489  03B7                     l1893:	
  4490                           
  4491                           ;GPIO.c: 26:     {;GPIO.c: 27:         ((*DirRegAddress)=(dir)?(~0):(0));
  4492  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  4493  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  4494  03B9  083C               	movf	GPIO_Init_Port@dir,w
  4495  03BA  1D03               	btfss	3,2
  4496  03BB  2BBD               	goto	u681
  4497  03BC  2BBE               	goto	u680
  4498  03BD                     u681:	
  4499  03BD  2BC1               	goto	l1897
  4500  03BE                     u680:	
  4501  03BE                     l1895:	
  4502  03BE  01BF               	clrf	_GPIO_Init_Port$116
  4503  03BF  01C0               	clrf	_GPIO_Init_Port$116+1
  4504  03C0  2BC5               	goto	l1899
  4505  03C1                     l1897:	
  4506  03C1  30FF               	movlw	255
  4507  03C2  00BF               	movwf	_GPIO_Init_Port$116
  4508  03C3  30FF               	movlw	255
  4509  03C4  00C0               	movwf	_GPIO_Init_Port$116+1
  4510  03C5                     l1899:	
  4511  03C5  083F               	movf	_GPIO_Init_Port$116,w
  4512  03C6  00BD               	movwf	??_GPIO_Init_Port
  4513  03C7  083A               	movf	GPIO_Init_Port@DirRegAddress,w
  4514  03C8  0084               	movwf	4
  4515  03C9  1783               	bsf	3,7
  4516  03CA  1C3B               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  4517  03CB  1383               	bcf	3,7
  4518  03CC  083D               	movf	??_GPIO_Init_Port,w
  4519  03CD  0080               	movwf	0
  4520  03CE                     l73:	
  4521  03CE  0008               	return
  4522  03CF                     __end_of_GPIO_Init_Port:	
  4523                           
  4524                           	psect	text27
  4525  02F3                     __ptext27:	
  4526 ;; *************** function _GPIO_Init_Pin *****************
  4527 ;; Defined at:
  4528 ;;		line 34 in file "GPIO.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  DirRegAddres    2    0[BANK0 ] PTR volatile unsigned ch
  4531 ;;		 -> TRISB(1), TRISC(1), 
  4532 ;;  pin_number      1    2[BANK0 ] unsigned char 
  4533 ;;  dir             1    3[BANK0 ] unsigned char 
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  ret             1    7[BANK0 ] unsigned char 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      unsigned char 
  4538 ;; Registers used:
  4539 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4545 ;;      Params:         0       4       0       0       0
  4546 ;;      Locals:         0       1       0       0       0
  4547 ;;      Temps:          0       3       0       0       0
  4548 ;;      Totals:         0       8       0       0       0
  4549 ;;Total ram usage:        8 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    4
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_main
  4556 ;;		_SW_Init
  4557 ;;		_LED_Init
  4558 ;;		_SSD_Init
  4559 ;;		_Mo_Init
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           
  4564                           ;psect for function _GPIO_Init_Pin
  4565  02F3                     _GPIO_Init_Pin:	
  4566  02F3                     l1859:	
  4567                           ;incstack = 0
  4568                           ; Regs used in _GPIO_Init_Pin: [wreg-fsr0h+status,2+status,0]
  4569                           
  4570                           
  4571                           ;GPIO.c: 34: uint8 GPIO_Init_Pin(volatile uint8 *DirRegAddress ,uint8 pin_number,uint8 d
      +                          ir );GPIO.c: 35: {;GPIO.c: 36:     uint8 ret = 1;
  4572  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  4573  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  4574  02F5  01C1               	clrf	GPIO_Init_Pin@ret
  4575  02F6  0AC1               	incf	GPIO_Init_Pin@ret,f
  4576  02F7                     l1861:	
  4577                           
  4578                           ;GPIO.c: 38:     if(*DirRegAddress != (TRISA) && *DirRegAddress != (TRISB) &&
  4579  02F7  083A               	movf	GPIO_Init_Pin@DirRegAddress,w
  4580  02F8  0084               	movwf	4
  4581  02F9  1783               	bsf	3,7
  4582  02FA  1C3B               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  4583  02FB  1383               	bcf	3,7
  4584  02FC  0800               	movf	0,w
  4585  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  4586  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  4587  02FF  0605               	xorwf	5,w	;volatile
  4588  0300  1903               	skipnz
  4589  0301  2B03               	goto	u561
  4590  0302  2B04               	goto	u560
  4591  0303                     u561:	
  4592  0303  2B44               	goto	l1873
  4593  0304                     u560:	
  4594  0304                     l1863:	
  4595  0304  1283               	bcf	3,5	;RP0=0, select bank0
  4596  0305  1303               	bcf	3,6	;RP1=0, select bank0
  4597  0306  083A               	movf	GPIO_Init_Pin@DirRegAddress,w
  4598  0307  0084               	movwf	4
  4599  0308  1783               	bsf	3,7
  4600  0309  1C3B               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  4601  030A  1383               	bcf	3,7
  4602  030B  0800               	movf	0,w
  4603  030C  1683               	bsf	3,5	;RP0=1, select bank1
  4604  030D  1303               	bcf	3,6	;RP1=0, select bank1
  4605  030E  0606               	xorwf	6,w	;volatile
  4606  030F  1903               	skipnz
  4607  0310  2B12               	goto	u571
  4608  0311  2B13               	goto	u570
  4609  0312                     u571:	
  4610  0312  2B44               	goto	l1873
  4611  0313                     u570:	
  4612  0313                     l1865:	
  4613  0313  1283               	bcf	3,5	;RP0=0, select bank0
  4614  0314  1303               	bcf	3,6	;RP1=0, select bank0
  4615  0315  083A               	movf	GPIO_Init_Pin@DirRegAddress,w
  4616  0316  0084               	movwf	4
  4617  0317  1783               	bsf	3,7
  4618  0318  1C3B               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  4619  0319  1383               	bcf	3,7
  4620  031A  0800               	movf	0,w
  4621  031B  1683               	bsf	3,5	;RP0=1, select bank1
  4622  031C  1303               	bcf	3,6	;RP1=0, select bank1
  4623  031D  0607               	xorwf	7,w	;volatile
  4624  031E  1903               	skipnz
  4625  031F  2B21               	goto	u581
  4626  0320  2B22               	goto	u580
  4627  0321                     u581:	
  4628  0321  2B44               	goto	l1873
  4629  0322                     u580:	
  4630  0322                     l1867:	
  4631  0322  1283               	bcf	3,5	;RP0=0, select bank0
  4632  0323  1303               	bcf	3,6	;RP1=0, select bank0
  4633  0324  083A               	movf	GPIO_Init_Pin@DirRegAddress,w
  4634  0325  0084               	movwf	4
  4635  0326  1783               	bsf	3,7
  4636  0327  1C3B               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  4637  0328  1383               	bcf	3,7
  4638  0329  0800               	movf	0,w
  4639  032A  1683               	bsf	3,5	;RP0=1, select bank1
  4640  032B  1303               	bcf	3,6	;RP1=0, select bank1
  4641  032C  0608               	xorwf	8,w	;volatile
  4642  032D  1903               	skipnz
  4643  032E  2B30               	goto	u591
  4644  032F  2B31               	goto	u590
  4645  0330                     u591:	
  4646  0330  2B44               	goto	l1873
  4647  0331                     u590:	
  4648  0331                     l1869:	
  4649  0331  1283               	bcf	3,5	;RP0=0, select bank0
  4650  0332  1303               	bcf	3,6	;RP1=0, select bank0
  4651  0333  083A               	movf	GPIO_Init_Pin@DirRegAddress,w
  4652  0334  0084               	movwf	4
  4653  0335  1783               	bsf	3,7
  4654  0336  1C3B               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  4655  0337  1383               	bcf	3,7
  4656  0338  0800               	movf	0,w
  4657  0339  1683               	bsf	3,5	;RP0=1, select bank1
  4658  033A  1303               	bcf	3,6	;RP1=0, select bank1
  4659  033B  0609               	xorwf	9,w	;volatile
  4660  033C  1903               	skipnz
  4661  033D  2B3F               	goto	u601
  4662  033E  2B40               	goto	u600
  4663  033F                     u601:	
  4664  033F  2B44               	goto	l1873
  4665  0340                     u600:	
  4666  0340                     l1871:	
  4667                           
  4668                           ;GPIO.c: 41:     {;GPIO.c: 43:        ret = 0;
  4669  0340  1283               	bcf	3,5	;RP0=0, select bank0
  4670  0341  1303               	bcf	3,6	;RP1=0, select bank0
  4671  0342  01C1               	clrf	GPIO_Init_Pin@ret
  4672                           
  4673                           ;GPIO.c: 44:     }
  4674  0343  2B69               	goto	l1875
  4675  0344                     l1873:	
  4676                           
  4677                           ;GPIO.c: 46:     {;GPIO.c: 47:         ((*DirRegAddress)=(*DirRegAddress & ~(1<<pin_numb
      +                          er))|(dir<<pin_number));
  4678  0344  1283               	bcf	3,5	;RP0=0, select bank0
  4679  0345  1303               	bcf	3,6	;RP1=0, select bank0
  4680  0346  083D               	movf	GPIO_Init_Pin@dir,w
  4681  0347  00BE               	movwf	??_GPIO_Init_Pin
  4682  0348  0A3C               	incf	GPIO_Init_Pin@pin_number,w
  4683  0349  2B4C               	goto	u614
  4684  034A                     u615:	
  4685  034A  1003               	clrc
  4686  034B  0DBE               	rlf	??_GPIO_Init_Pin,f
  4687  034C                     u614:	
  4688  034C  3EFF               	addlw	-1
  4689  034D  1D03               	skipz
  4690  034E  2B4A               	goto	u615
  4691  034F  083A               	movf	GPIO_Init_Pin@DirRegAddress,w
  4692  0350  0084               	movwf	4
  4693  0351  1783               	bsf	3,7
  4694  0352  1C3B               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  4695  0353  1383               	bcf	3,7
  4696  0354  3001               	movlw	1
  4697  0355  00BF               	movwf	??_GPIO_Init_Pin+1
  4698  0356  0A3C               	incf	GPIO_Init_Pin@pin_number,w
  4699  0357  2B5A               	goto	u624
  4700  0358                     u625:	
  4701  0358  1003               	clrc
  4702  0359  0DBF               	rlf	??_GPIO_Init_Pin+1,f
  4703  035A                     u624:	
  4704  035A  3EFF               	addlw	-1
  4705  035B  1D03               	skipz
  4706  035C  2B58               	goto	u625
  4707  035D  083F               	movf	??_GPIO_Init_Pin+1,w
  4708  035E  3AFF               	xorlw	255
  4709  035F  0500               	andwf	0,w
  4710  0360  043E               	iorwf	??_GPIO_Init_Pin,w
  4711  0361  00C0               	movwf	??_GPIO_Init_Pin+2
  4712  0362  083A               	movf	GPIO_Init_Pin@DirRegAddress,w
  4713  0363  0084               	movwf	4
  4714  0364  1783               	bsf	3,7
  4715  0365  1C3B               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  4716  0366  1383               	bcf	3,7
  4717  0367  0840               	movf	??_GPIO_Init_Pin+2,w
  4718  0368  0080               	movwf	0
  4719  0369                     l1875:	
  4720                           
  4721                           ;GPIO.c: 49:     return ret;
  4722  0369  0841               	movf	GPIO_Init_Pin@ret,w
  4723  036A                     l78:	
  4724  036A  0008               	return
  4725  036B                     __end_of_GPIO_Init_Pin:	
  4726                           
  4727                           	psect	text28
  4728  0594                     __ptext28:	
  4729 ;; *************** function _Generic_ISR *****************
  4730 ;; Defined at:
  4731 ;;		line 55 in file "VaccumCleaner.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;		None
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;		None
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  1    wreg      void 
  4738 ;; Registers used:
  4739 ;;		wreg, status,2, status,0, pclath, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4745 ;;      Params:         0       0       0       0       0
  4746 ;;      Locals:         0       0       0       0       0
  4747 ;;      Temps:          2       0       0       0       0
  4748 ;;      Totals:         2       0       0       0       0
  4749 ;;Total ram usage:        2 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    3
  4752 ;; This function calls:
  4753 ;;		_TMR0_ISR
  4754 ;;		_TMR1_CheckOverflow
  4755 ;;		_TMR1_ISR
  4756 ;;		_TMR_CheckOverflow
  4757 ;; This function is called by:
  4758 ;;		Interrupt level 1
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           
  4763                           ;psect for function _Generic_ISR
  4764  0594                     _Generic_ISR:	
  4765  0594                     i1l2353:	
  4766                           
  4767                           ;VaccumCleaner.c: 59:     if(TMR1_CheckOverflow()){
  4768  0594  120A  118A  276B  120A  118A  	fcall	_TMR1_CheckOverflow
  4769  0599  3A00               	xorlw	0
  4770  059A  1903               	skipnz
  4771  059B  2D9D               	goto	u103_21
  4772  059C  2D9E               	goto	u103_20
  4773  059D                     u103_21:	
  4774  059D  2DA3               	goto	i1l2357
  4775  059E                     u103_20:	
  4776  059E                     i1l2355:	
  4777                           
  4778                           ;VaccumCleaner.c: 60:         TMR1_ISR();
  4779  059E  120A  118A  2723  120A  118A  	fcall	_TMR1_ISR
  4780  05A3                     i1l2357:	
  4781                           
  4782                           ;VaccumCleaner.c: 64:     if(TMR_CheckOverflow())
  4783  05A3  120A  118A  2779  120A  118A  	fcall	_TMR_CheckOverflow
  4784  05A8  3A00               	xorlw	0
  4785  05A9  1903               	skipnz
  4786  05AA  2DAC               	goto	u104_21
  4787  05AB  2DAD               	goto	u104_20
  4788  05AC                     u104_21:	
  4789  05AC  2DB2               	goto	i1l54
  4790  05AD                     u104_20:	
  4791  05AD                     i1l2359:	
  4792                           
  4793                           ;VaccumCleaner.c: 65:     {;VaccumCleaner.c: 66:         TMR0_ISR();
  4794  05AD  120A  118A  26B8  120A  118A  	fcall	_TMR0_ISR
  4795  05B2                     i1l54:	
  4796  05B2  087B               	movf	??_Generic_ISR+1,w
  4797  05B3  008A               	movwf	10
  4798  05B4  0E7A               	swapf	??_Generic_ISR^(0+4294967168),w
  4799  05B5  0083               	movwf	3
  4800  05B6  0EFE               	swapf	btemp,f
  4801  05B7  0E7E               	swapf	btemp,w
  4802  05B8  0009               	retfie
  4803  05B9                     __end_of_Generic_ISR:	
  4804                           
  4805                           	psect	intentry
  4806  0004                     __pintentry:	
  4807                           ;incstack = 0
  4808                           ; Regs used in _Generic_ISR: [wreg+status,2+status,0+pclath+cstack]
  4809                           
  4810  0004                     interrupt_function:	
  4811  007E                     saved_w	set	btemp
  4812  0004  00FE               	movwf	btemp
  4813  0005  0E03               	swapf	3,w
  4814  0006  00FA               	movwf	??_Generic_ISR
  4815  0007  080A               	movf	10,w
  4816  0008  00FB               	movwf	??_Generic_ISR+1
  4817  0009  120A  118A  2D94   	ljmp	_Generic_ISR
  4818                           
  4819                           	psect	text29
  4820  0779                     __ptext29:	
  4821 ;; *************** function _TMR_CheckOverflow *****************
  4822 ;; Defined at:
  4823 ;;		line 65 in file "Timer_ZCD.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;		None
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      unsigned char 
  4830 ;; Registers used:
  4831 ;;		wreg
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4837 ;;      Params:         0       0       0       0       0
  4838 ;;      Locals:         0       0       0       0       0
  4839 ;;      Temps:          0       0       0       0       0
  4840 ;;      Totals:         0       0       0       0       0
  4841 ;;Total ram usage:        0 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		_Generic_ISR
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           
  4851                           ;psect for function _TMR_CheckOverflow
  4852  0779                     _TMR_CheckOverflow:	
  4853  0779                     i1l1489:	
  4854                           ;incstack = 0
  4855                           ; Regs used in _TMR_CheckOverflow: [wreg]
  4856                           
  4857                           
  4858                           ;Timer_ZCD.c: 68:     return ((TMR0IF));
  4859  0779  3000               	movlw	0
  4860  077A  190B               	btfsc	11,2	;volatile
  4861  077B  3001               	movlw	1
  4862  077C                     i1l374:	
  4863  077C  0008               	return
  4864  077D                     __end_of_TMR_CheckOverflow:	
  4865                           
  4866                           	psect	text30
  4867  0723                     __ptext30:	
  4868 ;; *************** function _TMR1_ISR *****************
  4869 ;; Defined at:
  4870 ;;		line 47 in file "Timer1.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;		None
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;		None
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      void 
  4877 ;; Registers used:
  4878 ;;		wreg, status,2, status,0, pclath, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4884 ;;      Params:         0       0       0       0       0
  4885 ;;      Locals:         0       0       0       0       0
  4886 ;;      Temps:          0       0       0       0       0
  4887 ;;      Totals:         0       0       0       0       0
  4888 ;;Total ram usage:        0 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    1
  4891 ;; This function calls:
  4892 ;;		_Mo_generate_firing_pulse
  4893 ;;		_TMR1_Stop
  4894 ;; This function is called by:
  4895 ;;		_Generic_ISR
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           
  4900                           ;psect for function _TMR1_ISR
  4901  0723                     _TMR1_ISR:	
  4902  0723                     i1l1483:	
  4903                           ;incstack = 0
  4904                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  4905                           
  4906                           
  4907                           ;Timer1.c: 50:     Mo_generate_firing_pulse();
  4908  0723  120A  118A  2712  120A  118A  	fcall	_Mo_generate_firing_pulse
  4909  0728                     i1l1485:	
  4910                           
  4911                           ;Timer1.c: 52:     TMR1_Stop();
  4912  0728  120A  118A  277D  120A  118A  	fcall	_TMR1_Stop
  4913  072D                     i1l1487:	
  4914                           
  4915                           ;Timer1.c: 54:     ((TMR1IF) = 0);
  4916  072D  1283               	bcf	3,5	;RP0=0, select bank0
  4917  072E  1303               	bcf	3,6	;RP1=0, select bank0
  4918  072F  100C               	bcf	12,0	;volatile
  4919  0730                     i1l409:	
  4920  0730  0008               	return
  4921  0731                     __end_of_TMR1_ISR:	
  4922                           
  4923                           	psect	text31
  4924  077D                     __ptext31:	
  4925 ;; *************** function _TMR1_Stop *****************
  4926 ;; Defined at:
  4927 ;;		line 37 in file "Timer1.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;		None
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;		None
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  1    wreg      void 
  4934 ;; Registers used:
  4935 ;;		None
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4941 ;;      Params:         0       0       0       0       0
  4942 ;;      Locals:         0       0       0       0       0
  4943 ;;      Temps:          0       0       0       0       0
  4944 ;;      Totals:         0       0       0       0       0
  4945 ;;Total ram usage:        0 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; This function calls:
  4948 ;;		Nothing
  4949 ;; This function is called by:
  4950 ;;		_TMR1_ISR
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           
  4955                           ;psect for function _TMR1_Stop
  4956  077D                     _TMR1_Stop:	
  4957  077D                     i1l1323:	
  4958                           ;incstack = 0
  4959                           ; Regs used in _TMR1_Stop: []
  4960                           
  4961                           
  4962                           ;Timer1.c: 40:     ((TMR1ON) = 0);
  4963  077D  1283               	bcf	3,5	;RP0=0, select bank0
  4964  077E  1303               	bcf	3,6	;RP1=0, select bank0
  4965  077F  1010               	bcf	16,0	;volatile
  4966  0780                     i1l403:	
  4967  0780  0008               	return
  4968  0781                     __end_of_TMR1_Stop:	
  4969                           
  4970                           	psect	text32
  4971  0712                     __ptext32:	
  4972 ;; *************** function _Mo_generate_firing_pulse *****************
  4973 ;; Defined at:
  4974 ;;		line 151 in file "Motor.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;		None
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;		None
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		wreg, status,2
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4988 ;;      Params:         0       0       0       0       0
  4989 ;;      Locals:         0       0       0       0       0
  4990 ;;      Temps:          1       0       0       0       0
  4991 ;;      Totals:         1       0       0       0       0
  4992 ;;Total ram usage:        1 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_TMR1_ISR
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           
  5002                           ;psect for function _Mo_generate_firing_pulse
  5003  0712                     _Mo_generate_firing_pulse:	
  5004  0712                     i1l1307:	
  5005                           ;incstack = 0
  5006                           ; Regs used in _Mo_generate_firing_pulse: [wreg+status,2]
  5007                           
  5008                           
  5009                           ;Motor.c: 154:     (((PORTC))=((PORTC) & ~(1<<(3)))|(1<<(3)));
  5010  0712  1283               	bcf	3,5	;RP0=0, select bank0
  5011  0713  1303               	bcf	3,6	;RP1=0, select bank0
  5012  0714  0807               	movf	7,w	;volatile
  5013  0715  39F7               	andlw	247
  5014  0716  3808               	iorlw	8
  5015  0717  0087               	movwf	7	;volatile
  5016  0718                     i1l1309:	
  5017                           
  5018                           ;Motor.c: 156:     _delay((unsigned long)(((100))*(8000000/4000000.0)));
  5019  0718  3042               	movlw	66
  5020  0719  00F0               	movwf	??_Mo_generate_firing_pulse
  5021  071A                     u106_27:	
  5022  071A  0BF0               	decfsz	??_Mo_generate_firing_pulse,f
  5023  071B  2F1A               	goto	u106_27
  5024  071C  0000               	nop
  5025  071D                     i1l1311:	
  5026                           
  5027                           ;Motor.c: 158:     (((PORTC))=((PORTC) & ~(1<<(3)))|(0<<(3)));
  5028  071D  1283               	bcf	3,5	;RP0=0, select bank0
  5029  071E  1303               	bcf	3,6	;RP1=0, select bank0
  5030  071F  0807               	movf	7,w	;volatile
  5031  0720  39F7               	andlw	247
  5032  0721  0087               	movwf	7	;volatile
  5033  0722                     i1l335:	
  5034  0722  0008               	return
  5035  0723                     __end_of_Mo_generate_firing_pulse:	
  5036                           
  5037                           	psect	text33
  5038  076B                     __ptext33:	
  5039 ;; *************** function _TMR1_CheckOverflow *****************
  5040 ;; Defined at:
  5041 ;;		line 42 in file "Timer1.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;		None
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;		None
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  1    wreg      unsigned char 
  5048 ;; Registers used:
  5049 ;;		wreg
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5055 ;;      Params:         0       0       0       0       0
  5056 ;;      Locals:         0       0       0       0       0
  5057 ;;      Temps:          0       0       0       0       0
  5058 ;;      Totals:         0       0       0       0       0
  5059 ;;Total ram usage:        0 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; This function calls:
  5062 ;;		Nothing
  5063 ;; This function is called by:
  5064 ;;		_Generic_ISR
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           
  5069                           ;psect for function _TMR1_CheckOverflow
  5070  076B                     _TMR1_CheckOverflow:	
  5071  076B                     i1l1479:	
  5072                           ;incstack = 0
  5073                           ; Regs used in _TMR1_CheckOverflow: [wreg]
  5074                           
  5075                           
  5076                           ;Timer1.c: 45:     return ((TMR1IF));
  5077  076B  3000               	movlw	0
  5078  076C  1283               	bcf	3,5	;RP0=0, select bank0
  5079  076D  1303               	bcf	3,6	;RP1=0, select bank0
  5080  076E  180C               	btfsc	12,0	;volatile
  5081  076F  3001               	movlw	1
  5082  0770                     i1l406:	
  5083  0770  0008               	return
  5084  0771                     __end_of_TMR1_CheckOverflow:	
  5085                           
  5086                           	psect	text34
  5087  06B8                     __ptext34:	
  5088 ;; *************** function _TMR0_ISR *****************
  5089 ;; Defined at:
  5090 ;;		line 37 in file "Timer_ZCD.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      void 
  5097 ;; Registers used:
  5098 ;;		wreg, status,2, status,0, pclath, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5104 ;;      Params:         0       0       0       0       0
  5105 ;;      Locals:         0       0       0       0       0
  5106 ;;      Temps:          2       0       0       0       0
  5107 ;;      Totals:         2       0       0       0       0
  5108 ;;Total ram usage:        2 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    2
  5111 ;; This function calls:
  5112 ;;		_Mo_Get_Actual_Angle
  5113 ;;		_TMR1_Start
  5114 ;; This function is called by:
  5115 ;;		_Generic_ISR
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           
  5120                           ;psect for function _TMR0_ISR
  5121  06B8                     _TMR0_ISR:	
  5122  06B8                     i1l2313:	
  5123                           ;incstack = 0
  5124                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  5125                           
  5126                           
  5127                           ;Timer_ZCD.c: 40:     TMR1_Start(Mo_Get_Actual_Angle());
  5128  06B8  120A  118A  2781  120A  118A  	fcall	_Mo_Get_Actual_Angle
  5129  06BD  00F8               	movwf	??_TMR0_ISR
  5130  06BE  01F9               	clrf	??_TMR0_ISR+1
  5131  06BF  0878               	movf	??_TMR0_ISR,w
  5132  06C0  00F6               	movwf	TMR1_Start@degree
  5133  06C1  0879               	movf	??_TMR0_ISR+1,w
  5134  06C2  00F7               	movwf	TMR1_Start@degree+1
  5135  06C3  120A  118A  2663  120A  118A  	fcall	_TMR1_Start
  5136  06C8                     i1l2315:	
  5137                           
  5138                           ;Timer_ZCD.c: 42:     ((TMR0IF) = 0);
  5139  06C8  110B               	bcf	11,2	;volatile
  5140  06C9                     i1l2317:	
  5141                           
  5142                           ;Timer_ZCD.c: 44:     ((TMR0) = 256 - ((78)));
  5143  06C9  30B2               	movlw	178
  5144  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  5145  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  5146  06CC  0081               	movwf	1	;volatile
  5147  06CD                     i1l2319:	
  5148                           
  5149                           ;Timer_ZCD.c: 46:     ISR_FLAG = 1;
  5150  06CD  3001               	movlw	1
  5151  06CE  00F8               	movwf	??_TMR0_ISR
  5152  06CF  0878               	movf	??_TMR0_ISR,w
  5153  06D0  00B9               	movwf	_ISR_FLAG	;volatile
  5154  06D1                     i1l365:	
  5155  06D1  0008               	return
  5156  06D2                     __end_of_TMR0_ISR:	
  5157                           
  5158                           	psect	text35
  5159  0663                     __ptext35:	
  5160 ;; *************** function _TMR1_Start *****************
  5161 ;; Defined at:
  5162 ;;		line 22 in file "Timer1.c"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;  degree          2    6[COMMON] unsigned int 
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;		None
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  1    wreg      void 
  5169 ;; Registers used:
  5170 ;;		wreg, status,2, status,0, pclath, cstack
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5176 ;;      Params:         2       0       0       0       0
  5177 ;;      Locals:         0       0       0       0       0
  5178 ;;      Temps:          0       0       0       0       0
  5179 ;;      Totals:         2       0       0       0       0
  5180 ;;Total ram usage:        2 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; Hardware stack levels required when called:    1
  5183 ;; This function calls:
  5184 ;;		i1___wmul
  5185 ;; This function is called by:
  5186 ;;		_TMR0_ISR
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           
  5191                           ;psect for function _TMR1_Start
  5192  0663                     _TMR1_Start:	
  5193  0663                     i1l2151:	
  5194                           ;incstack = 0
  5195                           ; Regs used in _TMR1_Start: [wreg+status,2+status,0+pclath+cstack]
  5196                           
  5197                           
  5198                           ;Timer1.c: 22: void TMR1_Start(uint16 degree);Timer1.c: 23: {;Timer1.c: 25:     ((TMR1IF
      +                          ) = 0);
  5199  0663  1283               	bcf	3,5	;RP0=0, select bank0
  5200  0664  1303               	bcf	3,6	;RP1=0, select bank0
  5201  0665  100C               	bcf	12,0	;volatile
  5202  0666                     i1l2153:	
  5203                           
  5204                           ;Timer1.c: 27:     ((TMR1) = (65536 - ((degree) * 55)));;
  5205  0666  0877               	movf	TMR1_Start@degree+1,w
  5206  0667  00F1               	movwf	i1___wmul@multiplier+1
  5207  0668  0876               	movf	TMR1_Start@degree,w
  5208  0669  00F0               	movwf	i1___wmul@multiplier
  5209  066A  30C9               	movlw	201
  5210  066B  00F2               	movwf	i1___wmul@multiplicand
  5211  066C  30FF               	movlw	255
  5212  066D  00F3               	movwf	i1___wmul@multiplicand+1
  5213  066E  120A  118A  25B9  120A  118A  	fcall	i1___wmul
  5214  0673  0871               	movf	?i1___wmul+1,w
  5215  0674  1283               	bcf	3,5	;RP0=0, select bank0
  5216  0675  1303               	bcf	3,6	;RP1=0, select bank0
  5217  0676  008F               	movwf	15	;volatile
  5218  0677  0870               	movf	?i1___wmul,w
  5219  0678  008E               	movwf	14	;volatile
  5220  0679                     i1l2155:	
  5221                           
  5222                           ;Timer1.c: 32:     (TMR1IE = 1);
  5223  0679  1683               	bsf	3,5	;RP0=1, select bank1
  5224  067A  1303               	bcf	3,6	;RP1=0, select bank1
  5225  067B  140C               	bsf	12,0	;volatile
  5226  067C                     i1l2157:	
  5227                           
  5228                           ;Timer1.c: 33:     (PEIE = 1);
  5229  067C  170B               	bsf	11,6	;volatile
  5230  067D                     i1l2159:	
  5231                           
  5232                           ;Timer1.c: 35:     ((TMR1ON) = 1);
  5233  067D  1283               	bcf	3,5	;RP0=0, select bank0
  5234  067E  1303               	bcf	3,6	;RP1=0, select bank0
  5235  067F  1410               	bsf	16,0	;volatile
  5236  0680                     i1l400:	
  5237  0680  0008               	return
  5238  0681                     __end_of_TMR1_Start:	
  5239                           
  5240                           	psect	text36
  5241  05B9                     __ptext36:	
  5242 ;; *************** function i1___wmul *****************
  5243 ;; Defined at:
  5244 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  multiplier      2    0[COMMON] unsigned int 
  5247 ;;  multiplicand    2    2[COMMON] unsigned int 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;  __wmul          2    4[COMMON] unsigned int 
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  2    0[COMMON] unsigned int 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, status,0
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5259 ;;      Params:         4       0       0       0       0
  5260 ;;      Locals:         2       0       0       0       0
  5261 ;;      Temps:          0       0       0       0       0
  5262 ;;      Totals:         6       0       0       0       0
  5263 ;;Total ram usage:        6 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; This function calls:
  5266 ;;		Nothing
  5267 ;; This function is called by:
  5268 ;;		_TMR1_Start
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           
  5273                           ;psect for function i1___wmul
  5274  05B9                     i1___wmul:	
  5275  05B9                     i1l1927:	
  5276                           ;incstack = 0
  5277                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  5278                           
  5279  05B9  01F4               	clrf	i1___wmul@product
  5280  05BA  01F5               	clrf	i1___wmul@product+1
  5281  05BB                     i1l1929:	
  5282  05BB  1C70               	btfss	i1___wmul@multiplier,0
  5283  05BC  2DBE               	goto	u70_21
  5284  05BD  2DBF               	goto	u70_20
  5285  05BE                     u70_21:	
  5286  05BE  2DC5               	goto	i1l495
  5287  05BF                     u70_20:	
  5288  05BF                     i1l1931:	
  5289  05BF  0872               	movf	i1___wmul@multiplicand,w
  5290  05C0  07F4               	addwf	i1___wmul@product,f
  5291  05C1  1803               	skipnc
  5292  05C2  0AF5               	incf	i1___wmul@product+1,f
  5293  05C3  0873               	movf	i1___wmul@multiplicand+1,w
  5294  05C4  07F5               	addwf	i1___wmul@product+1,f
  5295  05C5                     i1l495:	
  5296  05C5  3001               	movlw	1
  5297  05C6                     u71_25:	
  5298  05C6  1003               	clrc
  5299  05C7  0DF2               	rlf	i1___wmul@multiplicand,f
  5300  05C8  0DF3               	rlf	i1___wmul@multiplicand+1,f
  5301  05C9  3EFF               	addlw	-1
  5302  05CA  1D03               	skipz
  5303  05CB  2DC6               	goto	u71_25
  5304  05CC                     i1l1933:	
  5305  05CC  3001               	movlw	1
  5306  05CD                     u72_25:	
  5307  05CD  1003               	clrc
  5308  05CE  0CF1               	rrf	i1___wmul@multiplier+1,f
  5309  05CF  0CF0               	rrf	i1___wmul@multiplier,f
  5310  05D0  3EFF               	addlw	-1
  5311  05D1  1D03               	skipz
  5312  05D2  2DCD               	goto	u72_25
  5313  05D3                     i1l1935:	
  5314  05D3  0870               	movf	i1___wmul@multiplier,w
  5315  05D4  0471               	iorwf	i1___wmul@multiplier+1,w
  5316  05D5  1D03               	btfss	3,2
  5317  05D6  2DD8               	goto	u73_21
  5318  05D7  2DD9               	goto	u73_20
  5319  05D8                     u73_21:	
  5320  05D8  2DBB               	goto	i1l1929
  5321  05D9                     u73_20:	
  5322  05D9                     i1l1937:	
  5323  05D9  0875               	movf	i1___wmul@product+1,w
  5324  05DA  00F1               	movwf	?i1___wmul+1
  5325  05DB  0874               	movf	i1___wmul@product,w
  5326  05DC  00F0               	movwf	?i1___wmul
  5327  05DD                     i1l497:	
  5328  05DD  0008               	return
  5329  05DE                     __end_ofi1___wmul:	
  5330                           
  5331                           	psect	text37
  5332  0781                     __ptext37:	
  5333 ;; *************** function _Mo_Get_Actual_Angle *****************
  5334 ;; Defined at:
  5335 ;;		line 147 in file "Motor.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;		None
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;		None
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      unsigned char 
  5342 ;; Registers used:
  5343 ;;		wreg
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5349 ;;      Params:         0       0       0       0       0
  5350 ;;      Locals:         0       0       0       0       0
  5351 ;;      Temps:          0       0       0       0       0
  5352 ;;      Totals:         0       0       0       0       0
  5353 ;;Total ram usage:        0 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; This function calls:
  5356 ;;		Nothing
  5357 ;; This function is called by:
  5358 ;;		_TMR0_ISR
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _Mo_Get_Actual_Angle
  5364  0781                     _Mo_Get_Actual_Angle:	
  5365  0781                     i1l2147:	
  5366                           ;incstack = 0
  5367                           ; Regs used in _Mo_Get_Actual_Angle: [wreg]
  5368                           
  5369                           
  5370                           ;Motor.c: 149:     return actual_angle;
  5371  0781  1283               	bcf	3,5	;RP0=0, select bank0
  5372  0782  1303               	bcf	3,6	;RP1=0, select bank0
  5373  0783  0833               	movf	_actual_angle,w
  5374  0784                     i1l332:	
  5375  0784  0008               	return
  5376  0785                     __end_of_Mo_Get_Actual_Angle:	
  5377  007E                     btemp	set	126	;btemp
  5378  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         28
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     16      47
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    GPIO_Init_Pin@DirRegAddress	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISB(SFR1[1]), TRISC(SFR1[1]), 

    GPIO_Init_Port@DirRegAddress	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR1[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Generic_ISR in COMMON

    _Generic_ISR->_TMR0_ISR
    _TMR1_ISR->_Mo_generate_firing_pulse
    _TMR0_ISR->_TMR1_Start
    _TMR1_Start->i1___wmul

Critical Paths under _main in BANK0

    _main->_VC_Init
    _VC_Update->_Switch_Event_Handler
    _Switch_Event_Handler->_SW_GetState
    _SW_GetState->___bmul
    _VC_Init->_LED_Init
    _Mo_Init->_GPIO_Init_Pin
    _LED_Init->_GPIO_Init_Pin
    _SW_Update->_SW_UpdateState
    _SW_UpdateState->___bmul
    _SW_Init->_GPIO_Init_Pin
    _SSD_Update->_SSD_Disable
    _SSD_Update->_SSD_Enable
    _Disp_Update->_SSD_Set_Symbol
    _Disp_Init->_SSD_Init
    _SSD_Init->_GPIO_Init_Pin

Critical Paths under _Generic_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Generic_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Generic_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Generic_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   16465
                                             15 BANK0      1     1      0
                          _Disp_Init
                        _Disp_Update
                      _GPIO_Init_Pin
                          _Mo_Update
                         _SSD_Update
                            _SW_Init
                          _SW_Update
                          _TMR1_Init
                           _TMR_Init
                          _TMR_Start
                            _VC_Init
                          _VC_Update
 ---------------------------------------------------------------------------------
 (1) _VC_Update                                            1     1      0     970
                                             10 BANK0      1     1      0
                        _Mo_SetSpeed
               _Switch_Event_Handler
 ---------------------------------------------------------------------------------
 (2) _Switch_Event_Handler                                 2     2      0     926
                                              8 BANK0      2     2      0
                       _LED_SetState
                        _SW_GetState
 ---------------------------------------------------------------------------------
 (3) _SW_GetState                                          4     4      0     502
                                              4 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _Mo_SetSpeed                                          2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _VC_Init                                              2     2      0    5255
                                             13 BANK0      2     2      0
                           _LED_Init
                            _Mo_Init
 ---------------------------------------------------------------------------------
 (2) _Mo_Init                                              2     2      0    2318
                                              8 BANK0      2     2      0
                      _GPIO_Init_Pin
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             5     4      1    2893
                                              8 BANK0      5     4      1
                      _GPIO_Init_Pin
                       _LED_SetState
 ---------------------------------------------------------------------------------
 (3) _LED_SetState                                         4     3      1     424
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _TMR_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SW_Update                                            2     2      0     742
                                              8 BANK0      2     2      0
                     _SW_UpdateState
 ---------------------------------------------------------------------------------
 (2) _SW_UpdateState                                       4     4      0     742
                                              4 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     456
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _SW_Init                                              1     1      0    2296
                                              8 BANK0      1     1      0
                      _GPIO_Init_Pin
 ---------------------------------------------------------------------------------
 (1) _SSD_Update                                           1     1      0      44
                                              3 BANK0      1     1      0
                     _SSD_Data_write
                        _SSD_Disable
                         _SSD_Enable
 ---------------------------------------------------------------------------------
 (2) _SSD_Enable                                           3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _SSD_Disable                                          3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _SSD_Data_write                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mo_Update                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Disp_Update                                          2     2      0     956
                                              3 BANK0      2     2      0
                     _SSD_Set_Symbol
                        _VC_GetSpeed
 ---------------------------------------------------------------------------------
 (2) _VC_GetSpeed                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Disp_Init                                            1     1      0    3906
                                             12 BANK0      1     1      0
                           _SSD_Init
 ---------------------------------------------------------------------------------
 (2) _SSD_Init                                             4     3      1    3906
                                              8 BANK0      4     3      1
                      _GPIO_Init_Pin
                     _GPIO_Init_Port
                     _SSD_Set_Symbol
 ---------------------------------------------------------------------------------
 (2) _SSD_Set_Symbol                                       3     2      1     956
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _GPIO_Init_Port                                       7     4      3     338
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (3) _GPIO_Init_Pin                                        8     4      4    2296
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Generic_ISR                                          2     2      0     242
                                             10 COMMON     2     2      0
                           _TMR0_ISR
                 _TMR1_CheckOverflow
                           _TMR1_ISR
                  _TMR_CheckOverflow
 ---------------------------------------------------------------------------------
 (6) _TMR_CheckOverflow                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
           _Mo_generate_firing_pulse
                          _TMR1_Stop
 ---------------------------------------------------------------------------------
 (7) _TMR1_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Mo_generate_firing_pulse                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _TMR1_CheckOverflow                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             2     2      0     242
                                              8 COMMON     2     2      0
                _Mo_Get_Actual_Angle
                         _TMR1_Start
 ---------------------------------------------------------------------------------
 (7) _TMR1_Start                                           2     0      2     242
                                              6 COMMON     2     0      2
                _Mo_Get_Actual_Angle (ARG)
                           i1___wmul
 ---------------------------------------------------------------------------------
 (8) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) _Mo_Get_Actual_Angle                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Disp_Init
     _SSD_Init
       _GPIO_Init_Pin
       _GPIO_Init_Port
       _SSD_Set_Symbol
   _Disp_Update
     _SSD_Set_Symbol
     _VC_GetSpeed
   _GPIO_Init_Pin
   _Mo_Update
   _SSD_Update
     _SSD_Data_write
     _SSD_Disable
     _SSD_Enable
   _SW_Init
     _GPIO_Init_Pin
   _SW_Update
     _SW_UpdateState
       ___bmul
   _TMR1_Init
   _TMR_Init
   _TMR_Start
   _VC_Init
     _LED_Init
       _GPIO_Init_Pin
       _LED_SetState
     _Mo_Init
       _GPIO_Init_Pin
   _VC_Update
     _Mo_SetSpeed
     _Switch_Event_Handler
       _LED_SetState
       _SW_GetState
         ___bmul

 _Generic_ISR (ROOT)
   _TMR0_ISR
     _Mo_Get_Actual_Angle
     _TMR1_Start
       _Mo_Get_Actual_Angle (ARG)
       i1___wmul (ARG)
   _TMR1_CheckOverflow
   _TMR1_ISR
     _Mo_generate_firing_pulse
     _TMR1_Stop
   _TMR_CheckOverflow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     10      2F       5       58.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3D      12        0.0%
ABS                  0      0      3D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Jan 17 04:21:43 2020

           __end_of_SSD_Data_write 073D                         _SSD_Update 0540  
                   ___bmul@product 003C                        _VC_GetSpeed 0775  
                      __CFG_CP$OFF 0000                __end_of_SW_GetState 06EA  
                               l73 03CE                                 l91 0508  
                               l78 036A                                 l94 06E9  
                               fsr 0004                   i1___wmul@product 0074  
                              l100 04C8                                l114 0146  
                              l130 053F                                l205 0601  
                              l214 0593                                l310 070B  
                              l311 0711                                l144 0662  
                              l217 073C                                l307 0623  
                              l236 06B7                                l317 047D  
                              l245 069C                                l239 0778  
                              l521 0700                                l186 02F2  
                              l362 076A                                l283 0279  
                              l195 056C                                l268 01F6  
                              l189 0748                                l277 0643  
                              l368 0753                                l397 0763  
                              _GIE 005F                                _PS0 0408  
                              _PS1 0409                                u600 0340  
                              _PS2 040A                                u601 033F  
                     __CFG_CPD$OFF 0000                                u540 06F2  
                              u541 06F1                                u614 034C  
                              u630 037A                                u550 06FF  
                              u615 034A                                u631 0379  
                              u551 06FE                                u624 035A  
                              u560 0304                                u640 0389  
                              u800 00F7                                u625 0358  
                              u561 0303                                u641 0388  
                              u801 00F6                                u570 0313  
                              u650 0398                                u810 010B  
                              u571 0312                                u651 0397  
                              u811 010A                                u580 0322  
                              u660 03A7                                u740 004C  
                              u820 0535                                u900 070A  
                              u581 0321                                u661 03A6  
                              u741 004B                                u821 0534  
                              u901 0709                                u590 0331  
                              u670 03B6                                u910 054C  
                              u750 0060                                u830 0152  
                              u591 0330                                u671 03B5  
                              u911 054B                                u751 005F  
                              u831 0151                                u680 03BE  
                              u920 0560                                u760 0083  
                              u840 015A                                u681 03BD  
                              u921 055F                                u761 0082  
                              u841 0159                                u770 0097  
                              u930 048A                                u850 0180  
                              u771 0096                                u931 0489  
                              u851 017F                                u780 00BB  
                              u860 0188                                u781 00BA  
                              u861 0187                                u950 0203  
                              u790 00CF                                u870 01AE  
                              u951 0202                                u791 00CE  
                              u695 064B                                u871 01AD  
                              u880 01B6                                u960 068D  
                              u945 04B8                                u881 01B5  
                              u961 068C                                u970 0437  
                              u890 01C5                                u971 0436  
                              u891 01C4                                u980 0440  
                              u981 043F                                u990 044E  
                              u991 044D                                fsr0 0004  
                              indf 0000                       __CFG_FOSC$HS 0000  
                     __CFG_LVP$OFF 0000                               l2001 0296  
                             l2011 02BF                               l2003 029B  
                             l2013 02CD                               l2005 02A3  
                             l2101 0193                               l2015 02D2  
                             l2007 02B1                               l2031 05EA  
                             l2103 01A3                               l2009 02B6  
                             l2041 0731                               l2033 05EE  
                             l2025 05E1                               l2201 0501  
                             l2121 01E0                               l2113 01C6  
                             l2105 01AE                               l2019 02DD  
                             l2027 05E2                               l2051 0580  
                             l2043 0570                               l2211 054D  
                             l2203 0504                               l2115 01CB  
                             l2123 01E2                               l2107 01B6  
                             l2301 0469                               l2029 05E6  
                             l2045 0571                               l2221 0561  
                             l2213 054E                               l2205 0506  
                             l2061 0613                               l2141 0704  
                             l2109 01BC                               l2125 01EB  
                             l2071 0775                               l2303 046B  
                             l2047 0576                               l2223 0566  
                             l2215 0554                               l2207 0540  
                             l2231 048C                               l2063 0618  
                             l2127 01EF                               l2119 01D0  
                             l2049 057B                               l2217 055A  
                             l2241 04AF                               l2233 0495  
                             l2225 047E                               l2065 061C  
                             l2161 06A0                               l2145 070D  
                             l2081 015B                               l2321 03CF  
                             l2251 0204                               l2307 046D  
                             l2219 0560                               l2243 04B5  
                             l2235 049B                               l2171 0749  
                             l2067 0620                               l2059 0605  
                             l2163 06A4                               l2091 0180  
                             l2083 0160                               l2075 0147  
                             l2331 03E7                               l2323 03D2  
                             l2253 0206                               l2261 0260  
                             l2245 04C2                               l2237 04A1  
                             l2229 048B                               l2181 075C  
                             l2173 074A                               l2069 0622  
                             l2165 06AA                               l2077 0152  
                             l2341 040B                               l2333 03EC  
                             l2325 03D8                               l2183 0624  
                             l2255 0224                               l2247 01F7  
                             l2191 04DC                               l2239 04A9  
                             l2175 074E                               l2167 06B3  
                             l2095 0189                               l2087 0165  
                             l2271 068E                               l2351 0424  
                             l2343 0410                               l2335 03F1  
                             l2327 03DD                               l2257 0242  
                             l2281 0438                               l2193 04DE  
                             l2185 04C9                               l2169 0764  
                             l2177 074F                               l2097 018E  
                             l2089 0175                               l2273 068F  
                             l2345 0415                               l2337 0401  
                             l2329 03E2                               l2291 044E  
                             l2283 043A                               l2195 04EE  
                             l2187 04D7                               l2179 0750  
                             l2275 0694                               l2267 0681  
                             l2347 041A                               l2339 0408  
                             l2293 0452                               l2285 0440  
                             l2277 042B                               l2197 04F0  
                             l2189 04DA                               l2349 041F  
                             l2295 0454                               l2287 0443  
                             l2199 04F2                               l1911 0647  
                             l1903 06D5                               l2297 045E  
                             l2289 0448                               l1913 0648  
                             l1905 06D5                               l2641 01D8  
                             l2299 0464                               l2651 05F6  
                             l1851 06F6                               l2643 052B  
                             l1907 06E8                               l1861 02F7  
                             l1925 0740                               l2653 0475  
                             l1853 06F8                               l1845 06ED  
                             l1941 0039                               l2645 065D  
                             l1917 0655                               l2637 016D  
                             l1871 0340                               l1863 0304  
                             l2655 026E                               l1855 06FF  
                             l1847 06EE                               l2647 0138  
                             l1951 0083                               l1943 003A  
                             l2639 019B                               l1865 0313  
                             l1873 0344                               l1881 036B  
                             l2657 02E7                               l2649 0588  
                             l1849 06F2                               l1961 00E5  
                             l1953 0097                               l1945 004C  
                             l1875 0369                               l1867 0322  
                             l1859 02F3                               l1891 03B6  
                             l1883 037A                               l1963 00F7  
                             l1955 00A9                               l1947 0060  
                             l1869 0331                               l1885 0389  
                             l1893 03B7                               l1965 010B  
                             l1957 00BB                               l1949 0071  
                             l1981 0521                               l1895 03BE  
                             l1887 0398                               l1879 036B  
                             l1959 00CF                               l1983 0523  
                             l1897 03C1                               l1889 03A7  
                             l1969 0121                               l1985 0530  
                             l1977 050C                               l1899 03C5  
                             l1987 0535                               l1979 050D  
                             l1997 027D                               l1999 0288  
                             u1000 045E                               u1001 045D  
                             _T0CS 040D                               u1010 0464  
                             u1011 0463                               u1020 0408  
                             u1021 0407                               _PEIE 005E  
                             i1l54 05B2                               _TMR0 0001  
                             _TMR1 000E                       __CFG_WRT$OFF 0000  
                    ??_Mo_SetSpeed 003A                               _main 03CF  
                             btemp 007E                    __end_of_VC_Init 06B8  
                             start 000C                __end_of_Generic_ISR 05B9  
              __end_of_Disp_Update 027A                    __end_of_SW_Init 0509  
              _pressure_sw_counter 002F                  ___bmul@multiplier 003D  
                    _GPIO_Init_Pin 02F3                    __end_of_Mo_Init 0624  
                  ?_SSD_Data_write 0070                      ?_LED_SetState 003A  
                   _SSD_Set_Symbol 073D                   __end_of_LED_Init 0540  
                            ?_main 0070                  _TMR_CheckOverflow 0779  
                    __CFG_WDTE$OFF 0000                              i1l400 0680  
                            i1l403 0780                              i1l332 0784  
                            i1l406 0770                              i1l335 0722  
                            i1l409 0730                              i1l365 06D1  
                            i1l374 077C                              i1l495 05C5  
                            i1l497 05DD                              _PORTB 0006  
                            _PORTC 0007                              _PORTD 0008  
                            u70_20 05BF                              u70_21 05BE  
                            u71_25 05C6                              u72_25 05CD  
                            u73_20 05D9                              u73_21 05D8  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _TRISE 0089                 ?_TMR_CheckOverflow 0070  
                      LED_Init@led 0046                        LED_Init@ret 0045  
                 __end_of_TMR0_ISR 06D2                   __end_of_TMR1_ISR 0731  
               __size_of_TMR1_Init 0008                        ?_TMR1_Start 0076  
               __size_of_TMR1_Stop 0004                   __end_of_SSD_Init 02F3  
              ??_TMR_CheckOverflow 0070                     __CFG_BOREN$OFF 0000  
                            pclath 000A                   __end_of_TMR_Init 076B  
                 __end_ofi1___wmul 05DE                 _TMR1_CheckOverflow 076B  
                            status 0003                i1___wmul@multiplier 0070  
                            wtemp0 007E                       SSD_Disable@s 003C  
          __size_of_SW_UpdateState 0111                        _SW_GetState 06D2  
               __size_of_TMR_Start 000B                 __size_of_VC_Update 001C  
                      ?_SSD_Enable 0070                     ?_GPIO_Init_Pin 003A  
                  __initialization 000F                ?_TMR1_CheckOverflow 0070  
              __end_of_Mo_SetSpeed 0712                       __end_of_main 042B  
           __end_of_SSD_Set_Symbol 0749                     _GPIO_Init_Port 036B  
                   ??_LED_SetState 003B                        ?_SSD_Update 0070  
        __end_of_TMR_CheckOverflow 077D                             ??_main 0049  
                     Mo_SetSpeed@m 003B                 __size_of_SW_Update 004B  
      GPIO_Init_Port@DirRegAddress 003A                 __size_of_Disp_Init 0020  
             ??_TMR1_CheckOverflow 0070         GPIO_Init_Pin@DirRegAddress 003A  
                        ??_VC_Init 0047                        _Generic_ISR 0594  
                           i1l1311 071D                             u103_20 059E  
                           u103_21 059D                             i1l1307 0712  
                           i1l1323 077D                             i1l1309 0718  
                           i1l2151 0663                             u104_20 05AD  
                           i1l2153 0666                             i1l2313 06B8  
                           u104_21 05AC                             i1l2147 0781  
                           i1l2155 0679                             i1l2315 06C8  
                           i1l2157 067C                             i1l2317 06C9  
                           i1l2159 067D                             i1l2319 06CD  
                           i1l2353 0594                             i1l1483 0723  
                           i1l2355 059E                             i1l1485 0728  
                           i1l2357 05A3                             i1l1479 076B  
                           i1l1487 072D                             i1l2359 05AD  
                           i1l1489 0779                             i1l1931 05BF  
                           i1l1933 05CC                             i1l1935 05D3  
                           i1l1927 05B9                             u106_27 071A  
                           i1l1937 05D9                             i1l1929 05BB  
                      _Disp_Update 01F7                          ??_SW_Init 0042  
                           _TMR0IE 005D                             _TMR0IF 005A  
                           _TMR1IE 0460                             _TMR1IF 0060  
                           _TMR1CS 0081                _Mo_Get_Actual_Angle 0781  
                           _TMR1ON 0080                 __size_of_Mo_Update 0053  
                        ??_Mo_Init 0042                             _Buffer 0029  
                   __CFG_PWRTE$OFF 0000             __end_of_GPIO_Init_Port 03CF  
                           ___bmul 06EA                  __end_of_TMR1_Init 0764  
                  ?_SSD_Set_Symbol 003A                  __end_of_TMR1_Stop 0781  
               _GPIO_Init_Port$116 003F                __size_of_TMR1_Start 001E  
         SW_Update@SW_Time_Counter 0038               ?_Mo_Get_Actual_Angle 0070  
                     VC_Init@speed 0048                             saved_w 007E  
                __end_of_TMR_Start 0754                  __end_of_VC_Update 069D  
           _soft_switching_counter 0035                __size_of_SSD_Enable 0027  
                LED_SetState@state 003A        Mo_Update@motor_tick_counter 0031  
              __size_of_SSD_Update 002D            __end_of__initialization 0032  
                        ?_LED_Init 0042                        _Mo_SetSpeed 0701  
                  ??_GPIO_Init_Pin 003E                   GPIO_Init_Pin@dir 003D  
                __end_of_SW_Update 04C9                   GPIO_Init_Pin@ret 0041  
                     ?_SSD_Disable 0070                ___bmul@multiplicand 003A  
                __end_of_Disp_Init 0644                    ?_GPIO_Init_Port 003A  
                   __pcstackCOMMON 0070                       __pidataBANK0 0771  
                        ?_TMR0_ISR 0070                          ?_TMR1_ISR 0070  
                     ?_VC_GetSpeed 0070         __size_of_TMR_CheckOverflow 0004  
__size_of_Mo_generate_firing_pulse 0011          ?_Mo_generate_firing_pulse 0070  
            ??_Mo_Get_Actual_Angle 0070                          ?_SSD_Init 0042  
                        ?_TMR_Init 0070                  __end_of_Mo_Update 047E  
                        ?i1___wmul 0070                       _actual_angle 0033  
                    SW_GetState@sw 0040      __size_of_Switch_Event_Handler 00B0  
             __end_of_LED_SetState 0663                         __pbssBANK0 0020  
                   _SW_UpdateState 0036                         ??_LED_Init 0043  
                 ??_SSD_Data_write 003A                         __pmaintext 03CF  
                          ?___bmul 003A                         ??_TMR0_ISR 0078  
                       ??_TMR1_ISR 0071                         __pintentry 0004  
                       ??_SSD_Init 0043                         ??_TMR_Init 003A  
                       ??i1___wmul 0074                            _T1CKPS0 0084  
                          _T1CKPS1 0085                            _T1OSCEN 0083  
                     ??_TMR1_Start 0078                            _VC_Init 069D  
           __end_of_SW_UpdateState 0147                            _SW_DATA 0020  
              SSD_Set_Symbol@index 003A                            _SW_Init 04C9  
                          _Mo_Init 0602                       ?_SW_GetState 0070  
                    LED_Init@state 0042                       ??_SSD_Enable 003A  
                  __size_of___bmul 0017                       ??_SSD_Update 003D  
                       _currentSSD 007D                 __end_of_TMR1_Start 0681  
                          __ptext1 0681                            __ptext2 0147  
                          __ptext3 06D2                            __ptext4 0701  
                          __ptext5 069D                            __ptext6 0602  
                          __ptext7 0509                            __ptext8 0644  
                          __ptext9 0749                 __end_of_SSD_Enable 0594  
                          clrloop0 0755                       ?_Generic_ISR 0070  
             end_of_initialization 0032                    ?_SW_UpdateState 0070  
                     ?_Disp_Update 0070                 __end_of_SSD_Update 056D  
                 ??_SSD_Set_Symbol 003B               __size_of_SSD_Disable 0024  
            i1___wmul@multiplicand 0072                          _TMR1_Init 075C  
             __size_of_VC_GetSpeed 0004                          _TMR1_Stop 077D  
                 TMR1_Start@degree 0076              __size_of_LED_SetState 001F  
      __size_of_TMR1_CheckOverflow 0006                          _TMR_Start 0749  
                        _VC_Update 0681            GPIO_Init_Pin@pin_number 003C  
                 ??_GPIO_Init_Port 003D   __end_of_Mo_generate_firing_pulse 0723  
                     ?_Mo_SetSpeed 0070                  __size_of_LED_Init 0037  
                GPIO_Init_Port@dir 003C                          _SW_Update 047E  
                   __end_of___bmul 0701                          _Disp_Init 0624  
                     _LED_SetState 0644                  __size_of_TMR0_ISR 001A  
                __size_of_TMR1_ISR 000E                         ?_TMR1_Init 0070  
                       ?_TMR1_Stop 0070                        SSD_Enable@s 003C  
                __size_of_SSD_Init 0079                start_initialization 000F  
                __size_of_TMR_Init 0007                  __size_ofi1___wmul 0025  
                        _Mo_Update 042B                        SSD_Init@ssd 0042  
                      SSD_Init@sym 0045                         ?_TMR_Start 0070  
                       ?_VC_Update 0070              __end_of_GPIO_Init_Pin 036B  
     __end_of_Switch_Event_Handler 01F7        __end_of_Mo_Get_Actual_Angle 0785  
                   SW_GetState@ret 0041                           ??___bmul 003B  
             __size_of_SW_GetState 0018                         ?_SW_Update 0070  
                       ?_Disp_Init 0070                        __pdataBANK0 004A  
                      __pbssCOMMON 007C                          ___latbits 0002  
                    __pcstackBANK0 003A                         ?_Mo_Update 0070  
                         ?_VC_Init 0070                           ?_SW_Init 0070  
             __size_of_Generic_ISR 0025               __size_of_Disp_Update 0083  
                         ?_Mo_Init 0070                          __pnvBANK0 004E  
         _Mo_generate_firing_pulse 0712                        ??_TMR1_Init 003A  
                      ??_TMR1_Stop 0070                   ??_SW_UpdateState 003E  
                      ??_TMR_Start 003A                        ??_VC_Update 0044  
                 SW_UpdateState@sw 0041                  interrupt_function 0004  
                         _LED_Init 0509                          clear_ram0 0754  
             __size_of_Mo_SetSpeed 0011                           _ISR_FLAG 0039  
                         _TMR0_ISR 06B8                        ??_SW_Update 0042  
                         _TMR1_ISR 0723                        ??_Disp_Init 0046  
          __size_of_SSD_Data_write 000C                           _SSD_Init 027A  
                         _TMR_Init 0764                           i1___wmul 05B9  
                         Mo_Init@m 0043                        ??_Mo_Update 003A  
             SSD_Set_Symbol@symbol 003C               _Switch_Event_Handler 0147  
                 __size_of_VC_Init 001B                   __size_of_SW_Init 0040  
                    ??_SSD_Disable 003A                   __size_of_Mo_Init 0022  
                    ??_VC_GetSpeed 003A                    LED_SetState@led 003D  
       SSD_Update@SSD_Time_Counter 007C         __end_of_TMR1_CheckOverflow 0771  
            ?_Switch_Event_Handler 0070                           __ptext10 0764  
                         __ptext11 075C                           __ptext20 042B  
                         __ptext12 047E                           __ptext21 01F7  
                         __ptext13 0036                           __ptext30 0723  
                         __ptext22 0775                           __ptext14 06EA  
                         __ptext31 077D                           __ptext23 0624  
                         __ptext15 04C9                           __ptext32 0712  
                         __ptext24 027A                           __ptext16 0540  
                         __ptext33 076B                           __ptext25 073D  
                         __ptext17 056D                           __ptext34 06B8  
                         __ptext26 036B                           __ptext18 05DE  
                         __ptext35 0663                           __ptext27 02F3  
                         __ptext19 0731                           __ptext36 05B9  
                         __ptext28 0594                           __ptext37 0781  
                         __ptext29 0779                       _target_angle 0034  
                    __size_of_main 005C                __end_of_SSD_Disable 0602  
          __size_of_SSD_Set_Symbol 000C           VC_Update@VC_TICK_COUNTER 0037  
              __end_of_VC_GetSpeed 0779                           intlevel1 0000  
       ??_Mo_generate_firing_pulse 0070                        _tempCounter 002D  
                    ??_SW_GetState 003E            __size_of_GPIO_Init_Port 0064  
                   _SSD_Data_write 0731       Disp_Update@DISP_Time_Counter 0036  
     __size_of_Mo_Get_Actual_Angle 0004                        _motor_speed 004E  
                      _motor_state 0032             ??_Switch_Event_Handler 0042  
           __size_of_GPIO_Init_Pin 0078                         _TMR1_Start 0663  
                    ??_Generic_ISR 007A                      ??_Disp_Update 003D  
                      _SSD_LOT_ARR 004A                        _SSD_Disable 05DE  
                       _SSD_Enable 056D  
